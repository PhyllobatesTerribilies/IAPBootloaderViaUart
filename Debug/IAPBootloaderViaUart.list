
IAPBootloaderViaUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007918  08007918  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  08007918  08007918  00017918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007920  08007920  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007920  08007920  00017920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08007928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000074  0800799c  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d4  080079fc  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000568  24000134  08007a5c  00020134  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400069c  08007a5c  0002069c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020579  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000032bc  00000000  00000000  000406db  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001060  00000000  00000000  00043998  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000f28  00000000  00000000  000449f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00037f5c  00000000  00000000  00045920  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000f2e3  00000000  00000000  0007d87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0015e771  00000000  00000000  0008cb5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001eb2d0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004ba0  00000000  00000000  001eb34c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007828 	.word	0x08007828

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	08007828 	.word	0x08007828

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fdbe 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f812 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f9a0 	bl	80009d0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000690:	f000 f8ce 	bl	8000830 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000694:	f000 f91e 	bl	80008d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000698:	f000 f968 	bl	800096c <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello\n\r");
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <main+0x2c>)
 800069e:	f006 f9df 	bl	8006a60 <iprintf>
	  HAL_Delay(1000);
 80006a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a6:	f000 fe3f 	bl	8001328 <HAL_Delay>
  {
 80006aa:	e7f7      	b.n	800069c <main+0x1c>
 80006ac:	08007840 	.word	0x08007840

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0cc      	sub	sp, #304	; 0x130
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006ba:	224c      	movs	r2, #76	; 0x4c
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 f9c6 	bl	8006a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006c8:	2220      	movs	r2, #32
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f006 f9bf 	bl	8006a50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	4618      	mov	r0, r3
 80006d8:	23bc      	movs	r3, #188	; 0xbc
 80006da:	461a      	mov	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f006 f9b7 	bl	8006a50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006e2:	2002      	movs	r0, #2
 80006e4:	f002 f8de 	bl	80028a4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	4b4d      	ldr	r3, [pc, #308]	; (8000824 <SystemClock_Config+0x174>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f2:	4a4c      	ldr	r2, [pc, #304]	; (8000824 <SystemClock_Config+0x174>)
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006fa:	4b4a      	ldr	r3, [pc, #296]	; (8000824 <SystemClock_Config+0x174>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	f003 0201 	and.w	r2, r3, #1
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	4b48      	ldr	r3, [pc, #288]	; (8000828 <SystemClock_Config+0x178>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070e:	4a46      	ldr	r2, [pc, #280]	; (8000828 <SystemClock_Config+0x178>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b44      	ldr	r3, [pc, #272]	; (8000828 <SystemClock_Config+0x178>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000726:	bf00      	nop
 8000728:	4b3f      	ldr	r3, [pc, #252]	; (8000828 <SystemClock_Config+0x178>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000734:	d1f8      	bne.n	8000728 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000736:	2303      	movs	r3, #3
 8000738:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800073c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000740:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000744:	2301      	movs	r3, #1
 8000746:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074a:	2340      	movs	r3, #64	; 0x40
 800074c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000756:	2302      	movs	r3, #2
 8000758:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000762:	2318      	movs	r3, #24
 8000764:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000768:	2302      	movs	r3, #2
 800076a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800076e:	2304      	movs	r3, #4
 8000770:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800077a:	230c      	movs	r3, #12
 800077c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000790:	4618      	mov	r0, r3
 8000792:	f002 f8d1 	bl	8002938 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800079c:	f000 fa06 	bl	8000bac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	233f      	movs	r3, #63	; 0x3f
 80007a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 fcbe 	bl	8003158 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x136>
  {
    Error_Handler();
 80007e2:	f000 f9e3 	bl	8000bac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <SystemClock_Config+0x17c>)
 80007ec:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2200      	movs	r2, #0
 80007f4:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	4618      	mov	r0, r3
 8000808:	f003 f82a 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x166>
  {
    Error_Handler();
 8000812:	f000 f9cb 	bl	8000bac <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000816:	f002 f87f 	bl	8002918 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800081a:	bf00      	nop
 800081c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	58000400 	.word	0x58000400
 8000828:	58024800 	.word	0x58024800
 800082c:	00040002 	.word	0x00040002

08000830 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_ETH_Init+0x90>)
 8000836:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <MX_ETH_Init+0x94>)
 8000838:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <MX_ETH_Init+0x90>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_ETH_Init+0x90>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	3301      	adds	r3, #1
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_ETH_Init+0x90>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	3302      	adds	r3, #2
 8000852:	22e1      	movs	r2, #225	; 0xe1
 8000854:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_ETH_Init+0x90>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	3303      	adds	r3, #3
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_ETH_Init+0x90>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	3304      	adds	r3, #4
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_ETH_Init+0x90>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	3305      	adds	r3, #5
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_ETH_Init+0x90>)
 8000876:	2201      	movs	r2, #1
 8000878:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_ETH_Init+0x90>)
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_ETH_Init+0x98>)
 800087e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_ETH_Init+0x90>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_ETH_Init+0x9c>)
 8000884:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_ETH_Init+0x90>)
 8000888:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800088c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800088e:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_ETH_Init+0x90>)
 8000890:	f001 f8e0 	bl	8001a54 <HAL_ETH_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 f987 	bl	8000bac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800089e:	2234      	movs	r2, #52	; 0x34
 80008a0:	2100      	movs	r1, #0
 80008a2:	480b      	ldr	r0, [pc, #44]	; (80008d0 <MX_ETH_Init+0xa0>)
 80008a4:	f006 f8d4 	bl	8006a50 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_ETH_Init+0xa0>)
 80008aa:	2221      	movs	r2, #33	; 0x21
 80008ac:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_ETH_Init+0xa0>)
 80008b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008b4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_ETH_Init+0xa0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	240005f0 	.word	0x240005f0
 80008c4:	40028000 	.word	0x40028000
 80008c8:	240000d4 	.word	0x240000d4
 80008cc:	24000074 	.word	0x24000074
 80008d0:	24000660 	.word	0x24000660

080008d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <MX_USART3_UART_Init+0x94>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_USART3_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <MX_USART3_UART_Init+0x90>)
 800091e:	f004 fa9f 	bl	8004e60 <HAL_UART_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 f940 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000930:	f005 fcd5 	bl	80062de <HAL_UARTEx_SetTxFifoThreshold>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800093a:	f000 f937 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4808      	ldr	r0, [pc, #32]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000942:	f005 fd0a 	bl	800635a <HAL_UARTEx_SetRxFifoThreshold>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800094c:	f000 f92e 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000952:	f005 fc8b 	bl	800626c <HAL_UARTEx_DisableFifoMode>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800095c:	f000 f926 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2400015c 	.word	0x2400015c
 8000968:	40004800 	.word	0x40004800

0800096c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000972:	4a16      	ldr	r2, [pc, #88]	; (80009cc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000974:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000978:	2209      	movs	r2, #9
 800097a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097e:	2202      	movs	r2, #2
 8000980:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098a:	2202      	movs	r2, #2
 800098c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000990:	2201      	movs	r2, #1
 8000992:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099c:	2200      	movs	r2, #0
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b4:	f001 fe2d 	bl	8002612 <HAL_PCD_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009be:	f000 f8f5 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	240001e8 	.word	0x240001e8
 80009cc:	40080000 	.word	0x40080000

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b61      	ldr	r3, [pc, #388]	; (8000b6c <MX_GPIO_Init+0x19c>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	4a5f      	ldr	r2, [pc, #380]	; (8000b6c <MX_GPIO_Init+0x19c>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f6:	4b5d      	ldr	r3, [pc, #372]	; (8000b6c <MX_GPIO_Init+0x19c>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a04:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0a:	4a58      	ldr	r2, [pc, #352]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a14:	4b55      	ldr	r3, [pc, #340]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b52      	ldr	r3, [pc, #328]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a28:	4a50      	ldr	r2, [pc, #320]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a32:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a46:	4a49      	ldr	r2, [pc, #292]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	4b43      	ldr	r3, [pc, #268]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	4a41      	ldr	r2, [pc, #260]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	f003 0308 	and.w	r3, r3, #8
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7c:	4b3b      	ldr	r3, [pc, #236]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	4a3a      	ldr	r2, [pc, #232]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8c:	4b37      	ldr	r3, [pc, #220]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9a:	4b34      	ldr	r3, [pc, #208]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	4a32      	ldr	r2, [pc, #200]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aaa:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <MX_GPIO_Init+0x19c>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	f003 0310 	and.w	r3, r3, #16
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f244 0101 	movw	r1, #16385	; 0x4001
 8000abe:	482c      	ldr	r0, [pc, #176]	; (8000b70 <MX_GPIO_Init+0x1a0>)
 8000ac0:	f001 fd8e 	bl	80025e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aca:	482a      	ldr	r0, [pc, #168]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000acc:	f001 fd88 	bl	80025e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	4828      	ldr	r0, [pc, #160]	; (8000b78 <MX_GPIO_Init+0x1a8>)
 8000ad6:	f001 fd83 	bl	80025e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4823      	ldr	r0, [pc, #140]	; (8000b7c <MX_GPIO_Init+0x1ac>)
 8000af0:	f001 fbc6 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000af4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4818      	ldr	r0, [pc, #96]	; (8000b70 <MX_GPIO_Init+0x1a0>)
 8000b0e:	f001 fbb7 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000b2c:	f001 fba8 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_GPIO_Init+0x1b0>)
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <MX_GPIO_Init+0x1b4>)
 8000b44:	f001 fb9c 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <MX_GPIO_Init+0x1a8>)
 8000b60:	f001 fb8e 	bl	8002280 <HAL_GPIO_Init>

}
 8000b64:	bf00      	nop
 8000b66:	3730      	adds	r7, #48	; 0x30
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	58020400 	.word	0x58020400
 8000b74:	58020c00 	.word	0x58020c00
 8000b78:	58021000 	.word	0x58021000
 8000b7c:	58020800 	.word	0x58020800
 8000b80:	11110000 	.word	0x11110000
 8000b84:	58021800 	.word	0x58021800

08000b88 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b90:	1d39      	adds	r1, r7, #4
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	2201      	movs	r2, #1
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <__io_putchar+0x20>)
 8000b9a:	f004 f9b1 	bl	8004f00 <HAL_UART_Transmit>

  return ch;
 8000b9e:	687b      	ldr	r3, [r7, #4]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2400015c 	.word	0x2400015c

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_MspInit+0x30>)
 8000bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bc8:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x30>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x30>)
 8000bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	58024400 	.word	0x58024400

08000bf0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a59      	ldr	r2, [pc, #356]	; (8000d74 <HAL_ETH_MspInit+0x184>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	f040 80ab 	bne.w	8000d6a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c14:	4b58      	ldr	r3, [pc, #352]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c1a:	4a57      	ldr	r2, [pc, #348]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c24:	4b54      	ldr	r3, [pc, #336]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c2e:	623b      	str	r3, [r7, #32]
 8000c30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c32:	4b51      	ldr	r3, [pc, #324]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c38:	4a4f      	ldr	r2, [pc, #316]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c42:	4b4d      	ldr	r3, [pc, #308]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c50:	4b49      	ldr	r3, [pc, #292]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c56:	4a48      	ldr	r2, [pc, #288]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c60:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	4a40      	ldr	r2, [pc, #256]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7e:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	4a39      	ldr	r2, [pc, #228]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9c:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	4a31      	ldr	r2, [pc, #196]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cba:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	4a2a      	ldr	r2, [pc, #168]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <HAL_ETH_MspInit+0x188>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ce6:	2332      	movs	r3, #50	; 0x32
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf6:	230b      	movs	r3, #11
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481e      	ldr	r0, [pc, #120]	; (8000d7c <HAL_ETH_MspInit+0x18c>)
 8000d02:	f001 fabd 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d06:	2386      	movs	r3, #134	; 0x86
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d16:	230b      	movs	r3, #11
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4817      	ldr	r0, [pc, #92]	; (8000d80 <HAL_ETH_MspInit+0x190>)
 8000d22:	f001 faad 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d38:	230b      	movs	r3, #11
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	4810      	ldr	r0, [pc, #64]	; (8000d84 <HAL_ETH_MspInit+0x194>)
 8000d44:	f001 fa9c 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5a:	230b      	movs	r3, #11
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	4808      	ldr	r0, [pc, #32]	; (8000d88 <HAL_ETH_MspInit+0x198>)
 8000d66:	f001 fa8b 	bl	8002280 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3738      	adds	r7, #56	; 0x38
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40028000 	.word	0x40028000
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58020800 	.word	0x58020800
 8000d80:	58020000 	.word	0x58020000
 8000d84:	58020400 	.word	0x58020400
 8000d88:	58021800 	.word	0x58021800

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a1e      	ldr	r2, [pc, #120]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d136      	bne.n	8000e1c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <HAL_UART_MspInit+0x9c>)
 8000db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db4:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <HAL_UART_MspInit+0x9c>)
 8000db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <HAL_UART_MspInit+0x9c>)
 8000dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_UART_MspInit+0x9c>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <HAL_UART_MspInit+0x9c>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_UART_MspInit+0x9c>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <HAL_UART_MspInit+0xa0>)
 8000e08:	f001 fa3a 	bl	8002280 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2027      	movs	r0, #39	; 0x27
 8000e12:	f000 fba6 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e16:	2027      	movs	r0, #39	; 0x27
 8000e18:	f000 fbbd 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40004800 	.word	0x40004800
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58020c00 	.word	0x58020c00

08000e30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <HAL_PCD_MspInit+0xa4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d13b      	bne.n	8000eca <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <HAL_PCD_MspInit+0xa8>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	4a1f      	ldr	r2, [pc, #124]	; (8000ed8 <HAL_PCD_MspInit+0xa8>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_PCD_MspInit+0xa8>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e70:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e82:	230a      	movs	r3, #10
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4813      	ldr	r0, [pc, #76]	; (8000edc <HAL_PCD_MspInit+0xac>)
 8000e8e:	f001 f9f7 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <HAL_PCD_MspInit+0xac>)
 8000ea8:	f001 f9ea 	bl	8002280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_PCD_MspInit+0xa8>)
 8000eae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb2:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <HAL_PCD_MspInit+0xa8>)
 8000eb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000eb8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_PCD_MspInit+0xa8>)
 8000ebe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40080000 	.word	0x40080000
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020000 	.word	0x58020000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f9d8 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <USART3_IRQHandler+0x10>)
 8000f42:	f004 f873 	bl	800502c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2400015c 	.word	0x2400015c

08000f50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e00a      	b.n	8000f78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f62:	f3af 8000 	nop.w
 8000f66:	4601      	mov	r1, r0
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	b2ca      	uxtb	r2, r1
 8000f70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbf0      	blt.n	8000f62 <_read+0x12>
	}

return len;
 8000f80:	687b      	ldr	r3, [r7, #4]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e009      	b.n	8000fb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fdef 	bl	8000b88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbf1      	blt.n	8000f9c <_write+0x12>
	}
	return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_close>:

int _close(int file)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fea:	605a      	str	r2, [r3, #4]
	return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_isatty>:

int _isatty(int file)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	return 1;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
	return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f005 fcce 	bl	80069fc <__errno>
 8001060:	4602      	mov	r2, r0
 8001062:	230c      	movs	r3, #12
 8001064:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	24080000 	.word	0x24080000
 800108c:	00000400 	.word	0x00000400
 8001090:	24000150 	.word	0x24000150
 8001094:	240006a0 	.word	0x240006a0

08001098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800109c:	4b39      	ldr	r3, [pc, #228]	; (8001184 <SystemInit+0xec>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a38      	ldr	r2, [pc, #224]	; (8001184 <SystemInit+0xec>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <SystemInit+0xf0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	2b06      	cmp	r3, #6
 80010b6:	d807      	bhi.n	80010c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010b8:	4b33      	ldr	r3, [pc, #204]	; (8001188 <SystemInit+0xf0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f023 030f 	bic.w	r3, r3, #15
 80010c0:	4a31      	ldr	r2, [pc, #196]	; (8001188 <SystemInit+0xf0>)
 80010c2:	f043 0307 	orr.w	r3, r3, #7
 80010c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <SystemInit+0xf4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a2f      	ldr	r2, [pc, #188]	; (800118c <SystemInit+0xf4>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <SystemInit+0xf4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <SystemInit+0xf4>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	492b      	ldr	r1, [pc, #172]	; (800118c <SystemInit+0xf4>)
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <SystemInit+0xf8>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <SystemInit+0xf0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	2b07      	cmp	r3, #7
 80010f0:	d907      	bls.n	8001102 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <SystemInit+0xf0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 030f 	bic.w	r3, r3, #15
 80010fa:	4a23      	ldr	r2, [pc, #140]	; (8001188 <SystemInit+0xf0>)
 80010fc:	f043 0307 	orr.w	r3, r3, #7
 8001100:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <SystemInit+0xf4>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <SystemInit+0xf4>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <SystemInit+0xf4>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <SystemInit+0xf4>)
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <SystemInit+0xfc>)
 8001118:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <SystemInit+0xf4>)
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <SystemInit+0x100>)
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <SystemInit+0xf4>)
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <SystemInit+0x104>)
 8001124:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <SystemInit+0xf4>)
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <SystemInit+0xf4>)
 800112e:	4a1b      	ldr	r2, [pc, #108]	; (800119c <SystemInit+0x104>)
 8001130:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <SystemInit+0xf4>)
 8001134:	2200      	movs	r2, #0
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <SystemInit+0xf4>)
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <SystemInit+0x104>)
 800113c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <SystemInit+0xf4>)
 8001140:	2200      	movs	r2, #0
 8001142:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <SystemInit+0xf4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a10      	ldr	r2, [pc, #64]	; (800118c <SystemInit+0xf4>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <SystemInit+0xf4>)
 8001152:	2200      	movs	r2, #0
 8001154:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <SystemInit+0x108>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <SystemInit+0x10c>)
 800115c:	4013      	ands	r3, r2
 800115e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001162:	d202      	bcs.n	800116a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <SystemInit+0x110>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <SystemInit+0x114>)
 800116c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001170:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SystemInit+0xec>)
 8001174:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001178:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00
 8001188:	52002000 	.word	0x52002000
 800118c:	58024400 	.word	0x58024400
 8001190:	eaf6ed7f 	.word	0xeaf6ed7f
 8001194:	02020200 	.word	0x02020200
 8001198:	01ff0000 	.word	0x01ff0000
 800119c:	01010280 	.word	0x01010280
 80011a0:	5c001000 	.word	0x5c001000
 80011a4:	ffff0000 	.word	0xffff0000
 80011a8:	51008108 	.word	0x51008108
 80011ac:	52004000 	.word	0x52004000

080011b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011b4:	f7ff ff70 	bl	8001098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011ba:	e003      	b.n	80011c4 <LoopCopyDataInit>

080011bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80011be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011c2:	3104      	adds	r1, #4

080011c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80011c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011cc:	d3f6      	bcc.n	80011bc <CopyDataInit>
  ldr  r2, =_sbss
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80011d0:	e002      	b.n	80011d8 <LoopFillZerobss>

080011d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011d4:	f842 3b04 	str.w	r3, [r2], #4

080011d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80011da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011dc:	d3f9      	bcc.n	80011d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011de:	f005 fc13 	bl	8006a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e2:	f7ff fa4d 	bl	8000680 <main>
  bx  lr    
 80011e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80011ec:	08007928 	.word	0x08007928
  ldr  r0, =_sdata
 80011f0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80011f4:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 80011f8:	24000134 	.word	0x24000134
  ldr  r3, = _ebss
 80011fc:	2400069c 	.word	0x2400069c

08001200 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC3_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120a:	2003      	movs	r0, #3
 800120c:	f000 f99e 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001210:	f002 f958 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8001214:	4601      	mov	r1, r0
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_Init+0x68>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	4a13      	ldr	r2, [pc, #76]	; (8001270 <HAL_Init+0x6c>)
 8001222:	5cd3      	ldrb	r3, [r2, r3]
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	fa21 f303 	lsr.w	r3, r1, r3
 800122c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_Init+0x68>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_Init+0x6c>)
 8001238:	5cd3      	ldrb	r3, [r2, r3]
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	fa22 f303 	lsr.w	r3, r2, r3
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_Init+0x70>)
 8001246:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001248:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <HAL_Init+0x74>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f814 	bl	800127c <HAL_InitTick>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e002      	b.n	8001264 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800125e:	f7ff fcad 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	58024400 	.word	0x58024400
 8001270:	08007858 	.word	0x08007858
 8001274:	24000004 	.word	0x24000004
 8001278:	24000000 	.word	0x24000000

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_InitTick+0x60>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e021      	b.n	80012d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_InitTick+0x64>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_InitTick+0x60>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f983 	bl	80015b2 <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00e      	b.n	80012d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d80a      	bhi.n	80012d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f000 f94d 	bl	8001562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_InitTick+0x68>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2400000c 	.word	0x2400000c
 80012e0:	24000000 	.word	0x24000000
 80012e4:	24000008 	.word	0x24000008

080012e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x20>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x24>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_IncTick+0x24>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	2400000c 	.word	0x2400000c
 800130c:	24000694 	.word	0x24000694

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	24000694 	.word	0x24000694

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff ffee 	bl	8001310 <HAL_GetTick>
 8001334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_Delay+0x40>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800134e:	bf00      	nop
 8001350:	f7ff ffde 	bl	8001310 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	2400000c 	.word	0x2400000c

0800136c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetREVID+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0c1b      	lsrs	r3, r3, #16
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	5c001000 	.word	0x5c001000

08001384 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001394:	4904      	ldr	r1, [pc, #16]	; (80013a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	58000400 	.word	0x58000400

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <__NVIC_SetPriorityGrouping+0x40>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x40>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00
 80013f0:	05fa0000 	.word	0x05fa0000

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <__NVIC_EnableIRQ+0x38>)
 800142a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	; (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <__NVIC_SetPriority+0x50>)
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff8e 	bl	800144c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff29 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff40 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff90 	bl	80014a0 <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5f 	bl	800144c <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff33 	bl	8001410 <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffa4 	bl	8001508 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e205      	b.n	80019ea <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d004      	beq.n	80015f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e1fa      	b.n	80019ea <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a8c      	ldr	r2, [pc, #560]	; (800182c <HAL_DMA_Abort_IT+0x260>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d04a      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a8b      	ldr	r2, [pc, #556]	; (8001830 <HAL_DMA_Abort_IT+0x264>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d045      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a89      	ldr	r2, [pc, #548]	; (8001834 <HAL_DMA_Abort_IT+0x268>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d040      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a88      	ldr	r2, [pc, #544]	; (8001838 <HAL_DMA_Abort_IT+0x26c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d03b      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a86      	ldr	r2, [pc, #536]	; (800183c <HAL_DMA_Abort_IT+0x270>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d036      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a85      	ldr	r2, [pc, #532]	; (8001840 <HAL_DMA_Abort_IT+0x274>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d031      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a83      	ldr	r2, [pc, #524]	; (8001844 <HAL_DMA_Abort_IT+0x278>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d02c      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a82      	ldr	r2, [pc, #520]	; (8001848 <HAL_DMA_Abort_IT+0x27c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d027      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a80      	ldr	r2, [pc, #512]	; (800184c <HAL_DMA_Abort_IT+0x280>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d022      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a7f      	ldr	r2, [pc, #508]	; (8001850 <HAL_DMA_Abort_IT+0x284>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d01d      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a7d      	ldr	r2, [pc, #500]	; (8001854 <HAL_DMA_Abort_IT+0x288>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d018      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7c      	ldr	r2, [pc, #496]	; (8001858 <HAL_DMA_Abort_IT+0x28c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d013      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a7a      	ldr	r2, [pc, #488]	; (800185c <HAL_DMA_Abort_IT+0x290>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d00e      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a79      	ldr	r2, [pc, #484]	; (8001860 <HAL_DMA_Abort_IT+0x294>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d009      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a77      	ldr	r2, [pc, #476]	; (8001864 <HAL_DMA_Abort_IT+0x298>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d004      	beq.n	8001694 <HAL_DMA_Abort_IT+0xc8>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a76      	ldr	r2, [pc, #472]	; (8001868 <HAL_DMA_Abort_IT+0x29c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d101      	bne.n	8001698 <HAL_DMA_Abort_IT+0xcc>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_DMA_Abort_IT+0xce>
 8001698:	2300      	movs	r3, #0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d065      	beq.n	800176a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2204      	movs	r2, #4
 80016a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a60      	ldr	r2, [pc, #384]	; (800182c <HAL_DMA_Abort_IT+0x260>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d04a      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a5e      	ldr	r2, [pc, #376]	; (8001830 <HAL_DMA_Abort_IT+0x264>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d045      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a5d      	ldr	r2, [pc, #372]	; (8001834 <HAL_DMA_Abort_IT+0x268>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d040      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a5b      	ldr	r2, [pc, #364]	; (8001838 <HAL_DMA_Abort_IT+0x26c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d03b      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a5a      	ldr	r2, [pc, #360]	; (800183c <HAL_DMA_Abort_IT+0x270>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d036      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a58      	ldr	r2, [pc, #352]	; (8001840 <HAL_DMA_Abort_IT+0x274>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d031      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a57      	ldr	r2, [pc, #348]	; (8001844 <HAL_DMA_Abort_IT+0x278>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d02c      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a55      	ldr	r2, [pc, #340]	; (8001848 <HAL_DMA_Abort_IT+0x27c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d027      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a54      	ldr	r2, [pc, #336]	; (800184c <HAL_DMA_Abort_IT+0x280>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d022      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a52      	ldr	r2, [pc, #328]	; (8001850 <HAL_DMA_Abort_IT+0x284>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01d      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a51      	ldr	r2, [pc, #324]	; (8001854 <HAL_DMA_Abort_IT+0x288>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d018      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <HAL_DMA_Abort_IT+0x28c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a4e      	ldr	r2, [pc, #312]	; (800185c <HAL_DMA_Abort_IT+0x290>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d00e      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a4c      	ldr	r2, [pc, #304]	; (8001860 <HAL_DMA_Abort_IT+0x294>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d009      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a4b      	ldr	r2, [pc, #300]	; (8001864 <HAL_DMA_Abort_IT+0x298>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d004      	beq.n	8001746 <HAL_DMA_Abort_IT+0x17a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a49      	ldr	r2, [pc, #292]	; (8001868 <HAL_DMA_Abort_IT+0x29c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d108      	bne.n	8001758 <HAL_DMA_Abort_IT+0x18c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e147      	b.n	80019e8 <HAL_DMA_Abort_IT+0x41c>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e13e      	b.n	80019e8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 020e 	bic.w	r2, r2, #14
 8001778:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a2b      	ldr	r2, [pc, #172]	; (800182c <HAL_DMA_Abort_IT+0x260>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d04a      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a29      	ldr	r2, [pc, #164]	; (8001830 <HAL_DMA_Abort_IT+0x264>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d045      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a28      	ldr	r2, [pc, #160]	; (8001834 <HAL_DMA_Abort_IT+0x268>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d040      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a26      	ldr	r2, [pc, #152]	; (8001838 <HAL_DMA_Abort_IT+0x26c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d03b      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a25      	ldr	r2, [pc, #148]	; (800183c <HAL_DMA_Abort_IT+0x270>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d036      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a23      	ldr	r2, [pc, #140]	; (8001840 <HAL_DMA_Abort_IT+0x274>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d031      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a22      	ldr	r2, [pc, #136]	; (8001844 <HAL_DMA_Abort_IT+0x278>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d02c      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a20      	ldr	r2, [pc, #128]	; (8001848 <HAL_DMA_Abort_IT+0x27c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d027      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1f      	ldr	r2, [pc, #124]	; (800184c <HAL_DMA_Abort_IT+0x280>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d022      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <HAL_DMA_Abort_IT+0x284>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d01d      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <HAL_DMA_Abort_IT+0x288>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d018      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <HAL_DMA_Abort_IT+0x28c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a19      	ldr	r2, [pc, #100]	; (800185c <HAL_DMA_Abort_IT+0x290>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d00e      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_DMA_Abort_IT+0x294>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d009      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <HAL_DMA_Abort_IT+0x298>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d004      	beq.n	800181a <HAL_DMA_Abort_IT+0x24e>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <HAL_DMA_Abort_IT+0x29c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d128      	bne.n	800186c <HAL_DMA_Abort_IT+0x2a0>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e027      	b.n	800187c <HAL_DMA_Abort_IT+0x2b0>
 800182c:	40020010 	.word	0x40020010
 8001830:	40020028 	.word	0x40020028
 8001834:	40020040 	.word	0x40020040
 8001838:	40020058 	.word	0x40020058
 800183c:	40020070 	.word	0x40020070
 8001840:	40020088 	.word	0x40020088
 8001844:	400200a0 	.word	0x400200a0
 8001848:	400200b8 	.word	0x400200b8
 800184c:	40020410 	.word	0x40020410
 8001850:	40020428 	.word	0x40020428
 8001854:	40020440 	.word	0x40020440
 8001858:	40020458 	.word	0x40020458
 800185c:	40020470 	.word	0x40020470
 8001860:	40020488 	.word	0x40020488
 8001864:	400204a0 	.word	0x400204a0
 8001868:	400204b8 	.word	0x400204b8
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a5c      	ldr	r2, [pc, #368]	; (80019f4 <HAL_DMA_Abort_IT+0x428>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d072      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a5b      	ldr	r2, [pc, #364]	; (80019f8 <HAL_DMA_Abort_IT+0x42c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d06d      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a59      	ldr	r2, [pc, #356]	; (80019fc <HAL_DMA_Abort_IT+0x430>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d068      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a58      	ldr	r2, [pc, #352]	; (8001a00 <HAL_DMA_Abort_IT+0x434>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d063      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a56      	ldr	r2, [pc, #344]	; (8001a04 <HAL_DMA_Abort_IT+0x438>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d05e      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a55      	ldr	r2, [pc, #340]	; (8001a08 <HAL_DMA_Abort_IT+0x43c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d059      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a53      	ldr	r2, [pc, #332]	; (8001a0c <HAL_DMA_Abort_IT+0x440>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d054      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <HAL_DMA_Abort_IT+0x444>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d04f      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a50      	ldr	r2, [pc, #320]	; (8001a14 <HAL_DMA_Abort_IT+0x448>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d04a      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a4f      	ldr	r2, [pc, #316]	; (8001a18 <HAL_DMA_Abort_IT+0x44c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d045      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a4d      	ldr	r2, [pc, #308]	; (8001a1c <HAL_DMA_Abort_IT+0x450>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d040      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a4c      	ldr	r2, [pc, #304]	; (8001a20 <HAL_DMA_Abort_IT+0x454>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d03b      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a4a      	ldr	r2, [pc, #296]	; (8001a24 <HAL_DMA_Abort_IT+0x458>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d036      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a49      	ldr	r2, [pc, #292]	; (8001a28 <HAL_DMA_Abort_IT+0x45c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d031      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a47      	ldr	r2, [pc, #284]	; (8001a2c <HAL_DMA_Abort_IT+0x460>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d02c      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a46      	ldr	r2, [pc, #280]	; (8001a30 <HAL_DMA_Abort_IT+0x464>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d027      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a44      	ldr	r2, [pc, #272]	; (8001a34 <HAL_DMA_Abort_IT+0x468>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d022      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a43      	ldr	r2, [pc, #268]	; (8001a38 <HAL_DMA_Abort_IT+0x46c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d01d      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a41      	ldr	r2, [pc, #260]	; (8001a3c <HAL_DMA_Abort_IT+0x470>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d018      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a40      	ldr	r2, [pc, #256]	; (8001a40 <HAL_DMA_Abort_IT+0x474>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d013      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a3e      	ldr	r2, [pc, #248]	; (8001a44 <HAL_DMA_Abort_IT+0x478>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00e      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a3d      	ldr	r2, [pc, #244]	; (8001a48 <HAL_DMA_Abort_IT+0x47c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d009      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a3b      	ldr	r2, [pc, #236]	; (8001a4c <HAL_DMA_Abort_IT+0x480>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d004      	beq.n	800196c <HAL_DMA_Abort_IT+0x3a0>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a3a      	ldr	r2, [pc, #232]	; (8001a50 <HAL_DMA_Abort_IT+0x484>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_DMA_Abort_IT+0x3a4>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_DMA_Abort_IT+0x3a6>
 8001970:	2300      	movs	r3, #0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d028      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001984:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	2201      	movs	r2, #1
 8001996:	409a      	lsls	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80019a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00c      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40020010 	.word	0x40020010
 80019f8:	40020028 	.word	0x40020028
 80019fc:	40020040 	.word	0x40020040
 8001a00:	40020058 	.word	0x40020058
 8001a04:	40020070 	.word	0x40020070
 8001a08:	40020088 	.word	0x40020088
 8001a0c:	400200a0 	.word	0x400200a0
 8001a10:	400200b8 	.word	0x400200b8
 8001a14:	40020410 	.word	0x40020410
 8001a18:	40020428 	.word	0x40020428
 8001a1c:	40020440 	.word	0x40020440
 8001a20:	40020458 	.word	0x40020458
 8001a24:	40020470 	.word	0x40020470
 8001a28:	40020488 	.word	0x40020488
 8001a2c:	400204a0 	.word	0x400204a0
 8001a30:	400204b8 	.word	0x400204b8
 8001a34:	58025408 	.word	0x58025408
 8001a38:	5802541c 	.word	0x5802541c
 8001a3c:	58025430 	.word	0x58025430
 8001a40:	58025444 	.word	0x58025444
 8001a44:	58025458 	.word	0x58025458
 8001a48:	5802546c 	.word	0x5802546c
 8001a4c:	58025480 	.word	0x58025480
 8001a50:	58025494 	.word	0x58025494

08001a54 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0c6      	b.n	8001bf4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff f8be 	bl	8000bf0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2223      	movs	r2, #35	; 0x23
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	4b60      	ldr	r3, [pc, #384]	; (8001bfc <HAL_ETH_Init+0x1a8>)
 8001a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a80:	4a5e      	ldr	r2, [pc, #376]	; (8001bfc <HAL_ETH_Init+0x1a8>)
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a8a:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <HAL_ETH_Init+0x1a8>)
 8001a8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7a1b      	ldrb	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d103      	bne.n	8001aa8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff fc6f 	bl	8001384 <HAL_SYSCFG_ETHInterfaceSelect>
 8001aa6:	e003      	b.n	8001ab0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001aa8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001aac:	f7ff fc6a 	bl	8001384 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac8:	f7ff fc22 	bl	8001310 <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ace:	e00f      	b.n	8001af0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001ad0:	f7ff fc1e 	bl	8001310 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ade:	d907      	bls.n	8001af0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	22e0      	movs	r2, #224	; 0xe0
 8001aea:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e081      	b.n	8001bf4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1e6      	bne.n	8001ad0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fac0 	bl	8002088 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b08:	f001 fe4e 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b3c      	ldr	r3, [pc, #240]	; (8001c00 <HAL_ETH_Init+0x1ac>)
 8001b10:	fba3 2302 	umull	r2, r3, r3, r2
 8001b14:	0c9a      	lsrs	r2, r3, #18
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3a01      	subs	r2, #1
 8001b1c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fa13 	bl	8001f4c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b3c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001b40:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	22e0      	movs	r2, #224	; 0xe0
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e04a      	b.n	8001bf4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b66:	4413      	add	r3, r2
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <HAL_ETH_Init+0x1b0>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6952      	ldr	r2, [r2, #20]
 8001b72:	0052      	lsls	r2, r2, #1
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	6809      	ldr	r1, [r1, #0]
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b7e:	440b      	add	r3, r1
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fad8 	bl	8002138 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fb1c 	bl	80021c6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	3305      	adds	r3, #5
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	021a      	lsls	r2, r3, #8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	3303      	adds	r3, #3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	061a      	lsls	r2, r3, #24
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	3302      	adds	r3, #2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	041b      	lsls	r3, r3, #16
 8001bc0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bcc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bda:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bdc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2210      	movs	r2, #16
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2210      	movs	r2, #16
 8001bf0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	431bde83 	.word	0x431bde83
 8001c04:	ffff8001 	.word	0xffff8001

08001c08 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001c1a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	791b      	ldrb	r3, [r3, #4]
 8001c20:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001c22:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	7b1b      	ldrb	r3, [r3, #12]
 8001c28:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001c2a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	7b5b      	ldrb	r3, [r3, #13]
 8001c30:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c32:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	7b9b      	ldrb	r3, [r3, #14]
 8001c38:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c3a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	7bdb      	ldrb	r3, [r3, #15]
 8001c40:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c42:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	7c12      	ldrb	r2, [r2, #16]
 8001c48:	2a00      	cmp	r2, #0
 8001c4a:	d102      	bne.n	8001c52 <ETH_SetMACConfig+0x4a>
 8001c4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c50:	e000      	b.n	8001c54 <ETH_SetMACConfig+0x4c>
 8001c52:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c54:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	7c52      	ldrb	r2, [r2, #17]
 8001c5a:	2a00      	cmp	r2, #0
 8001c5c:	d102      	bne.n	8001c64 <ETH_SetMACConfig+0x5c>
 8001c5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c62:	e000      	b.n	8001c66 <ETH_SetMACConfig+0x5e>
 8001c64:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c66:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	7c9b      	ldrb	r3, [r3, #18]
 8001c6c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c6e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001c74:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001c7a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	7f1b      	ldrb	r3, [r3, #28]
 8001c80:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001c82:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	7f5b      	ldrb	r3, [r3, #29]
 8001c88:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001c8a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	7f92      	ldrb	r2, [r2, #30]
 8001c90:	2a00      	cmp	r2, #0
 8001c92:	d102      	bne.n	8001c9a <ETH_SetMACConfig+0x92>
 8001c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c98:	e000      	b.n	8001c9c <ETH_SetMACConfig+0x94>
 8001c9a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001c9c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	7fdb      	ldrb	r3, [r3, #31]
 8001ca2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001ca4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cac:	2a00      	cmp	r2, #0
 8001cae:	d102      	bne.n	8001cb6 <ETH_SetMACConfig+0xae>
 8001cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb4:	e000      	b.n	8001cb8 <ETH_SetMACConfig+0xb0>
 8001cb6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001cb8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001cbe:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cc6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001cc8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <ETH_SetMACConfig+0x22c>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	68f9      	ldr	r1, [r7, #12]
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cf2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001cf4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cfc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001cfe:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d06:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001d08:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	d102      	bne.n	8001d1a <ETH_SetMACConfig+0x112>
 8001d14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d18:	e000      	b.n	8001d1c <ETH_SetMACConfig+0x114>
 8001d1a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001d1c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4b42      	ldr	r3, [pc, #264]	; (8001e38 <ETH_SetMACConfig+0x230>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	430b      	orrs	r3, r1
 8001d38:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d40:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <ETH_SetMACConfig+0x234>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	68f9      	ldr	r1, [r7, #12]
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d64:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d6a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	d101      	bne.n	8001d7a <ETH_SetMACConfig+0x172>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	e000      	b.n	8001d7c <ETH_SetMACConfig+0x174>
 8001d7a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001d7c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d82:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d8e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001d92:	4013      	ands	r3, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001da4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001dac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dba:	f023 0103 	bic.w	r1, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001dd2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	d101      	bne.n	8001df6 <ETH_SetMACConfig+0x1ee>
 8001df2:	2240      	movs	r2, #64	; 0x40
 8001df4:	e000      	b.n	8001df8 <ETH_SetMACConfig+0x1f0>
 8001df6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001df8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001e00:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e02:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001e0a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e18:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	00048083 	.word	0x00048083
 8001e38:	c0f88000 	.word	0xc0f88000
 8001e3c:	fffffef0 	.word	0xfffffef0

08001e40 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <ETH_SetDMAConfig+0xf8>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	6809      	ldr	r1, [r1, #0]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001e66:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	791b      	ldrb	r3, [r3, #4]
 8001e6c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e72:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	7b1b      	ldrb	r3, [r3, #12]
 8001e78:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e86:	4413      	add	r3, r2
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <ETH_SetDMAConfig+0xfc>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6811      	ldr	r1, [r2, #0]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e9a:	440b      	add	r3, r1
 8001e9c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	7b5b      	ldrb	r3, [r3, #13]
 8001ea2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <ETH_SetDMAConfig+0x100>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6811      	ldr	r1, [r2, #0]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001ec6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	7d1b      	ldrb	r3, [r3, #20]
 8001ed0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ed2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	7f5b      	ldrb	r3, [r3, #29]
 8001ed8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ee6:	4413      	add	r3, r2
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <ETH_SetDMAConfig+0x104>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6811      	ldr	r1, [r2, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	f241 1304 	movw	r3, #4356	; 0x1104
 8001efa:	440b      	add	r3, r1
 8001efc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	7f1b      	ldrb	r3, [r3, #28]
 8001f02:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f14:	4413      	add	r3, r2
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <ETH_SetDMAConfig+0x108>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6811      	ldr	r1, [r2, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f28:	440b      	add	r3, r1
 8001f2a:	601a      	str	r2, [r3, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	ffff87fd 	.word	0xffff87fd
 8001f3c:	ffff2ffe 	.word	0xffff2ffe
 8001f40:	fffec000 	.word	0xfffec000
 8001f44:	ffc0efef 	.word	0xffc0efef
 8001f48:	7fc0ffff 	.word	0x7fc0ffff

08001f4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0a4      	sub	sp, #144	; 0x90
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001f70:	2301      	movs	r3, #1
 8001f72:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001f82:	2301      	movs	r3, #1
 8001f84:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f8c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001fa4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001fa8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001fea:	2301      	movs	r3, #1
 8001fec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001ff6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ffc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002000:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002008:	2302      	movs	r3, #2
 800200a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002020:	2301      	movs	r3, #1
 8002022:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002026:	2300      	movs	r3, #0
 8002028:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800202a:	2301      	movs	r3, #1
 800202c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fde6 	bl	8001c08 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800203c:	2301      	movs	r3, #1
 800203e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002040:	2301      	movs	r3, #1
 8002042:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002056:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800205a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002064:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800206c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fee1 	bl	8001e40 <ETH_SetDMAConfig>
}
 800207e:	bf00      	nop
 8002080:	3790      	adds	r7, #144	; 0x90
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002098:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020a2:	f001 fb81 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80020a6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4a1e      	ldr	r2, [pc, #120]	; (8002124 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d908      	bls.n	80020c2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d804      	bhi.n	80020c2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e027      	b.n	8002112 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4a18      	ldr	r2, [pc, #96]	; (8002128 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d908      	bls.n	80020dc <ETH_MAC_MDIO_ClkConfig+0x54>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d804      	bhi.n	80020dc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e01a      	b.n	8002112 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4a13      	ldr	r2, [pc, #76]	; (800212c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d903      	bls.n	80020ec <ETH_MAC_MDIO_ClkConfig+0x64>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d911      	bls.n	8002110 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4a10      	ldr	r2, [pc, #64]	; (8002130 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d908      	bls.n	8002106 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d804      	bhi.n	8002106 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e005      	b.n	8002112 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	e000      	b.n	8002112 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002110:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	01312cff 	.word	0x01312cff
 8002128:	02160ebf 	.word	0x02160ebf
 800212c:	039386ff 	.word	0x039386ff
 8002130:	05f5e0ff 	.word	0x05f5e0ff
 8002134:	08f0d17f 	.word	0x08f0d17f

08002138 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e01d      	b.n	8002182 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68d9      	ldr	r1, [r3, #12]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	3206      	adds	r2, #6
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3301      	adds	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d9de      	bls.n	8002146 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	f241 132c 	movw	r3, #4396	; 0x112c
 8002196:	4413      	add	r3, r2
 8002198:	2203      	movs	r2, #3
 800219a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68d9      	ldr	r1, [r3, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	f241 1314 	movw	r3, #4372	; 0x1114
 80021a8:	4413      	add	r3, r2
 80021aa:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80021b8:	601a      	str	r2, [r3, #0]
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	e024      	b.n	800221e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6919      	ldr	r1, [r3, #16]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2200      	movs	r2, #0
 80021f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2200      	movs	r2, #0
 8002208:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	330a      	adds	r3, #10
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3301      	adds	r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d9d7      	bls.n	80021d4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f241 1330 	movw	r3, #4400	; 0x1130
 800224a:	4413      	add	r3, r2
 800224c:	2203      	movs	r2, #3
 800224e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6919      	ldr	r1, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	f241 131c 	movw	r3, #4380	; 0x111c
 800225c:	4413      	add	r3, r2
 800225e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	f241 1328 	movw	r3, #4392	; 0x1128
 8002270:	4413      	add	r3, r2
 8002272:	6019      	str	r1, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800228e:	4b89      	ldr	r3, [pc, #548]	; (80024b4 <HAL_GPIO_Init+0x234>)
 8002290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002292:	e194      	b.n	80025be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8186 	beq.w	80025b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d00b      	beq.n	80022cc <HAL_GPIO_Init+0x4c>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d007      	beq.n	80022cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c0:	2b11      	cmp	r3, #17
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b12      	cmp	r3, #18
 80022ca:	d130      	bne.n	800232e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002302:	2201      	movs	r2, #1
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 0201 	and.w	r2, r3, #1
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2203      	movs	r2, #3
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0xee>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b12      	cmp	r3, #18
 800236c:	d123      	bne.n	80023b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	220f      	movs	r2, #15
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	08da      	lsrs	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3208      	adds	r2, #8
 80023b0:	69b9      	ldr	r1, [r7, #24]
 80023b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0203 	and.w	r2, r3, #3
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80e0 	beq.w	80025b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f8:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_GPIO_Init+0x238>)
 80023fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023fe:	4a2e      	ldr	r2, [pc, #184]	; (80024b8 <HAL_GPIO_Init+0x238>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_GPIO_Init+0x238>)
 800240a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002416:	4a29      	ldr	r2, [pc, #164]	; (80024bc <HAL_GPIO_Init+0x23c>)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	220f      	movs	r2, #15
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a20      	ldr	r2, [pc, #128]	; (80024c0 <HAL_GPIO_Init+0x240>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d052      	beq.n	80024e8 <HAL_GPIO_Init+0x268>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1f      	ldr	r2, [pc, #124]	; (80024c4 <HAL_GPIO_Init+0x244>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d031      	beq.n	80024ae <HAL_GPIO_Init+0x22e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a1e      	ldr	r2, [pc, #120]	; (80024c8 <HAL_GPIO_Init+0x248>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d02b      	beq.n	80024aa <HAL_GPIO_Init+0x22a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <HAL_GPIO_Init+0x24c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d025      	beq.n	80024a6 <HAL_GPIO_Init+0x226>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <HAL_GPIO_Init+0x250>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01f      	beq.n	80024a2 <HAL_GPIO_Init+0x222>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1b      	ldr	r2, [pc, #108]	; (80024d4 <HAL_GPIO_Init+0x254>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d019      	beq.n	800249e <HAL_GPIO_Init+0x21e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_GPIO_Init+0x258>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0x21a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a19      	ldr	r2, [pc, #100]	; (80024dc <HAL_GPIO_Init+0x25c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00d      	beq.n	8002496 <HAL_GPIO_Init+0x216>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <HAL_GPIO_Init+0x260>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <HAL_GPIO_Init+0x212>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <HAL_GPIO_Init+0x264>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_GPIO_Init+0x20e>
 800248a:	2309      	movs	r3, #9
 800248c:	e02d      	b.n	80024ea <HAL_GPIO_Init+0x26a>
 800248e:	230a      	movs	r3, #10
 8002490:	e02b      	b.n	80024ea <HAL_GPIO_Init+0x26a>
 8002492:	2308      	movs	r3, #8
 8002494:	e029      	b.n	80024ea <HAL_GPIO_Init+0x26a>
 8002496:	2307      	movs	r3, #7
 8002498:	e027      	b.n	80024ea <HAL_GPIO_Init+0x26a>
 800249a:	2306      	movs	r3, #6
 800249c:	e025      	b.n	80024ea <HAL_GPIO_Init+0x26a>
 800249e:	2305      	movs	r3, #5
 80024a0:	e023      	b.n	80024ea <HAL_GPIO_Init+0x26a>
 80024a2:	2304      	movs	r3, #4
 80024a4:	e021      	b.n	80024ea <HAL_GPIO_Init+0x26a>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e01f      	b.n	80024ea <HAL_GPIO_Init+0x26a>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e01d      	b.n	80024ea <HAL_GPIO_Init+0x26a>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e01b      	b.n	80024ea <HAL_GPIO_Init+0x26a>
 80024b2:	bf00      	nop
 80024b4:	58000080 	.word	0x58000080
 80024b8:	58024400 	.word	0x58024400
 80024bc:	58000400 	.word	0x58000400
 80024c0:	58020000 	.word	0x58020000
 80024c4:	58020400 	.word	0x58020400
 80024c8:	58020800 	.word	0x58020800
 80024cc:	58020c00 	.word	0x58020c00
 80024d0:	58021000 	.word	0x58021000
 80024d4:	58021400 	.word	0x58021400
 80024d8:	58021800 	.word	0x58021800
 80024dc:	58021c00 	.word	0x58021c00
 80024e0:	58022000 	.word	0x58022000
 80024e4:	58022400 	.word	0x58022400
 80024e8:	2300      	movs	r3, #0
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	f002 0203 	and.w	r2, r2, #3
 80024f0:	0092      	lsls	r2, r2, #2
 80024f2:	4093      	lsls	r3, r2
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024fa:	4938      	ldr	r1, [pc, #224]	; (80025dc <HAL_GPIO_Init+0x35c>)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	3302      	adds	r3, #2
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800255c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800258a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80025b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	3301      	adds	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f47f ae63 	bne.w	8002294 <HAL_GPIO_Init+0x14>
  }
}
 80025ce:	bf00      	nop
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	58000400 	.word	0x58000400

080025e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
 80025ec:	4613      	mov	r3, r2
 80025ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025f0:	787b      	ldrb	r3, [r7, #1]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025fc:	e003      	b.n	8002606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	041a      	lsls	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	619a      	str	r2, [r3, #24]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002614:	b08f      	sub	sp, #60	; 0x3c
 8002616:	af0a      	add	r7, sp, #40	; 0x28
 8002618:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e116      	b.n	8002852 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fbf6 	bl	8000e30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2203      	movs	r2, #3
 8002648:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f003 ff82 	bl	800656c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	687e      	ldr	r6, [r7, #4]
 8002670:	466d      	mov	r5, sp
 8002672:	f106 0410 	add.w	r4, r6, #16
 8002676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800267a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800267e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002682:	e885 0003 	stmia.w	r5, {r0, r1}
 8002686:	1d33      	adds	r3, r6, #4
 8002688:	cb0e      	ldmia	r3, {r1, r2, r3}
 800268a:	6838      	ldr	r0, [r7, #0]
 800268c:	f003 ff0c 	bl	80064a8 <USB_CoreInit>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0d7      	b.n	8002852 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 ff70 	bl	800658e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	e04a      	b.n	800274a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	333d      	adds	r3, #61	; 0x3d
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	333c      	adds	r3, #60	; 0x3c
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	b298      	uxth	r0, r3
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	3342      	adds	r3, #66	; 0x42
 80026f0:	4602      	mov	r2, r0
 80026f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	333f      	adds	r3, #63	; 0x3f
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	3344      	adds	r3, #68	; 0x44
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	3348      	adds	r3, #72	; 0x48
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	3350      	adds	r3, #80	; 0x50
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	3301      	adds	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	d3af      	bcc.n	80026b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	e044      	b.n	80027e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	3301      	adds	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d3b5      	bcc.n	800275a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	687e      	ldr	r6, [r7, #4]
 80027f6:	466d      	mov	r5, sp
 80027f8:	f106 0410 	add.w	r4, r6, #16
 80027fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002804:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002808:	e885 0003 	stmia.w	r5, {r0, r1}
 800280c:	1d33      	adds	r3, r6, #4
 800280e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002810:	6838      	ldr	r0, [r7, #0]
 8002812:	f003 fee7 	bl	80065e4 <USB_DevInit>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e014      	b.n	8002852 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2b01      	cmp	r3, #1
 800283e:	d102      	bne.n	8002846 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f80b 	bl	800285c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f004 f889 	bl	8006962 <USB_DevDisconnect>

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800285c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800288c:	4313      	orrs	r3, r2
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	10000003 	.word	0x10000003

080028a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_PWREx_ConfigSupply+0x70>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d00a      	beq.n	80028ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_PWREx_ConfigSupply+0x70>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d001      	beq.n	80028ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e01f      	b.n	800290a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e01d      	b.n	800290a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_PWREx_ConfigSupply+0x70>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f023 0207 	bic.w	r2, r3, #7
 80028d6:	490f      	ldr	r1, [pc, #60]	; (8002914 <HAL_PWREx_ConfigSupply+0x70>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028de:	f7fe fd17 	bl	8001310 <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028e4:	e009      	b.n	80028fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028e6:	f7fe fd13 	bl	8001310 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f4:	d901      	bls.n	80028fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e007      	b.n	800290a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_PWREx_ConfigSupply+0x70>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002906:	d1ee      	bne.n	80028e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	58024800 	.word	0x58024800

08002918 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002926:	60d3      	str	r3, [r2, #12]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	58024800 	.word	0x58024800

08002938 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e3ff      	b.n	800314a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8087 	beq.w	8002a66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002958:	4b99      	ldr	r3, [pc, #612]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002962:	4b97      	ldr	r3, [pc, #604]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296a:	2b10      	cmp	r3, #16
 800296c:	d007      	beq.n	800297e <HAL_RCC_OscConfig+0x46>
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	2b18      	cmp	r3, #24
 8002972:	d110      	bne.n	8002996 <HAL_RCC_OscConfig+0x5e>
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d10b      	bne.n	8002996 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297e:	4b90      	ldr	r3, [pc, #576]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d06c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x12c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d168      	bne.n	8002a64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e3d9      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x76>
 80029a0:	4b87      	ldr	r3, [pc, #540]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a86      	ldr	r2, [pc, #536]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e02e      	b.n	8002a0c <HAL_RCC_OscConfig+0xd4>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x98>
 80029b6:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a81      	ldr	r2, [pc, #516]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b7f      	ldr	r3, [pc, #508]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7e      	ldr	r2, [pc, #504]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01d      	b.n	8002a0c <HAL_RCC_OscConfig+0xd4>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0xbc>
 80029da:	4b79      	ldr	r3, [pc, #484]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a78      	ldr	r2, [pc, #480]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a75      	ldr	r2, [pc, #468]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0xd4>
 80029f4:	4b72      	ldr	r3, [pc, #456]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a71      	ldr	r2, [pc, #452]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b6f      	ldr	r3, [pc, #444]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6e      	ldr	r2, [pc, #440]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fc7c 	bl	8001310 <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fc78 	bl	8001310 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e38d      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a2e:	4b64      	ldr	r3, [pc, #400]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0xe4>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fc68 	bl	8001310 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fc64 	bl	8001310 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e379      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a56:	4b5a      	ldr	r3, [pc, #360]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x10c>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80ae 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a74:	4b52      	ldr	r3, [pc, #328]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a7e:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <HAL_RCC_OscConfig+0x162>
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	2b18      	cmp	r3, #24
 8002a8e:	d13a      	bne.n	8002b06 <HAL_RCC_OscConfig+0x1ce>
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d135      	bne.n	8002b06 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a9a:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x17a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e34b      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	f7fe fc5b 	bl	800136c <HAL_GetREVID>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	f241 0303 	movw	r3, #4099	; 0x1003
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d817      	bhi.n	8002af0 <HAL_RCC_OscConfig+0x1b8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d108      	bne.n	8002ada <HAL_RCC_OscConfig+0x1a2>
 8002ac8:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ad0:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad8:	e07a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	031b      	lsls	r3, r3, #12
 8002ae8:	4935      	ldr	r1, [pc, #212]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aee:	e06f      	b.n	8002bd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	4930      	ldr	r1, [pc, #192]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b04:	e064      	b.n	8002bd0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d045      	beq.n	8002b9a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 0219 	bic.w	r2, r3, #25
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	4929      	ldr	r1, [pc, #164]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe fbf6 	bl	8001310 <HAL_GetTick>
 8002b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b28:	f7fe fbf2 	bl	8001310 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e307      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b46:	f7fe fc11 	bl	800136c <HAL_GetREVID>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d817      	bhi.n	8002b84 <HAL_RCC_OscConfig+0x24c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b40      	cmp	r3, #64	; 0x40
 8002b5a:	d108      	bne.n	8002b6e <HAL_RCC_OscConfig+0x236>
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b64:	4a16      	ldr	r2, [pc, #88]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6a:	6053      	str	r3, [r2, #4]
 8002b6c:	e030      	b.n	8002bd0 <HAL_RCC_OscConfig+0x298>
 8002b6e:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	031b      	lsls	r3, r3, #12
 8002b7c:	4910      	ldr	r1, [pc, #64]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
 8002b82:	e025      	b.n	8002bd0 <HAL_RCC_OscConfig+0x298>
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	061b      	lsls	r3, r3, #24
 8002b92:	490b      	ldr	r1, [pc, #44]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
 8002b98:	e01a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a08      	ldr	r2, [pc, #32]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fbb3 	bl	8001310 <HAL_GetTick>
 8002baa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bae:	f7fe fbaf 	bl	8001310 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d903      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e2c4      	b.n	800314a <HAL_RCC_OscConfig+0x812>
 8002bc0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bc4:	4ba4      	ldr	r3, [pc, #656]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ee      	bne.n	8002bae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80a9 	beq.w	8002d30 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bde:	4b9e      	ldr	r3, [pc, #632]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002be6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002be8:	4b9b      	ldr	r3, [pc, #620]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d007      	beq.n	8002c04 <HAL_RCC_OscConfig+0x2cc>
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b18      	cmp	r3, #24
 8002bf8:	d13a      	bne.n	8002c70 <HAL_RCC_OscConfig+0x338>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d135      	bne.n	8002c70 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c04:	4b94      	ldr	r3, [pc, #592]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x2e4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	2b80      	cmp	r3, #128	; 0x80
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e296      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c1c:	f7fe fba6 	bl	800136c <HAL_GetREVID>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d817      	bhi.n	8002c5a <HAL_RCC_OscConfig+0x322>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0x30c>
 8002c32:	4b89      	ldr	r3, [pc, #548]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c3a:	4a87      	ldr	r2, [pc, #540]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c42:	e075      	b.n	8002d30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c44:	4b84      	ldr	r3, [pc, #528]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	069b      	lsls	r3, r3, #26
 8002c52:	4981      	ldr	r1, [pc, #516]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c58:	e06a      	b.n	8002d30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c5a:	4b7f      	ldr	r3, [pc, #508]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	061b      	lsls	r3, r3, #24
 8002c68:	497b      	ldr	r1, [pc, #492]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c6e:	e05f      	b.n	8002d30 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d042      	beq.n	8002cfe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c78:	4b77      	ldr	r3, [pc, #476]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a76      	ldr	r2, [pc, #472]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe fb44 	bl	8001310 <HAL_GetTick>
 8002c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fb40 	bl	8001310 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e255      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c9e:	4b6e      	ldr	r3, [pc, #440]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002caa:	f7fe fb5f 	bl	800136c <HAL_GetREVID>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	f241 0303 	movw	r3, #4099	; 0x1003
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d817      	bhi.n	8002ce8 <HAL_RCC_OscConfig+0x3b0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d108      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x39a>
 8002cc0:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cc8:	4a63      	ldr	r2, [pc, #396]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002cca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cce:	6053      	str	r3, [r2, #4]
 8002cd0:	e02e      	b.n	8002d30 <HAL_RCC_OscConfig+0x3f8>
 8002cd2:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	069b      	lsls	r3, r3, #26
 8002ce0:	495d      	ldr	r1, [pc, #372]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
 8002ce6:	e023      	b.n	8002d30 <HAL_RCC_OscConfig+0x3f8>
 8002ce8:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	4958      	ldr	r1, [pc, #352]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60cb      	str	r3, [r1, #12]
 8002cfc:	e018      	b.n	8002d30 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cfe:	4b56      	ldr	r3, [pc, #344]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a55      	ldr	r2, [pc, #340]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fb01 	bl	8001310 <HAL_GetTick>
 8002d0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d12:	f7fe fafd 	bl	8001310 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e212      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d24:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f0      	bne.n	8002d12 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d036      	beq.n	8002daa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d019      	beq.n	8002d78 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d44:	4b44      	ldr	r3, [pc, #272]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d48:	4a43      	ldr	r2, [pc, #268]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7fe fade 	bl	8001310 <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d58:	f7fe fada 	bl	8001310 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1ef      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d6a:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x420>
 8002d76:	e018      	b.n	8002daa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7c:	4a36      	ldr	r2, [pc, #216]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe fac4 	bl	8001310 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe fac0 	bl	8001310 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1d5      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d036      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d019      	beq.n	8002df2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a25      	ldr	r2, [pc, #148]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002dc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dca:	f7fe faa1 	bl	8001310 <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dd2:	f7fe fa9d 	bl	8001310 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1b2      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002de4:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x49a>
 8002df0:	e018      	b.n	8002e24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fa87 	bl	8001310 <HAL_GetTick>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e06:	f7fe fa83 	bl	8001310 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e198      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f0      	bne.n	8002e06 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8085 	beq.w	8002f3c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_RCC_OscConfig+0x524>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_OscConfig+0x524>)
 8002e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e3e:	f7fe fa67 	bl	8001310 <HAL_GetTick>
 8002e42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e44:	e00c      	b.n	8002e60 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e46:	f7fe fa63 	bl	8001310 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b64      	cmp	r3, #100	; 0x64
 8002e52:	d905      	bls.n	8002e60 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e178      	b.n	800314a <HAL_RCC_OscConfig+0x812>
 8002e58:	58024400 	.word	0x58024400
 8002e5c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e60:	4b96      	ldr	r3, [pc, #600]	; (80030bc <HAL_RCC_OscConfig+0x784>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ec      	beq.n	8002e46 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d106      	bne.n	8002e82 <HAL_RCC_OscConfig+0x54a>
 8002e74:	4b92      	ldr	r3, [pc, #584]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a91      	ldr	r2, [pc, #580]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e80:	e02d      	b.n	8002ede <HAL_RCC_OscConfig+0x5a6>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x56c>
 8002e8a:	4b8d      	ldr	r3, [pc, #564]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a8c      	ldr	r2, [pc, #560]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
 8002e96:	4b8a      	ldr	r3, [pc, #552]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	4a89      	ldr	r2, [pc, #548]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002e9c:	f023 0304 	bic.w	r3, r3, #4
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea2:	e01c      	b.n	8002ede <HAL_RCC_OscConfig+0x5a6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x58e>
 8002eac:	4b84      	ldr	r3, [pc, #528]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4a83      	ldr	r2, [pc, #524]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb8:	4b81      	ldr	r3, [pc, #516]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a80      	ldr	r2, [pc, #512]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	e00b      	b.n	8002ede <HAL_RCC_OscConfig+0x5a6>
 8002ec6:	4b7e      	ldr	r3, [pc, #504]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a7d      	ldr	r2, [pc, #500]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	4b7b      	ldr	r3, [pc, #492]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a7a      	ldr	r2, [pc, #488]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d015      	beq.n	8002f12 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fa13 	bl	8001310 <HAL_GetTick>
 8002eea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe fa0f 	bl	8001310 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e122      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f04:	4b6e      	ldr	r3, [pc, #440]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ee      	beq.n	8002eee <HAL_RCC_OscConfig+0x5b6>
 8002f10:	e014      	b.n	8002f3c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7fe f9fd 	bl	8001310 <HAL_GetTick>
 8002f16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe f9f9 	bl	8001310 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e10c      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f30:	4b63      	ldr	r3, [pc, #396]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ee      	bne.n	8002f1a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8101 	beq.w	8003148 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f46:	4b5e      	ldr	r3, [pc, #376]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f4e:	2b18      	cmp	r3, #24
 8002f50:	f000 80bc 	beq.w	80030cc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	f040 8095 	bne.w	8003088 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5e:	4b58      	ldr	r3, [pc, #352]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a57      	ldr	r2, [pc, #348]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fe f9d1 	bl	8001310 <HAL_GetTick>
 8002f6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe f9cd 	bl	8001310 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e0e2      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f84:	4b4e      	ldr	r3, [pc, #312]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f90:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f94:	4b4b      	ldr	r3, [pc, #300]	; (80030c4 <HAL_RCC_OscConfig+0x78c>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	4946      	ldr	r1, [pc, #280]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	628b      	str	r3, [r1, #40]	; 0x28
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	025b      	lsls	r3, r3, #9
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	041b      	lsls	r3, r3, #16
 8002fc8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fda:	4939      	ldr	r1, [pc, #228]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fe0:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	4a36      	ldr	r2, [pc, #216]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fec:	4b34      	ldr	r3, [pc, #208]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff0:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <HAL_RCC_OscConfig+0x790>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ff8:	00d2      	lsls	r2, r2, #3
 8002ffa:	4931      	ldr	r1, [pc, #196]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003000:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	f023 020c 	bic.w	r2, r3, #12
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	492c      	ldr	r1, [pc, #176]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800300e:	4313      	orrs	r3, r2
 8003010:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003012:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	f023 0202 	bic.w	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4928      	ldr	r1, [pc, #160]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003020:	4313      	orrs	r3, r2
 8003022:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003024:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	4a25      	ldr	r2, [pc, #148]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003030:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800303c:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	4a1f      	ldr	r2, [pc, #124]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003042:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe f956 	bl	8001310 <HAL_GetTick>
 8003064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe f952 	bl	8001310 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e067      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x730>
 8003086:	e05f      	b.n	8003148 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003088:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0c      	ldr	r2, [pc, #48]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800308e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe f93c 	bl	8001310 <HAL_GetTick>
 8003098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe f938 	bl	8001310 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e04d      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ae:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x764>
 80030ba:	e045      	b.n	8003148 <HAL_RCC_OscConfig+0x810>
 80030bc:	58024800 	.word	0x58024800
 80030c0:	58024400 	.word	0x58024400
 80030c4:	fffffc0c 	.word	0xfffffc0c
 80030c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_RCC_OscConfig+0x81c>)
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_RCC_OscConfig+0x81c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d031      	beq.n	8003144 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f003 0203 	and.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d12a      	bne.n	8003144 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d122      	bne.n	8003144 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d11a      	bne.n	8003144 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	0a5b      	lsrs	r3, r3, #9
 8003112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d111      	bne.n	8003144 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	0c1b      	lsrs	r3, r3, #16
 8003124:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d108      	bne.n	8003144 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	0e1b      	lsrs	r3, r3, #24
 8003136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3730      	adds	r7, #48	; 0x30
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	58024400 	.word	0x58024400

08003158 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e19c      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b8a      	ldr	r3, [pc, #552]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d910      	bls.n	800319c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b87      	ldr	r3, [pc, #540]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 020f 	bic.w	r2, r3, #15
 8003182:	4985      	ldr	r1, [pc, #532]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b83      	ldr	r3, [pc, #524]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e184      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	4b7b      	ldr	r3, [pc, #492]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d908      	bls.n	80031ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031b8:	4b78      	ldr	r3, [pc, #480]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	4975      	ldr	r1, [pc, #468]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	4b70      	ldr	r3, [pc, #448]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d908      	bls.n	80031f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031e6:	4b6d      	ldr	r3, [pc, #436]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	496a      	ldr	r1, [pc, #424]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	4b64      	ldr	r3, [pc, #400]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003210:	429a      	cmp	r2, r3
 8003212:	d908      	bls.n	8003226 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003214:	4b61      	ldr	r3, [pc, #388]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	495e      	ldr	r1, [pc, #376]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003222:	4313      	orrs	r3, r2
 8003224:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800323e:	429a      	cmp	r2, r3
 8003240:	d908      	bls.n	8003254 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003242:	4b56      	ldr	r3, [pc, #344]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4953      	ldr	r1, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003250:	4313      	orrs	r3, r2
 8003252:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	4b4d      	ldr	r3, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	429a      	cmp	r2, r3
 800326e:	d908      	bls.n	8003282 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b4a      	ldr	r3, [pc, #296]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f023 020f 	bic.w	r2, r3, #15
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4947      	ldr	r1, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 800327e:	4313      	orrs	r3, r2
 8003280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d055      	beq.n	800333a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800328e:	4b43      	ldr	r3, [pc, #268]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	4940      	ldr	r1, [pc, #256]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 800329c:	4313      	orrs	r3, r2
 800329e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032a8:	4b3c      	ldr	r3, [pc, #240]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d121      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0f6      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032c0:	4b36      	ldr	r3, [pc, #216]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d115      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0ea      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032d8:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d109      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0de      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032e8:	4b2c      	ldr	r3, [pc, #176]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0d6      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f8:	4b28      	ldr	r3, [pc, #160]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f023 0207 	bic.w	r2, r3, #7
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4925      	ldr	r1, [pc, #148]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003306:	4313      	orrs	r3, r2
 8003308:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330a:	f7fe f801 	bl	8001310 <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003310:	e00a      	b.n	8003328 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003312:	f7fd fffd 	bl	8001310 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0be      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003328:	4b1c      	ldr	r3, [pc, #112]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	429a      	cmp	r2, r3
 8003338:	d1eb      	bne.n	8003312 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	429a      	cmp	r2, r3
 8003354:	d208      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f023 020f 	bic.w	r2, r3, #15
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003364:	4313      	orrs	r3, r2
 8003366:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d214      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	4906      	ldr	r1, [pc, #24]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e086      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
 8003398:	52002000 	.word	0x52002000
 800339c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d010      	beq.n	80033ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	4b3f      	ldr	r3, [pc, #252]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d208      	bcs.n	80033ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033bc:	4b3c      	ldr	r3, [pc, #240]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	4939      	ldr	r1, [pc, #228]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d010      	beq.n	80033fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d208      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033ea:	4b31      	ldr	r3, [pc, #196]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	492e      	ldr	r1, [pc, #184]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	d010      	beq.n	800342a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699a      	ldr	r2, [r3, #24]
 800340c:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003414:	429a      	cmp	r2, r3
 8003416:	d208      	bcs.n	800342a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003418:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4922      	ldr	r1, [pc, #136]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003426:	4313      	orrs	r3, r2
 8003428:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d010      	beq.n	8003458 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003442:	429a      	cmp	r2, r3
 8003444:	d208      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003446:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4917      	ldr	r1, [pc, #92]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003454:	4313      	orrs	r3, r2
 8003456:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003458:	f000 f834 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 800345c:	4601      	mov	r1, r0
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <HAL_RCC_ClockConfig+0x35c>)
 800346a:	5cd3      	ldrb	r3, [r2, r3]
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa21 f303 	lsr.w	r3, r1, r3
 8003474:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <HAL_RCC_ClockConfig+0x35c>)
 8003480:	5cd3      	ldrb	r3, [r2, r3]
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
 800348c:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_RCC_ClockConfig+0x360>)
 800348e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003490:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <HAL_RCC_ClockConfig+0x364>)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <HAL_RCC_ClockConfig+0x368>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd feee 	bl	800127c <HAL_InitTick>
 80034a0:	4603      	mov	r3, r0
 80034a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	58024400 	.word	0x58024400
 80034b4:	08007858 	.word	0x08007858
 80034b8:	24000004 	.word	0x24000004
 80034bc:	24000000 	.word	0x24000000
 80034c0:	24000008 	.word	0x24000008

080034c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ca:	4baf      	ldr	r3, [pc, #700]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034d2:	2b18      	cmp	r3, #24
 80034d4:	f200 814e 	bhi.w	8003774 <HAL_RCC_GetSysClockFreq+0x2b0>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	08003545 	.word	0x08003545
 80034e4:	08003775 	.word	0x08003775
 80034e8:	08003775 	.word	0x08003775
 80034ec:	08003775 	.word	0x08003775
 80034f0:	08003775 	.word	0x08003775
 80034f4:	08003775 	.word	0x08003775
 80034f8:	08003775 	.word	0x08003775
 80034fc:	08003775 	.word	0x08003775
 8003500:	0800356b 	.word	0x0800356b
 8003504:	08003775 	.word	0x08003775
 8003508:	08003775 	.word	0x08003775
 800350c:	08003775 	.word	0x08003775
 8003510:	08003775 	.word	0x08003775
 8003514:	08003775 	.word	0x08003775
 8003518:	08003775 	.word	0x08003775
 800351c:	08003775 	.word	0x08003775
 8003520:	08003571 	.word	0x08003571
 8003524:	08003775 	.word	0x08003775
 8003528:	08003775 	.word	0x08003775
 800352c:	08003775 	.word	0x08003775
 8003530:	08003775 	.word	0x08003775
 8003534:	08003775 	.word	0x08003775
 8003538:	08003775 	.word	0x08003775
 800353c:	08003775 	.word	0x08003775
 8003540:	08003577 	.word	0x08003577
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003544:	4b90      	ldr	r3, [pc, #576]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003550:	4b8d      	ldr	r3, [pc, #564]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	08db      	lsrs	r3, r3, #3
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	4a8c      	ldr	r2, [pc, #560]	; (800378c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
 8003560:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003562:	e10a      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003564:	4b89      	ldr	r3, [pc, #548]	; (800378c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003566:	61bb      	str	r3, [r7, #24]
    break;
 8003568:	e107      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800356a:	4b89      	ldr	r3, [pc, #548]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800356c:	61bb      	str	r3, [r7, #24]
    break;
 800356e:	e104      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003570:	4b88      	ldr	r3, [pc, #544]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003572:	61bb      	str	r3, [r7, #24]
    break;
 8003574:	e101      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003576:	4b84      	ldr	r3, [pc, #528]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003580:	4b81      	ldr	r3, [pc, #516]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800358a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800358c:	4b7e      	ldr	r3, [pc, #504]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003596:	4b7c      	ldr	r3, [pc, #496]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	08db      	lsrs	r3, r3, #3
 800359c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80da 	beq.w	800376e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d05a      	beq.n	8003676 <HAL_RCC_GetSysClockFreq+0x1b2>
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d302      	bcc.n	80035ca <HAL_RCC_GetSysClockFreq+0x106>
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d078      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x1f6>
 80035c8:	e099      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035ca:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d02d      	beq.n	8003632 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035d6:	4b6c      	ldr	r3, [pc, #432]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	08db      	lsrs	r3, r3, #3
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	4a6a      	ldr	r2, [pc, #424]	; (800378c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003600:	4b61      	ldr	r3, [pc, #388]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003608:	ee07 3a90 	vmov	s15, r3
 800360c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003610:	ed97 6a02 	vldr	s12, [r7, #8]
 8003614:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800361c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003630:	e087      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800379c <HAL_RCC_GetSysClockFreq+0x2d8>
 8003640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364c:	ee07 3a90 	vmov	s15, r3
 8003650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003654:	ed97 6a02 	vldr	s12, [r7, #8]
 8003658:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2d4>
 800365c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003674:	e065      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	ee07 3a90 	vmov	s15, r3
 800367c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003680:	eddf 6a47 	vldr	s13, [pc, #284]	; 80037a0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003688:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003690:	ee07 3a90 	vmov	s15, r3
 8003694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003698:	ed97 6a02 	vldr	s12, [r7, #8]
 800369c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2d4>
 80036a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036b8:	e043      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	ee07 3a90 	vmov	s15, r3
 80036c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80037a4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80036c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036cc:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80036e0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2d4>
 80036e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036fc:	e021      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003708:	eddf 6a25 	vldr	s13, [pc, #148]	; 80037a0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800370c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003720:	ed97 6a02 	vldr	s12, [r7, #8]
 8003724:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003730:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003740:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	0a5b      	lsrs	r3, r3, #9
 8003748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800374c:	3301      	adds	r3, #1
 800374e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800375a:	edd7 6a07 	vldr	s13, [r7, #28]
 800375e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003766:	ee17 3a90 	vmov	r3, s15
 800376a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800376c:	e005      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	61bb      	str	r3, [r7, #24]
    break;
 8003772:	e002      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003776:	61bb      	str	r3, [r7, #24]
    break;
 8003778:	bf00      	nop
  }

  return sysclockfreq;
 800377a:	69bb      	ldr	r3, [r7, #24]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3724      	adds	r7, #36	; 0x24
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	58024400 	.word	0x58024400
 800378c:	03d09000 	.word	0x03d09000
 8003790:	003d0900 	.word	0x003d0900
 8003794:	007a1200 	.word	0x007a1200
 8003798:	46000000 	.word	0x46000000
 800379c:	4c742400 	.word	0x4c742400
 80037a0:	4a742400 	.word	0x4a742400
 80037a4:	4af42400 	.word	0x4af42400

080037a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037ae:	f7ff fe89 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 80037b2:	4601      	mov	r1, r0
 80037b4:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	0a1b      	lsrs	r3, r3, #8
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <HAL_RCC_GetHCLKFreq+0x54>)
 80037c0:	5cd3      	ldrb	r3, [r2, r3]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	fa21 f303 	lsr.w	r3, r1, r3
 80037ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_RCC_GetHCLKFreq+0x54>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	4a07      	ldr	r2, [pc, #28]	; (8003800 <HAL_RCC_GetHCLKFreq+0x58>)
 80037e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037e6:	4a07      	ldr	r2, [pc, #28]	; (8003804 <HAL_RCC_GetHCLKFreq+0x5c>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <HAL_RCC_GetHCLKFreq+0x58>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	58024400 	.word	0x58024400
 80037fc:	08007858 	.word	0x08007858
 8003800:	24000004 	.word	0x24000004
 8003804:	24000000 	.word	0x24000000

08003808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800380c:	f7ff ffcc 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 8003810:	4601      	mov	r1, r0
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4a04      	ldr	r2, [pc, #16]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800381e:	5cd3      	ldrb	r3, [r2, r3]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	58024400 	.word	0x58024400
 8003830:	08007858 	.word	0x08007858

08003834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003838:	f7ff ffb6 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 800383c:	4601      	mov	r1, r0
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4a04      	ldr	r2, [pc, #16]	; (800385c <HAL_RCC_GetPCLK2Freq+0x28>)
 800384a:	5cd3      	ldrb	r3, [r2, r3]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	58024400 	.word	0x58024400
 800385c:	08007858 	.word	0x08007858

08003860 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003868:	2300      	movs	r3, #0
 800386a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800386c:	2300      	movs	r3, #0
 800386e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d03d      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003884:	d013      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800388a:	d802      	bhi.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003890:	e01f      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003896:	d013      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003898:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800389c:	d01c      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800389e:	e018      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a0:	4baf      	ldr	r3, [pc, #700]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	4aae      	ldr	r2, [pc, #696]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038ac:	e015      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2102      	movs	r1, #2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f001 f96f 	bl	8004b98 <RCCEx_PLL2_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038be:	e00c      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3324      	adds	r3, #36	; 0x24
 80038c4:	2102      	movs	r1, #2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 fa18 	bl	8004cfc <RCCEx_PLL3_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038d0:	e003      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
      break;
 80038d6:	e000      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80038d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038e0:	4b9f      	ldr	r3, [pc, #636]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ec:	499c      	ldr	r1, [pc, #624]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	650b      	str	r3, [r1, #80]	; 0x50
 80038f2:	e001      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
 80038f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d03d      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	2b04      	cmp	r3, #4
 800390a:	d826      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	08003929 	.word	0x08003929
 8003918:	08003937 	.word	0x08003937
 800391c:	08003949 	.word	0x08003949
 8003920:	08003961 	.word	0x08003961
 8003924:	08003961 	.word	0x08003961
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003928:	4b8d      	ldr	r3, [pc, #564]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	4a8c      	ldr	r2, [pc, #560]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800392e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003934:	e015      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f001 f92b 	bl	8004b98 <RCCEx_PLL2_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003946:	e00c      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3324      	adds	r3, #36	; 0x24
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f001 f9d4 	bl	8004cfc <RCCEx_PLL3_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003958:	e003      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
      break;
 800395e:	e000      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003962:	7dfb      	ldrb	r3, [r7, #23]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d109      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003968:	4b7d      	ldr	r3, [pc, #500]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	f023 0207 	bic.w	r2, r3, #7
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	497a      	ldr	r1, [pc, #488]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003976:	4313      	orrs	r3, r2
 8003978:	650b      	str	r3, [r1, #80]	; 0x50
 800397a:	e001      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003988:	2b00      	cmp	r3, #0
 800398a:	d03e      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d01c      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003994:	2b80      	cmp	r3, #128	; 0x80
 8003996:	d804      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d00d      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80039a0:	e01e      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80039a2:	2bc0      	cmp	r3, #192	; 0xc0
 80039a4:	d01f      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80039a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039aa:	d01e      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80039ac:	e018      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ae:	4b6c      	ldr	r3, [pc, #432]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	4a6b      	ldr	r2, [pc, #428]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039ba:	e017      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 f8e8 	bl	8004b98 <RCCEx_PLL2_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039cc:	e00e      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3324      	adds	r3, #36	; 0x24
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 f991 	bl	8004cfc <RCCEx_PLL3_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039de:	e005      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
      break;
 80039e4:	e002      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80039ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039f2:	4b5b      	ldr	r3, [pc, #364]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	4958      	ldr	r1, [pc, #352]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	650b      	str	r3, [r1, #80]	; 0x50
 8003a04:	e001      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d044      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a20:	d01f      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a26:	d805      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a30:	d00e      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003a32:	e01f      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003a34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a38:	d01f      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003a3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a3e:	d01e      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003a40:	e018      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a42:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	4a46      	ldr	r2, [pc, #280]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a4e:	e017      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3304      	adds	r3, #4
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 f89e 	bl	8004b98 <RCCEx_PLL2_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a60:	e00e      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3324      	adds	r3, #36	; 0x24
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f001 f947 	bl	8004cfc <RCCEx_PLL3_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a72:	e005      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	75fb      	strb	r3, [r7, #23]
      break;
 8003a78:	e002      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a86:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a94:	4932      	ldr	r1, [pc, #200]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	658b      	str	r3, [r1, #88]	; 0x58
 8003a9a:	e001      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d044      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ab6:	d01f      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003abc:	d805      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003ac2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003ac8:	e01f      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003aca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ace:	d01f      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ad4:	d01e      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003ad6:	e018      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	4b21      	ldr	r3, [pc, #132]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ae4:	e017      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 f853 	bl	8004b98 <RCCEx_PLL2_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003af6:	e00e      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3324      	adds	r3, #36	; 0x24
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 f8fc 	bl	8004cfc <RCCEx_PLL3_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b08:	e005      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0e:	e002      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003b10:	bf00      	nop
 8003b12:	e000      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b1c:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b20:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b2a:	490d      	ldr	r1, [pc, #52]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	658b      	str	r3, [r1, #88]	; 0x58
 8003b30:	e001      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d035      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d00c      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d802      	bhi.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01b      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003b52:	e017      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d00c      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003b58:	2b30      	cmp	r3, #48	; 0x30
 8003b5a:	d018      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003b5c:	e012      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003b5e:	bf00      	nop
 8003b60:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b64:	4baf      	ldr	r3, [pc, #700]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	4aae      	ldr	r2, [pc, #696]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b70:	e00e      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3304      	adds	r3, #4
 8003b76:	2102      	movs	r1, #2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 f80d 	bl	8004b98 <RCCEx_PLL2_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b82:	e005      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
      break;
 8003b88:	e002      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e000      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b96:	4ba3      	ldr	r3, [pc, #652]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	49a0      	ldr	r1, [pc, #640]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ba8:	e001      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d042      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc2:	d01f      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc8:	d805      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003bd4:	e01f      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003bd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bda:	d01f      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be0:	d01e      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003be2:	e018      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be4:	4b8f      	ldr	r3, [pc, #572]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	4a8e      	ldr	r2, [pc, #568]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bf0:	e017      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 ffcd 	bl	8004b98 <RCCEx_PLL2_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c02:	e00e      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3324      	adds	r3, #36	; 0x24
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 f876 	bl	8004cfc <RCCEx_PLL3_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c14:	e005      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1a:	e002      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003c1c:	bf00      	nop
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d109      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c28:	4b7e      	ldr	r3, [pc, #504]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	497b      	ldr	r1, [pc, #492]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	650b      	str	r3, [r1, #80]	; 0x50
 8003c3a:	e001      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d042      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c54:	d01b      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003c56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c5a:	d805      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d022      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003c66:	e01b      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003c68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c6c:	d01d      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c72:	d01c      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003c74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c78:	d01b      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003c7a:	e011      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 ff88 	bl	8004b98 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c8c:	e012      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3324      	adds	r3, #36	; 0x24
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 f831 	bl	8004cfc <RCCEx_PLL3_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c9e:	e009      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca4:	e006      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e004      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003caa:	bf00      	nop
 8003cac:	e002      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e000      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cba:	4b5a      	ldr	r3, [pc, #360]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	4957      	ldr	r1, [pc, #348]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	650b      	str	r3, [r1, #80]	; 0x50
 8003ccc:	e001      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d044      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce8:	d01b      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cee:	d805      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d022      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003cf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003cfa:	e01b      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d00:	d01d      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d06:	d01c      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d0c:	d01b      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003d0e:	e011      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	2101      	movs	r1, #1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 ff3e 	bl	8004b98 <RCCEx_PLL2_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d20:	e012      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3324      	adds	r3, #36	; 0x24
 8003d26:	2101      	movs	r1, #1
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 ffe7 	bl	8004cfc <RCCEx_PLL3_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d32:	e009      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	75fb      	strb	r3, [r7, #23]
      break;
 8003d38:	e006      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e004      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e002      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d4e:	4b35      	ldr	r3, [pc, #212]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d5c:	4931      	ldr	r1, [pc, #196]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	658b      	str	r3, [r1, #88]	; 0x58
 8003d62:	e001      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d02d      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d7c:	d005      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d82:	d009      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d013      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003d88:	e00f      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	4a25      	ldr	r2, [pc, #148]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d96:	e00c      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fefa 	bl	8004b98 <RCCEx_PLL2_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	75fb      	strb	r3, [r7, #23]
      break;
 8003dae:	e000      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc4:	4917      	ldr	r1, [pc, #92]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	650b      	str	r3, [r1, #80]	; 0x50
 8003dca:	e001      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d035      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d81b      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003de4:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003e29 	.word	0x08003e29
 8003df0:	08003dfd 	.word	0x08003dfd
 8003df4:	08003e0b 	.word	0x08003e0b
 8003df8:	08003e29 	.word	0x08003e29
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	4a08      	ldr	r2, [pc, #32]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e08:	e00f      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fec1 	bl	8004b98 <RCCEx_PLL2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e1a:	e006      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e20:	e003      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003e22:	bf00      	nop
 8003e24:	58024400 	.word	0x58024400
      break;
 8003e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e30:	4bba      	ldr	r3, [pc, #744]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e34:	f023 0203 	bic.w	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	49b7      	ldr	r1, [pc, #732]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e42:	e001      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8086 	beq.w	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e56:	4bb2      	ldr	r3, [pc, #712]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4ab1      	ldr	r2, [pc, #708]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e62:	f7fd fa55 	bl	8001310 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e68:	e009      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6a:	f7fd fa51 	bl	8001310 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b64      	cmp	r3, #100	; 0x64
 8003e76:	d902      	bls.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	75fb      	strb	r3, [r7, #23]
        break;
 8003e7c:	e005      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e7e:	4ba8      	ldr	r3, [pc, #672]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0ef      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d166      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e90:	4ba2      	ldr	r3, [pc, #648]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e9a:	4053      	eors	r3, r2
 8003e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d013      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ea4:	4b9d      	ldr	r3, [pc, #628]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eac:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eae:	4b9b      	ldr	r3, [pc, #620]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a9a      	ldr	r2, [pc, #616]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eba:	4b98      	ldr	r3, [pc, #608]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a97      	ldr	r2, [pc, #604]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ec6:	4a95      	ldr	r2, [pc, #596]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed6:	d115      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fd fa1a 	bl	8001310 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ede:	e00b      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee0:	f7fd fa16 	bl	8001310 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d902      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	75fb      	strb	r3, [r7, #23]
            break;
 8003ef6:	e005      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ef8:	4b88      	ldr	r3, [pc, #544]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ed      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d126      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f18:	d10d      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003f1a:	4b80      	ldr	r3, [pc, #512]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f28:	0919      	lsrs	r1, r3, #4
 8003f2a:	4b7e      	ldr	r3, [pc, #504]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003f2c:	400b      	ands	r3, r1
 8003f2e:	497b      	ldr	r1, [pc, #492]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	610b      	str	r3, [r1, #16]
 8003f34:	e005      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003f36:	4b79      	ldr	r3, [pc, #484]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	4a78      	ldr	r2, [pc, #480]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f40:	6113      	str	r3, [r2, #16]
 8003f42:	4b76      	ldr	r3, [pc, #472]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	4972      	ldr	r1, [pc, #456]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	670b      	str	r3, [r1, #112]	; 0x70
 8003f56:	e004      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	75bb      	strb	r3, [r7, #22]
 8003f5c:	e001      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d07d      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f72:	2b28      	cmp	r3, #40	; 0x28
 8003f74:	d866      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003f76:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	0800404b 	.word	0x0800404b
 8003f80:	08004045 	.word	0x08004045
 8003f84:	08004045 	.word	0x08004045
 8003f88:	08004045 	.word	0x08004045
 8003f8c:	08004045 	.word	0x08004045
 8003f90:	08004045 	.word	0x08004045
 8003f94:	08004045 	.word	0x08004045
 8003f98:	08004045 	.word	0x08004045
 8003f9c:	08004021 	.word	0x08004021
 8003fa0:	08004045 	.word	0x08004045
 8003fa4:	08004045 	.word	0x08004045
 8003fa8:	08004045 	.word	0x08004045
 8003fac:	08004045 	.word	0x08004045
 8003fb0:	08004045 	.word	0x08004045
 8003fb4:	08004045 	.word	0x08004045
 8003fb8:	08004045 	.word	0x08004045
 8003fbc:	08004033 	.word	0x08004033
 8003fc0:	08004045 	.word	0x08004045
 8003fc4:	08004045 	.word	0x08004045
 8003fc8:	08004045 	.word	0x08004045
 8003fcc:	08004045 	.word	0x08004045
 8003fd0:	08004045 	.word	0x08004045
 8003fd4:	08004045 	.word	0x08004045
 8003fd8:	08004045 	.word	0x08004045
 8003fdc:	0800404b 	.word	0x0800404b
 8003fe0:	08004045 	.word	0x08004045
 8003fe4:	08004045 	.word	0x08004045
 8003fe8:	08004045 	.word	0x08004045
 8003fec:	08004045 	.word	0x08004045
 8003ff0:	08004045 	.word	0x08004045
 8003ff4:	08004045 	.word	0x08004045
 8003ff8:	08004045 	.word	0x08004045
 8003ffc:	0800404b 	.word	0x0800404b
 8004000:	08004045 	.word	0x08004045
 8004004:	08004045 	.word	0x08004045
 8004008:	08004045 	.word	0x08004045
 800400c:	08004045 	.word	0x08004045
 8004010:	08004045 	.word	0x08004045
 8004014:	08004045 	.word	0x08004045
 8004018:	08004045 	.word	0x08004045
 800401c:	0800404b 	.word	0x0800404b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fdb6 	bl	8004b98 <RCCEx_PLL2_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004030:	e00c      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3324      	adds	r3, #36	; 0x24
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fe5f 	bl	8004cfc <RCCEx_PLL3_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004042:	e003      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	75fb      	strb	r3, [r7, #23]
      break;
 8004048:	e000      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800404a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004052:	4b32      	ldr	r3, [pc, #200]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405e:	492f      	ldr	r1, [pc, #188]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004060:	4313      	orrs	r3, r2
 8004062:	654b      	str	r3, [r1, #84]	; 0x54
 8004064:	e001      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004066:	7dfb      	ldrb	r3, [r7, #23]
 8004068:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d037      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407a:	2b05      	cmp	r3, #5
 800407c:	d820      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800407e:	a201      	add	r2, pc, #4	; (adr r2, 8004084 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004084:	080040c7 	.word	0x080040c7
 8004088:	0800409d 	.word	0x0800409d
 800408c:	080040af 	.word	0x080040af
 8004090:	080040c7 	.word	0x080040c7
 8004094:	080040c7 	.word	0x080040c7
 8004098:	080040c7 	.word	0x080040c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3304      	adds	r3, #4
 80040a0:	2101      	movs	r1, #1
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fd78 	bl	8004b98 <RCCEx_PLL2_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040ac:	e00c      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3324      	adds	r3, #36	; 0x24
 80040b2:	2101      	movs	r1, #1
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fe21 	bl	8004cfc <RCCEx_PLL3_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040be:	e003      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	75fb      	strb	r3, [r7, #23]
      break;
 80040c4:	e000      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80040c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040ce:	4b13      	ldr	r3, [pc, #76]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	f023 0207 	bic.w	r2, r3, #7
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040da:	4910      	ldr	r1, [pc, #64]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	654b      	str	r3, [r1, #84]	; 0x54
 80040e0:	e001      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d040      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	2b05      	cmp	r3, #5
 80040fa:	d827      	bhi.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004153 	.word	0x08004153
 8004108:	08004129 	.word	0x08004129
 800410c:	0800413b 	.word	0x0800413b
 8004110:	08004153 	.word	0x08004153
 8004114:	08004153 	.word	0x08004153
 8004118:	08004153 	.word	0x08004153
 800411c:	58024400 	.word	0x58024400
 8004120:	58024800 	.word	0x58024800
 8004124:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	2101      	movs	r1, #1
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fd32 	bl	8004b98 <RCCEx_PLL2_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004138:	e00c      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3324      	adds	r3, #36	; 0x24
 800413e:	2101      	movs	r1, #1
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fddb 	bl	8004cfc <RCCEx_PLL3_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800414a:	e003      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
      break;
 8004150:	e000      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800415a:	4bb2      	ldr	r3, [pc, #712]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	f023 0207 	bic.w	r2, r3, #7
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	49ae      	ldr	r1, [pc, #696]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800416a:	4313      	orrs	r3, r2
 800416c:	658b      	str	r3, [r1, #88]	; 0x58
 800416e:	e001      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d044      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800418a:	d01b      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800418c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004190:	d805      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d022      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800419c:	e01b      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800419e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a2:	d01d      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80041a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041a8:	d01c      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80041aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041ae:	d01b      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80041b0:	e011      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3304      	adds	r3, #4
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fced 	bl	8004b98 <RCCEx_PLL2_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041c2:	e012      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3324      	adds	r3, #36	; 0x24
 80041c8:	2102      	movs	r1, #2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fd96 	bl	8004cfc <RCCEx_PLL3_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041d4:	e009      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
      break;
 80041da:	e006      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80041dc:	bf00      	nop
 80041de:	e004      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80041e0:	bf00      	nop
 80041e2:	e002      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80041e4:	bf00      	nop
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80041e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10a      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041f0:	4b8c      	ldr	r3, [pc, #560]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041fe:	4989      	ldr	r1, [pc, #548]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004200:	4313      	orrs	r3, r2
 8004202:	654b      	str	r3, [r1, #84]	; 0x54
 8004204:	e001      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004206:	7dfb      	ldrb	r3, [r7, #23]
 8004208:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d044      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800421c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004220:	d01b      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004226:	d805      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d022      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800422c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004232:	e01b      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004238:	d01d      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800423a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800423e:	d01c      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004240:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004244:	d01b      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004246:	e011      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3304      	adds	r3, #4
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fca2 	bl	8004b98 <RCCEx_PLL2_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004258:	e012      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3324      	adds	r3, #36	; 0x24
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fd4b 	bl	8004cfc <RCCEx_PLL3_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800426a:	e009      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
      break;
 8004270:	e006      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004272:	bf00      	nop
 8004274:	e004      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004276:	bf00      	nop
 8004278:	e002      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800427a:	bf00      	nop
 800427c:	e000      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800427e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004280:	7dfb      	ldrb	r3, [r7, #23]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004286:	4b67      	ldr	r3, [pc, #412]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004294:	4963      	ldr	r1, [pc, #396]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004296:	4313      	orrs	r3, r2
 8004298:	658b      	str	r3, [r1, #88]	; 0x58
 800429a:	e001      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d044      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b6:	d01b      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80042b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042bc:	d805      	bhi.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d022      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80042c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80042c8:	e01b      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80042ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ce:	d01d      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80042d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042d4:	d01c      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80042d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042da:	d01b      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80042dc:	e011      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3304      	adds	r3, #4
 80042e2:	2100      	movs	r1, #0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fc57 	bl	8004b98 <RCCEx_PLL2_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042ee:	e012      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3324      	adds	r3, #36	; 0x24
 80042f4:	2102      	movs	r1, #2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fd00 	bl	8004cfc <RCCEx_PLL3_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004300:	e009      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	75fb      	strb	r3, [r7, #23]
      break;
 8004306:	e006      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004308:	bf00      	nop
 800430a:	e004      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800430c:	bf00      	nop
 800430e:	e002      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004316:	7dfb      	ldrb	r3, [r7, #23]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800431c:	4b41      	ldr	r3, [pc, #260]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800432a:	493e      	ldr	r1, [pc, #248]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800432c:	4313      	orrs	r3, r2
 800432e:	658b      	str	r3, [r1, #88]	; 0x58
 8004330:	e001      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d01a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434c:	d10a      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3324      	adds	r3, #36	; 0x24
 8004352:	2102      	movs	r1, #2
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fcd1 	bl	8004cfc <RCCEx_PLL3_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004364:	4b2f      	ldr	r3, [pc, #188]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004372:	492c      	ldr	r1, [pc, #176]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004374:	4313      	orrs	r3, r2
 8004376:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438e:	d10a      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3324      	adds	r3, #36	; 0x24
 8004394:	2102      	movs	r1, #2
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fcb0 	bl	8004cfc <RCCEx_PLL3_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043a6:	4b1f      	ldr	r3, [pc, #124]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b4:	491b      	ldr	r1, [pc, #108]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d032      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d00d      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80043d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043d6:	d016      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d111      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fbd8 	bl	8004b98 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043ec:	e00c      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3324      	adds	r3, #36	; 0x24
 80043f2:	2102      	movs	r1, #2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fc81 	bl	8004cfc <RCCEx_PLL3_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043fe:	e003      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	75fb      	strb	r3, [r7, #23]
      break;
 8004404:	e000      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10c      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800441c:	4901      	ldr	r1, [pc, #4]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	658b      	str	r3, [r1, #88]	; 0x58
 8004422:	e003      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004424:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d02f      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004442:	d00c      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004444:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004448:	d015      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800444a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800444e:	d10f      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004450:	4b79      	ldr	r3, [pc, #484]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	4a78      	ldr	r2, [pc, #480]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800445a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800445c:	e00c      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3324      	adds	r3, #36	; 0x24
 8004462:	2101      	movs	r1, #1
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fc49 	bl	8004cfc <RCCEx_PLL3_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800446e:	e003      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	75fb      	strb	r3, [r7, #23]
      break;
 8004474:	e000      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800447e:	4b6e      	ldr	r3, [pc, #440]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448c:	496a      	ldr	r1, [pc, #424]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800448e:	4313      	orrs	r3, r2
 8004490:	654b      	str	r3, [r1, #84]	; 0x54
 8004492:	e001      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004494:	7dfb      	ldrb	r3, [r7, #23]
 8004496:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d029      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d007      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80044b2:	e00f      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b4:	4b60      	ldr	r3, [pc, #384]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4a5f      	ldr	r2, [pc, #380]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044c0:	e00b      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2102      	movs	r1, #2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fb65 	bl	8004b98 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044d2:	e002      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	75fb      	strb	r3, [r7, #23]
      break;
 80044d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044da:	7dfb      	ldrb	r3, [r7, #23]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d109      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044e0:	4b55      	ldr	r3, [pc, #340]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ec:	4952      	ldr	r1, [pc, #328]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044f2:	e001      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3324      	adds	r3, #36	; 0x24
 8004508:	2102      	movs	r1, #2
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fbf6 	bl	8004cfc <RCCEx_PLL3_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d02f      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452e:	d00c      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004534:	d802      	bhi.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d011      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800453a:	e00d      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800453c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004540:	d00f      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004546:	d00e      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004548:	e006      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454a:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	4a3a      	ldr	r2, [pc, #232]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004554:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004556:	e007      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	75fb      	strb	r3, [r7, #23]
      break;
 800455c:	e004      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800455e:	bf00      	nop
 8004560:	e002      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004562:	bf00      	nop
 8004564:	e000      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800456e:	4b32      	ldr	r3, [pc, #200]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457a:	492f      	ldr	r1, [pc, #188]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800457c:	4313      	orrs	r3, r2
 800457e:	654b      	str	r3, [r1, #84]	; 0x54
 8004580:	e001      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004592:	4b29      	ldr	r3, [pc, #164]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004596:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	4926      	ldr	r1, [pc, #152]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045b0:	4b21      	ldr	r3, [pc, #132]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045be:	491e      	ldr	r1, [pc, #120]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045d0:	4b19      	ldr	r3, [pc, #100]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045dc:	4916      	ldr	r1, [pc, #88]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045ee:	4b12      	ldr	r3, [pc, #72]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	4a11      	ldr	r2, [pc, #68]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045f8:	6113      	str	r3, [r2, #16]
 80045fa:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004604:	490c      	ldr	r1, [pc, #48]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004606:	4313      	orrs	r3, r2
 8004608:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	da08      	bge.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004616:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	4906      	ldr	r1, [pc, #24]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004620:	4313      	orrs	r3, r2
 8004622:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004624:	7dbb      	ldrb	r3, [r7, #22]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	e000      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	58024400 	.word	0x58024400

0800463c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004640:	f7ff f8b2 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 8004644:	4601      	mov	r1, r0
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	4a04      	ldr	r2, [pc, #16]	; (8004664 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	58024400 	.word	0x58024400
 8004664:	08007858 	.word	0x08007858

08004668 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004668:	b480      	push	{r7}
 800466a:	b089      	sub	sp, #36	; 0x24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004670:	4b9d      	ldr	r3, [pc, #628]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800467a:	4b9b      	ldr	r3, [pc, #620]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	0b1b      	lsrs	r3, r3, #12
 8004680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004684:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004686:	4b98      	ldr	r3, [pc, #608]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004692:	4b95      	ldr	r3, [pc, #596]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004696:	08db      	lsrs	r3, r3, #3
 8004698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 810a 	beq.w	80048ca <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d05a      	beq.n	8004772 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d302      	bcc.n	80046c6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d078      	beq.n	80047b6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80046c4:	e099      	b.n	80047fa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046c6:	4b88      	ldr	r3, [pc, #544]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d02d      	beq.n	800472e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046d2:	4b85      	ldr	r3, [pc, #532]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	08db      	lsrs	r3, r3, #3
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	4a83      	ldr	r2, [pc, #524]	; (80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80046de:	fa22 f303 	lsr.w	r3, r2, r3
 80046e2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fc:	4b7a      	ldr	r3, [pc, #488]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004710:	eddf 5a77 	vldr	s11, [pc, #476]	; 80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004714:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004728:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800472c:	e087      	b.n	800483e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	ee07 3a90 	vmov	s15, r3
 8004734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004738:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800473c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004740:	4b69      	ldr	r3, [pc, #420]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004748:	ee07 3a90 	vmov	s15, r3
 800474c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004750:	ed97 6a03 	vldr	s12, [r7, #12]
 8004754:	eddf 5a66 	vldr	s11, [pc, #408]	; 80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800475c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004770:	e065      	b.n	800483e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	ee07 3a90 	vmov	s15, r3
 8004778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004784:	4b58      	ldr	r3, [pc, #352]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004794:	ed97 6a03 	vldr	s12, [r7, #12]
 8004798:	eddf 5a55 	vldr	s11, [pc, #340]	; 80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800479c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047b4:	e043      	b.n	800483e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80047c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c8:	4b47      	ldr	r3, [pc, #284]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d0:	ee07 3a90 	vmov	s15, r3
 80047d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80047dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80047e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047f8:	e021      	b.n	800483e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	ee07 3a90 	vmov	s15, r3
 8004800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004804:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480c:	4b36      	ldr	r3, [pc, #216]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004814:	ee07 3a90 	vmov	s15, r3
 8004818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004820:	eddf 5a33 	vldr	s11, [pc, #204]	; 80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004838:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800483c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800483e:	4b2a      	ldr	r3, [pc, #168]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	0a5b      	lsrs	r3, r3, #9
 8004844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004848:	ee07 3a90 	vmov	s15, r3
 800484c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004854:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004858:	edd7 6a07 	vldr	s13, [r7, #28]
 800485c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004864:	ee17 2a90 	vmov	r2, s15
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800486c:	4b1e      	ldr	r3, [pc, #120]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	0c1b      	lsrs	r3, r3, #16
 8004872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004882:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004886:	edd7 6a07 	vldr	s13, [r7, #28]
 800488a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800488e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004892:	ee17 2a90 	vmov	r2, s15
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	0e1b      	lsrs	r3, r3, #24
 80048a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a4:	ee07 3a90 	vmov	s15, r3
 80048a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80048b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c0:	ee17 2a90 	vmov	r2, s15
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048c8:	e008      	b.n	80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bf00      	nop
 80048de:	3724      	adds	r7, #36	; 0x24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	58024400 	.word	0x58024400
 80048ec:	03d09000 	.word	0x03d09000
 80048f0:	46000000 	.word	0x46000000
 80048f4:	4c742400 	.word	0x4c742400
 80048f8:	4a742400 	.word	0x4a742400
 80048fc:	4af42400 	.word	0x4af42400

08004900 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	; 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004908:	4b9d      	ldr	r3, [pc, #628]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004912:	4b9b      	ldr	r3, [pc, #620]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	0d1b      	lsrs	r3, r3, #20
 8004918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800491c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800491e:	4b98      	ldr	r3, [pc, #608]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	0a1b      	lsrs	r3, r3, #8
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800492a:	4b95      	ldr	r3, [pc, #596]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492e:	08db      	lsrs	r3, r3, #3
 8004930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 810a 	beq.w	8004b62 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d05a      	beq.n	8004a0a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004954:	2b01      	cmp	r3, #1
 8004956:	d302      	bcc.n	800495e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004958:	2b02      	cmp	r3, #2
 800495a:	d078      	beq.n	8004a4e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800495c:	e099      	b.n	8004a92 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800495e:	4b88      	ldr	r3, [pc, #544]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d02d      	beq.n	80049c6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800496a:	4b85      	ldr	r3, [pc, #532]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	08db      	lsrs	r3, r3, #3
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	4a83      	ldr	r2, [pc, #524]	; (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004976:	fa22 f303 	lsr.w	r3, r2, r3
 800497a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004994:	4b7a      	ldr	r3, [pc, #488]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499c:	ee07 3a90 	vmov	s15, r3
 80049a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80049c4:	e087      	b.n	8004ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80049d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d8:	4b69      	ldr	r3, [pc, #420]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a08:	e065      	b.n	8004ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a14:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1c:	4b58      	ldr	r3, [pc, #352]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a30:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a4c:	e043      	b.n	8004ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	ee07 3a90 	vmov	s15, r3
 8004a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a58:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a60:	4b47      	ldr	r3, [pc, #284]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a70:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a74:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a90:	e021      	b.n	8004ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	ee07 3a90 	vmov	s15, r3
 8004a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa4:	4b36      	ldr	r3, [pc, #216]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aac:	ee07 3a90 	vmov	s15, r3
 8004ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ab8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004abc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ad4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004ad6:	4b2a      	ldr	r3, [pc, #168]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	0a5b      	lsrs	r3, r3, #9
 8004adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae0:	ee07 3a90 	vmov	s15, r3
 8004ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004af0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afc:	ee17 2a90 	vmov	r2, s15
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004b04:	4b1e      	ldr	r3, [pc, #120]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2a:	ee17 2a90 	vmov	r2, s15
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004b32:	4b13      	ldr	r3, [pc, #76]	; (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	0e1b      	lsrs	r3, r3, #24
 8004b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b3c:	ee07 3a90 	vmov	s15, r3
 8004b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b58:	ee17 2a90 	vmov	r2, s15
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b60:	e008      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	609a      	str	r2, [r3, #8]
}
 8004b74:	bf00      	nop
 8004b76:	3724      	adds	r7, #36	; 0x24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	58024400 	.word	0x58024400
 8004b84:	03d09000 	.word	0x03d09000
 8004b88:	46000000 	.word	0x46000000
 8004b8c:	4c742400 	.word	0x4c742400
 8004b90:	4a742400 	.word	0x4a742400
 8004b94:	4af42400 	.word	0x4af42400

08004b98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ba6:	4b53      	ldr	r3, [pc, #332]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d101      	bne.n	8004bb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e099      	b.n	8004cea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bb6:	4b4f      	ldr	r3, [pc, #316]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a4e      	ldr	r2, [pc, #312]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004bbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc2:	f7fc fba5 	bl	8001310 <HAL_GetTick>
 8004bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bca:	f7fc fba1 	bl	8001310 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e086      	b.n	8004cea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bdc:	4b45      	ldr	r3, [pc, #276]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004be8:	4b42      	ldr	r3, [pc, #264]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	031b      	lsls	r3, r3, #12
 8004bf6:	493f      	ldr	r1, [pc, #252]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	628b      	str	r3, [r1, #40]	; 0x28
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	025b      	lsls	r3, r3, #9
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	061b      	lsls	r3, r3, #24
 8004c28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c2c:	4931      	ldr	r1, [pc, #196]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c32:	4b30      	ldr	r3, [pc, #192]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	492d      	ldr	r1, [pc, #180]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c44:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	f023 0220 	bic.w	r2, r3, #32
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	4928      	ldr	r1, [pc, #160]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c56:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	4a26      	ldr	r2, [pc, #152]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	f023 0310 	bic.w	r3, r3, #16
 8004c60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c66:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <RCCEx_PLL2_Config+0x160>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	69d2      	ldr	r2, [r2, #28]
 8004c6e:	00d2      	lsls	r2, r2, #3
 8004c70:	4920      	ldr	r1, [pc, #128]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c76:	4b1f      	ldr	r3, [pc, #124]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c7c:	f043 0310 	orr.w	r3, r3, #16
 8004c80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c88:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c94:	e00f      	b.n	8004cb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d106      	bne.n	8004caa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c9c:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ca8:	e005      	b.n	8004cb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	4a11      	ldr	r2, [pc, #68]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a0e      	ldr	r2, [pc, #56]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc2:	f7fc fb25 	bl	8001310 <HAL_GetTick>
 8004cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cc8:	e008      	b.n	8004cdc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004cca:	f7fc fb21 	bl	8001310 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e006      	b.n	8004cea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <RCCEx_PLL2_Config+0x15c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	58024400 	.word	0x58024400
 8004cf8:	ffff0007 	.word	0xffff0007

08004cfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d0a:	4b53      	ldr	r3, [pc, #332]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d101      	bne.n	8004d1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e099      	b.n	8004e4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d1a:	4b4f      	ldr	r3, [pc, #316]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a4e      	ldr	r2, [pc, #312]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d26:	f7fc faf3 	bl	8001310 <HAL_GetTick>
 8004d2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d2e:	f7fc faef 	bl	8001310 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e086      	b.n	8004e4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d40:	4b45      	ldr	r3, [pc, #276]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d4c:	4b42      	ldr	r3, [pc, #264]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	051b      	lsls	r3, r3, #20
 8004d5a:	493f      	ldr	r1, [pc, #252]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	628b      	str	r3, [r1, #40]	; 0x28
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	025b      	lsls	r3, r3, #9
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	041b      	lsls	r3, r3, #16
 8004d7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	061b      	lsls	r3, r3, #24
 8004d8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d90:	4931      	ldr	r1, [pc, #196]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d96:	4b30      	ldr	r3, [pc, #192]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	492d      	ldr	r1, [pc, #180]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004da8:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	4928      	ldr	r1, [pc, #160]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dba:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	4a26      	ldr	r2, [pc, #152]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dc6:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dca:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <RCCEx_PLL3_Config+0x160>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	69d2      	ldr	r2, [r2, #28]
 8004dd2:	00d2      	lsls	r2, r2, #3
 8004dd4:	4920      	ldr	r1, [pc, #128]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004dda:	4b1f      	ldr	r3, [pc, #124]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004dec:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004df2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004df6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004df8:	e00f      	b.n	8004e1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d106      	bne.n	8004e0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e00:	4b15      	ldr	r3, [pc, #84]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e0c:	e005      	b.n	8004e1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e0e:	4b12      	ldr	r3, [pc, #72]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	4a11      	ldr	r2, [pc, #68]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a0e      	ldr	r2, [pc, #56]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e26:	f7fc fa73 	bl	8001310 <HAL_GetTick>
 8004e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e2c:	e008      	b.n	8004e40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e2e:	f7fc fa6f 	bl	8001310 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e006      	b.n	8004e4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <RCCEx_PLL3_Config+0x15c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f0      	beq.n	8004e2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	ffff0007 	.word	0xffff0007

08004e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e042      	b.n	8004ef8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7fb ff81 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2224      	movs	r2, #36	; 0x24
 8004e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0201 	bic.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa56 	bl	8005354 <UART_SetConfig>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e022      	b.n	8004ef8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fffa 	bl	8005eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 f881 	bl	8005ff8 <UART_CheckIdleState>
 8004ef6:	4603      	mov	r3, r0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08a      	sub	sp, #40	; 0x28
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	f040 8083 	bne.w	8005022 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <HAL_UART_Transmit+0x28>
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e07b      	b.n	8005024 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_UART_Transmit+0x3a>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e074      	b.n	8005024 <HAL_UART_Transmit+0x124>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2221      	movs	r2, #33	; 0x21
 8004f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004f52:	f7fc f9dd 	bl	8001310 <HAL_GetTick>
 8004f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	88fa      	ldrh	r2, [r7, #6]
 8004f64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f70:	d108      	bne.n	8004f84 <HAL_UART_Transmit+0x84>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d104      	bne.n	8004f84 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	e003      	b.n	8004f8c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004f94:	e02c      	b.n	8004ff0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2180      	movs	r1, #128	; 0x80
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f001 f871 	bl	8006088 <UART_WaitOnFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e039      	b.n	8005024 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	3302      	adds	r3, #2
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	e007      	b.n	8004fde <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	781a      	ldrb	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1cc      	bne.n	8004f96 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2200      	movs	r2, #0
 8005004:	2140      	movs	r1, #64	; 0x40
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f001 f83e 	bl	8006088 <UART_WaitOnFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e006      	b.n	8005024 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	e000      	b.n	8005024 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005022:	2302      	movs	r3, #2
  }
}
 8005024:	4618      	mov	r0, r3
 8005026:	3720      	adds	r7, #32
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d118      	bne.n	800508e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d013      	beq.n	800508e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b00      	cmp	r3, #0
 800506e:	d104      	bne.n	800507a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 8145 	beq.w	800530e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
      }
      return;
 800508c:	e13f      	b.n	800530e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80e8 	beq.w	8005266 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4ba1      	ldr	r3, [pc, #644]	; (8005320 <HAL_UART_IRQHandler+0x2f4>)
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d105      	bne.n	80050ac <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4ba0      	ldr	r3, [pc, #640]	; (8005324 <HAL_UART_IRQHandler+0x2f8>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80dd 	beq.w	8005266 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d010      	beq.n	80050d8 <HAL_UART_IRQHandler+0xac>
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00b      	beq.n	80050d8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2201      	movs	r2, #1
 80050c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ce:	f043 0201 	orr.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d010      	beq.n	8005104 <HAL_UART_IRQHandler+0xd8>
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2202      	movs	r2, #2
 80050f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	f043 0204 	orr.w	r2, r3, #4
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	d010      	beq.n	8005130 <HAL_UART_IRQHandler+0x104>
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00b      	beq.n	8005130 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2204      	movs	r2, #4
 800511e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005126:	f043 0202 	orr.w	r2, r3, #2
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d015      	beq.n	8005166 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d104      	bne.n	800514e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4b76      	ldr	r3, [pc, #472]	; (8005320 <HAL_UART_IRQHandler+0x2f4>)
 8005148:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2208      	movs	r2, #8
 8005154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	f043 0208 	orr.w	r2, r3, #8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516c:	2b00      	cmp	r3, #0
 800516e:	d011      	beq.n	8005194 <HAL_UART_IRQHandler+0x168>
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00c      	beq.n	8005194 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 80b9 	beq.w	8005312 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d011      	beq.n	80051ce <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d004      	beq.n	80051ee <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d031      	beq.n	8005252 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 ffca 	bl	8006188 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d123      	bne.n	800524a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005210:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005216:	2b00      	cmp	r3, #0
 8005218:	d013      	beq.n	8005242 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800521e:	4a42      	ldr	r2, [pc, #264]	; (8005328 <HAL_UART_IRQHandler+0x2fc>)
 8005220:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005226:	4618      	mov	r0, r3
 8005228:	f7fc f9d0 	bl	80015cc <HAL_DMA_Abort_IT>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d017      	beq.n	8005262 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800523c:	4610      	mov	r0, r2
 800523e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	e00f      	b.n	8005262 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f87c 	bl	8005340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005248:	e00b      	b.n	8005262 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f878 	bl	8005340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005250:	e007      	b.n	8005262 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f874 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005260:	e057      	b.n	8005312 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005262:	bf00      	nop
    return;
 8005264:	e055      	b.n	8005312 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00d      	beq.n	800528c <HAL_UART_IRQHandler+0x260>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d008      	beq.n	800528c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005282:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 ffd3 	bl	8006230 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800528a:	e045      	b.n	8005318 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d012      	beq.n	80052bc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529c:	2b00      	cmp	r3, #0
 800529e:	d104      	bne.n	80052aa <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d031      	beq.n	8005316 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4798      	blx	r3
    }
    return;
 80052ba:	e02c      	b.n	8005316 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <HAL_UART_IRQHandler+0x2ac>
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 ff93 	bl	80061fc <UART_EndTransmit_IT>
    return;
 80052d6:	e01f      	b.n	8005318 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d008      	beq.n	80052f4 <HAL_UART_IRQHandler+0x2c8>
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 ffb3 	bl	8006258 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052f2:	e011      	b.n	8005318 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00c      	beq.n	8005318 <HAL_UART_IRQHandler+0x2ec>
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	da09      	bge.n	8005318 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 ff9d 	bl	8006244 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800530a:	bf00      	nop
 800530c:	e004      	b.n	8005318 <HAL_UART_IRQHandler+0x2ec>
      return;
 800530e:	bf00      	nop
 8005310:	e002      	b.n	8005318 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005312:	bf00      	nop
 8005314:	e000      	b.n	8005318 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005316:	bf00      	nop
  }
}
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	10000001 	.word	0x10000001
 8005324:	04000120 	.word	0x04000120
 8005328:	080061d1 	.word	0x080061d1

0800532c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005354:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005358:	b08e      	sub	sp, #56	; 0x38
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	4313      	orrs	r3, r2
 800537a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005382:	4313      	orrs	r3, r2
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4bc1      	ldr	r3, [pc, #772]	; (8005694 <UART_SetConfig+0x340>)
 800538e:	4013      	ands	r3, r2
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005396:	430b      	orrs	r3, r1
 8005398:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4ab7      	ldr	r2, [pc, #732]	; (8005698 <UART_SetConfig+0x344>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053c6:	4313      	orrs	r3, r2
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	4bb2      	ldr	r3, [pc, #712]	; (800569c <UART_SetConfig+0x348>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6812      	ldr	r2, [r2, #0]
 80053d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053da:	430b      	orrs	r3, r1
 80053dc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	f023 010f 	bic.w	r1, r3, #15
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4aa9      	ldr	r2, [pc, #676]	; (80056a0 <UART_SetConfig+0x34c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d177      	bne.n	80054ee <UART_SetConfig+0x19a>
 80053fe:	4ba9      	ldr	r3, [pc, #676]	; (80056a4 <UART_SetConfig+0x350>)
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005406:	2b28      	cmp	r3, #40	; 0x28
 8005408:	d86c      	bhi.n	80054e4 <UART_SetConfig+0x190>
 800540a:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <UART_SetConfig+0xbc>)
 800540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005410:	080054b5 	.word	0x080054b5
 8005414:	080054e5 	.word	0x080054e5
 8005418:	080054e5 	.word	0x080054e5
 800541c:	080054e5 	.word	0x080054e5
 8005420:	080054e5 	.word	0x080054e5
 8005424:	080054e5 	.word	0x080054e5
 8005428:	080054e5 	.word	0x080054e5
 800542c:	080054e5 	.word	0x080054e5
 8005430:	080054bd 	.word	0x080054bd
 8005434:	080054e5 	.word	0x080054e5
 8005438:	080054e5 	.word	0x080054e5
 800543c:	080054e5 	.word	0x080054e5
 8005440:	080054e5 	.word	0x080054e5
 8005444:	080054e5 	.word	0x080054e5
 8005448:	080054e5 	.word	0x080054e5
 800544c:	080054e5 	.word	0x080054e5
 8005450:	080054c5 	.word	0x080054c5
 8005454:	080054e5 	.word	0x080054e5
 8005458:	080054e5 	.word	0x080054e5
 800545c:	080054e5 	.word	0x080054e5
 8005460:	080054e5 	.word	0x080054e5
 8005464:	080054e5 	.word	0x080054e5
 8005468:	080054e5 	.word	0x080054e5
 800546c:	080054e5 	.word	0x080054e5
 8005470:	080054cd 	.word	0x080054cd
 8005474:	080054e5 	.word	0x080054e5
 8005478:	080054e5 	.word	0x080054e5
 800547c:	080054e5 	.word	0x080054e5
 8005480:	080054e5 	.word	0x080054e5
 8005484:	080054e5 	.word	0x080054e5
 8005488:	080054e5 	.word	0x080054e5
 800548c:	080054e5 	.word	0x080054e5
 8005490:	080054d5 	.word	0x080054d5
 8005494:	080054e5 	.word	0x080054e5
 8005498:	080054e5 	.word	0x080054e5
 800549c:	080054e5 	.word	0x080054e5
 80054a0:	080054e5 	.word	0x080054e5
 80054a4:	080054e5 	.word	0x080054e5
 80054a8:	080054e5 	.word	0x080054e5
 80054ac:	080054e5 	.word	0x080054e5
 80054b0:	080054dd 	.word	0x080054dd
 80054b4:	2301      	movs	r3, #1
 80054b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ba:	e233      	b.n	8005924 <UART_SetConfig+0x5d0>
 80054bc:	2304      	movs	r3, #4
 80054be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054c2:	e22f      	b.n	8005924 <UART_SetConfig+0x5d0>
 80054c4:	2308      	movs	r3, #8
 80054c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ca:	e22b      	b.n	8005924 <UART_SetConfig+0x5d0>
 80054cc:	2310      	movs	r3, #16
 80054ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054d2:	e227      	b.n	8005924 <UART_SetConfig+0x5d0>
 80054d4:	2320      	movs	r3, #32
 80054d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054da:	e223      	b.n	8005924 <UART_SetConfig+0x5d0>
 80054dc:	2340      	movs	r3, #64	; 0x40
 80054de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054e2:	e21f      	b.n	8005924 <UART_SetConfig+0x5d0>
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ea:	bf00      	nop
 80054ec:	e21a      	b.n	8005924 <UART_SetConfig+0x5d0>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a6d      	ldr	r2, [pc, #436]	; (80056a8 <UART_SetConfig+0x354>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d132      	bne.n	800555e <UART_SetConfig+0x20a>
 80054f8:	4b6a      	ldr	r3, [pc, #424]	; (80056a4 <UART_SetConfig+0x350>)
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	2b05      	cmp	r3, #5
 8005502:	d827      	bhi.n	8005554 <UART_SetConfig+0x200>
 8005504:	a201      	add	r2, pc, #4	; (adr r2, 800550c <UART_SetConfig+0x1b8>)
 8005506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550a:	bf00      	nop
 800550c:	08005525 	.word	0x08005525
 8005510:	0800552d 	.word	0x0800552d
 8005514:	08005535 	.word	0x08005535
 8005518:	0800553d 	.word	0x0800553d
 800551c:	08005545 	.word	0x08005545
 8005520:	0800554d 	.word	0x0800554d
 8005524:	2300      	movs	r3, #0
 8005526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552a:	e1fb      	b.n	8005924 <UART_SetConfig+0x5d0>
 800552c:	2304      	movs	r3, #4
 800552e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005532:	e1f7      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005534:	2308      	movs	r3, #8
 8005536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800553a:	e1f3      	b.n	8005924 <UART_SetConfig+0x5d0>
 800553c:	2310      	movs	r3, #16
 800553e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005542:	e1ef      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005544:	2320      	movs	r3, #32
 8005546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554a:	e1eb      	b.n	8005924 <UART_SetConfig+0x5d0>
 800554c:	2340      	movs	r3, #64	; 0x40
 800554e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005552:	e1e7      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005554:	2380      	movs	r3, #128	; 0x80
 8005556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555a:	bf00      	nop
 800555c:	e1e2      	b.n	8005924 <UART_SetConfig+0x5d0>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a52      	ldr	r2, [pc, #328]	; (80056ac <UART_SetConfig+0x358>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d132      	bne.n	80055ce <UART_SetConfig+0x27a>
 8005568:	4b4e      	ldr	r3, [pc, #312]	; (80056a4 <UART_SetConfig+0x350>)
 800556a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	2b05      	cmp	r3, #5
 8005572:	d827      	bhi.n	80055c4 <UART_SetConfig+0x270>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <UART_SetConfig+0x228>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	08005595 	.word	0x08005595
 8005580:	0800559d 	.word	0x0800559d
 8005584:	080055a5 	.word	0x080055a5
 8005588:	080055ad 	.word	0x080055ad
 800558c:	080055b5 	.word	0x080055b5
 8005590:	080055bd 	.word	0x080055bd
 8005594:	2300      	movs	r3, #0
 8005596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800559a:	e1c3      	b.n	8005924 <UART_SetConfig+0x5d0>
 800559c:	2304      	movs	r3, #4
 800559e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a2:	e1bf      	b.n	8005924 <UART_SetConfig+0x5d0>
 80055a4:	2308      	movs	r3, #8
 80055a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055aa:	e1bb      	b.n	8005924 <UART_SetConfig+0x5d0>
 80055ac:	2310      	movs	r3, #16
 80055ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b2:	e1b7      	b.n	8005924 <UART_SetConfig+0x5d0>
 80055b4:	2320      	movs	r3, #32
 80055b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ba:	e1b3      	b.n	8005924 <UART_SetConfig+0x5d0>
 80055bc:	2340      	movs	r3, #64	; 0x40
 80055be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055c2:	e1af      	b.n	8005924 <UART_SetConfig+0x5d0>
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ca:	bf00      	nop
 80055cc:	e1aa      	b.n	8005924 <UART_SetConfig+0x5d0>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a37      	ldr	r2, [pc, #220]	; (80056b0 <UART_SetConfig+0x35c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d132      	bne.n	800563e <UART_SetConfig+0x2ea>
 80055d8:	4b32      	ldr	r3, [pc, #200]	; (80056a4 <UART_SetConfig+0x350>)
 80055da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	2b05      	cmp	r3, #5
 80055e2:	d827      	bhi.n	8005634 <UART_SetConfig+0x2e0>
 80055e4:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <UART_SetConfig+0x298>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	08005605 	.word	0x08005605
 80055f0:	0800560d 	.word	0x0800560d
 80055f4:	08005615 	.word	0x08005615
 80055f8:	0800561d 	.word	0x0800561d
 80055fc:	08005625 	.word	0x08005625
 8005600:	0800562d 	.word	0x0800562d
 8005604:	2300      	movs	r3, #0
 8005606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560a:	e18b      	b.n	8005924 <UART_SetConfig+0x5d0>
 800560c:	2304      	movs	r3, #4
 800560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005612:	e187      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005614:	2308      	movs	r3, #8
 8005616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561a:	e183      	b.n	8005924 <UART_SetConfig+0x5d0>
 800561c:	2310      	movs	r3, #16
 800561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005622:	e17f      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005624:	2320      	movs	r3, #32
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562a:	e17b      	b.n	8005924 <UART_SetConfig+0x5d0>
 800562c:	2340      	movs	r3, #64	; 0x40
 800562e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005632:	e177      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005634:	2380      	movs	r3, #128	; 0x80
 8005636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800563a:	bf00      	nop
 800563c:	e172      	b.n	8005924 <UART_SetConfig+0x5d0>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1c      	ldr	r2, [pc, #112]	; (80056b4 <UART_SetConfig+0x360>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d144      	bne.n	80056d2 <UART_SetConfig+0x37e>
 8005648:	4b16      	ldr	r3, [pc, #88]	; (80056a4 <UART_SetConfig+0x350>)
 800564a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	2b05      	cmp	r3, #5
 8005652:	d839      	bhi.n	80056c8 <UART_SetConfig+0x374>
 8005654:	a201      	add	r2, pc, #4	; (adr r2, 800565c <UART_SetConfig+0x308>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	08005675 	.word	0x08005675
 8005660:	0800567d 	.word	0x0800567d
 8005664:	08005685 	.word	0x08005685
 8005668:	0800568d 	.word	0x0800568d
 800566c:	080056b9 	.word	0x080056b9
 8005670:	080056c1 	.word	0x080056c1
 8005674:	2300      	movs	r3, #0
 8005676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567a:	e153      	b.n	8005924 <UART_SetConfig+0x5d0>
 800567c:	2304      	movs	r3, #4
 800567e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005682:	e14f      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005684:	2308      	movs	r3, #8
 8005686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568a:	e14b      	b.n	8005924 <UART_SetConfig+0x5d0>
 800568c:	2310      	movs	r3, #16
 800568e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005692:	e147      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005694:	cfff69f3 	.word	0xcfff69f3
 8005698:	58000c00 	.word	0x58000c00
 800569c:	11fff4ff 	.word	0x11fff4ff
 80056a0:	40011000 	.word	0x40011000
 80056a4:	58024400 	.word	0x58024400
 80056a8:	40004400 	.word	0x40004400
 80056ac:	40004800 	.word	0x40004800
 80056b0:	40004c00 	.word	0x40004c00
 80056b4:	40005000 	.word	0x40005000
 80056b8:	2320      	movs	r3, #32
 80056ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056be:	e131      	b.n	8005924 <UART_SetConfig+0x5d0>
 80056c0:	2340      	movs	r3, #64	; 0x40
 80056c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056c6:	e12d      	b.n	8005924 <UART_SetConfig+0x5d0>
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ce:	bf00      	nop
 80056d0:	e128      	b.n	8005924 <UART_SetConfig+0x5d0>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4ab6      	ldr	r2, [pc, #728]	; (80059b0 <UART_SetConfig+0x65c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d178      	bne.n	80057ce <UART_SetConfig+0x47a>
 80056dc:	4bb5      	ldr	r3, [pc, #724]	; (80059b4 <UART_SetConfig+0x660>)
 80056de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056e4:	2b28      	cmp	r3, #40	; 0x28
 80056e6:	d86d      	bhi.n	80057c4 <UART_SetConfig+0x470>
 80056e8:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <UART_SetConfig+0x39c>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	08005795 	.word	0x08005795
 80056f4:	080057c5 	.word	0x080057c5
 80056f8:	080057c5 	.word	0x080057c5
 80056fc:	080057c5 	.word	0x080057c5
 8005700:	080057c5 	.word	0x080057c5
 8005704:	080057c5 	.word	0x080057c5
 8005708:	080057c5 	.word	0x080057c5
 800570c:	080057c5 	.word	0x080057c5
 8005710:	0800579d 	.word	0x0800579d
 8005714:	080057c5 	.word	0x080057c5
 8005718:	080057c5 	.word	0x080057c5
 800571c:	080057c5 	.word	0x080057c5
 8005720:	080057c5 	.word	0x080057c5
 8005724:	080057c5 	.word	0x080057c5
 8005728:	080057c5 	.word	0x080057c5
 800572c:	080057c5 	.word	0x080057c5
 8005730:	080057a5 	.word	0x080057a5
 8005734:	080057c5 	.word	0x080057c5
 8005738:	080057c5 	.word	0x080057c5
 800573c:	080057c5 	.word	0x080057c5
 8005740:	080057c5 	.word	0x080057c5
 8005744:	080057c5 	.word	0x080057c5
 8005748:	080057c5 	.word	0x080057c5
 800574c:	080057c5 	.word	0x080057c5
 8005750:	080057ad 	.word	0x080057ad
 8005754:	080057c5 	.word	0x080057c5
 8005758:	080057c5 	.word	0x080057c5
 800575c:	080057c5 	.word	0x080057c5
 8005760:	080057c5 	.word	0x080057c5
 8005764:	080057c5 	.word	0x080057c5
 8005768:	080057c5 	.word	0x080057c5
 800576c:	080057c5 	.word	0x080057c5
 8005770:	080057b5 	.word	0x080057b5
 8005774:	080057c5 	.word	0x080057c5
 8005778:	080057c5 	.word	0x080057c5
 800577c:	080057c5 	.word	0x080057c5
 8005780:	080057c5 	.word	0x080057c5
 8005784:	080057c5 	.word	0x080057c5
 8005788:	080057c5 	.word	0x080057c5
 800578c:	080057c5 	.word	0x080057c5
 8005790:	080057bd 	.word	0x080057bd
 8005794:	2301      	movs	r3, #1
 8005796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800579a:	e0c3      	b.n	8005924 <UART_SetConfig+0x5d0>
 800579c:	2304      	movs	r3, #4
 800579e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057a2:	e0bf      	b.n	8005924 <UART_SetConfig+0x5d0>
 80057a4:	2308      	movs	r3, #8
 80057a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057aa:	e0bb      	b.n	8005924 <UART_SetConfig+0x5d0>
 80057ac:	2310      	movs	r3, #16
 80057ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057b2:	e0b7      	b.n	8005924 <UART_SetConfig+0x5d0>
 80057b4:	2320      	movs	r3, #32
 80057b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ba:	e0b3      	b.n	8005924 <UART_SetConfig+0x5d0>
 80057bc:	2340      	movs	r3, #64	; 0x40
 80057be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057c2:	e0af      	b.n	8005924 <UART_SetConfig+0x5d0>
 80057c4:	2380      	movs	r3, #128	; 0x80
 80057c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ca:	bf00      	nop
 80057cc:	e0aa      	b.n	8005924 <UART_SetConfig+0x5d0>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a79      	ldr	r2, [pc, #484]	; (80059b8 <UART_SetConfig+0x664>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d132      	bne.n	800583e <UART_SetConfig+0x4ea>
 80057d8:	4b76      	ldr	r3, [pc, #472]	; (80059b4 <UART_SetConfig+0x660>)
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	2b05      	cmp	r3, #5
 80057e2:	d827      	bhi.n	8005834 <UART_SetConfig+0x4e0>
 80057e4:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0x498>)
 80057e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ea:	bf00      	nop
 80057ec:	08005805 	.word	0x08005805
 80057f0:	0800580d 	.word	0x0800580d
 80057f4:	08005815 	.word	0x08005815
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005825 	.word	0x08005825
 8005800:	0800582d 	.word	0x0800582d
 8005804:	2300      	movs	r3, #0
 8005806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800580a:	e08b      	b.n	8005924 <UART_SetConfig+0x5d0>
 800580c:	2304      	movs	r3, #4
 800580e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005812:	e087      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005814:	2308      	movs	r3, #8
 8005816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581a:	e083      	b.n	8005924 <UART_SetConfig+0x5d0>
 800581c:	2310      	movs	r3, #16
 800581e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005822:	e07f      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005824:	2320      	movs	r3, #32
 8005826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800582a:	e07b      	b.n	8005924 <UART_SetConfig+0x5d0>
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005832:	e077      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800583a:	bf00      	nop
 800583c:	e072      	b.n	8005924 <UART_SetConfig+0x5d0>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a5e      	ldr	r2, [pc, #376]	; (80059bc <UART_SetConfig+0x668>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d132      	bne.n	80058ae <UART_SetConfig+0x55a>
 8005848:	4b5a      	ldr	r3, [pc, #360]	; (80059b4 <UART_SetConfig+0x660>)
 800584a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	2b05      	cmp	r3, #5
 8005852:	d827      	bhi.n	80058a4 <UART_SetConfig+0x550>
 8005854:	a201      	add	r2, pc, #4	; (adr r2, 800585c <UART_SetConfig+0x508>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	08005875 	.word	0x08005875
 8005860:	0800587d 	.word	0x0800587d
 8005864:	08005885 	.word	0x08005885
 8005868:	0800588d 	.word	0x0800588d
 800586c:	08005895 	.word	0x08005895
 8005870:	0800589d 	.word	0x0800589d
 8005874:	2300      	movs	r3, #0
 8005876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587a:	e053      	b.n	8005924 <UART_SetConfig+0x5d0>
 800587c:	2304      	movs	r3, #4
 800587e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005882:	e04f      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005884:	2308      	movs	r3, #8
 8005886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588a:	e04b      	b.n	8005924 <UART_SetConfig+0x5d0>
 800588c:	2310      	movs	r3, #16
 800588e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005892:	e047      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005894:	2320      	movs	r3, #32
 8005896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800589a:	e043      	b.n	8005924 <UART_SetConfig+0x5d0>
 800589c:	2340      	movs	r3, #64	; 0x40
 800589e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a2:	e03f      	b.n	8005924 <UART_SetConfig+0x5d0>
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058aa:	bf00      	nop
 80058ac:	e03a      	b.n	8005924 <UART_SetConfig+0x5d0>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a43      	ldr	r2, [pc, #268]	; (80059c0 <UART_SetConfig+0x66c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d132      	bne.n	800591e <UART_SetConfig+0x5ca>
 80058b8:	4b3e      	ldr	r3, [pc, #248]	; (80059b4 <UART_SetConfig+0x660>)
 80058ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	d827      	bhi.n	8005914 <UART_SetConfig+0x5c0>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <UART_SetConfig+0x578>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	080058e5 	.word	0x080058e5
 80058d0:	080058ed 	.word	0x080058ed
 80058d4:	080058f5 	.word	0x080058f5
 80058d8:	080058fd 	.word	0x080058fd
 80058dc:	08005905 	.word	0x08005905
 80058e0:	0800590d 	.word	0x0800590d
 80058e4:	2302      	movs	r3, #2
 80058e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ea:	e01b      	b.n	8005924 <UART_SetConfig+0x5d0>
 80058ec:	2304      	movs	r3, #4
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f2:	e017      	b.n	8005924 <UART_SetConfig+0x5d0>
 80058f4:	2308      	movs	r3, #8
 80058f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fa:	e013      	b.n	8005924 <UART_SetConfig+0x5d0>
 80058fc:	2310      	movs	r3, #16
 80058fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005902:	e00f      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005904:	2320      	movs	r3, #32
 8005906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800590a:	e00b      	b.n	8005924 <UART_SetConfig+0x5d0>
 800590c:	2340      	movs	r3, #64	; 0x40
 800590e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005912:	e007      	b.n	8005924 <UART_SetConfig+0x5d0>
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800591a:	bf00      	nop
 800591c:	e002      	b.n	8005924 <UART_SetConfig+0x5d0>
 800591e:	2380      	movs	r3, #128	; 0x80
 8005920:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a25      	ldr	r2, [pc, #148]	; (80059c0 <UART_SetConfig+0x66c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	f040 80b8 	bne.w	8005aa0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005930:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005934:	2b08      	cmp	r3, #8
 8005936:	d019      	beq.n	800596c <UART_SetConfig+0x618>
 8005938:	2b08      	cmp	r3, #8
 800593a:	dc04      	bgt.n	8005946 <UART_SetConfig+0x5f2>
 800593c:	2b02      	cmp	r3, #2
 800593e:	d009      	beq.n	8005954 <UART_SetConfig+0x600>
 8005940:	2b04      	cmp	r3, #4
 8005942:	d00b      	beq.n	800595c <UART_SetConfig+0x608>
 8005944:	e042      	b.n	80059cc <UART_SetConfig+0x678>
 8005946:	2b20      	cmp	r3, #32
 8005948:	d02b      	beq.n	80059a2 <UART_SetConfig+0x64e>
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d02c      	beq.n	80059a8 <UART_SetConfig+0x654>
 800594e:	2b10      	cmp	r3, #16
 8005950:	d014      	beq.n	800597c <UART_SetConfig+0x628>
 8005952:	e03b      	b.n	80059cc <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005954:	f7fe fe72 	bl	800463c <HAL_RCCEx_GetD3PCLK1Freq>
 8005958:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800595a:	e03d      	b.n	80059d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800595c:	f107 0314 	add.w	r3, r7, #20
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe fe81 	bl	8004668 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800596a:	e035      	b.n	80059d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800596c:	f107 0308 	add.w	r3, r7, #8
 8005970:	4618      	mov	r0, r3
 8005972:	f7fe ffc5 	bl	8004900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800597a:	e02d      	b.n	80059d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800597c:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <UART_SetConfig+0x660>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d009      	beq.n	800599c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <UART_SetConfig+0x660>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	08db      	lsrs	r3, r3, #3
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <UART_SetConfig+0x670>)
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800599a:	e01d      	b.n	80059d8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800599c:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <UART_SetConfig+0x670>)
 800599e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059a0:	e01a      	b.n	80059d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <UART_SetConfig+0x674>)
 80059a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059a6:	e017      	b.n	80059d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059ae:	e013      	b.n	80059d8 <UART_SetConfig+0x684>
 80059b0:	40011400 	.word	0x40011400
 80059b4:	58024400 	.word	0x58024400
 80059b8:	40007800 	.word	0x40007800
 80059bc:	40007c00 	.word	0x40007c00
 80059c0:	58000c00 	.word	0x58000c00
 80059c4:	03d09000 	.word	0x03d09000
 80059c8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80059d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 824d 	beq.w	8005e7a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	4aad      	ldr	r2, [pc, #692]	; (8005c9c <UART_SetConfig+0x948>)
 80059e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ea:	461a      	mov	r2, r3
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f2:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	6a3a      	ldr	r2, [r7, #32]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d305      	bcc.n	8005a10 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d903      	bls.n	8005a18 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a16:	e230      	b.n	8005e7a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f04f 0100 	mov.w	r1, #0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	4a9d      	ldr	r2, [pc, #628]	; (8005c9c <UART_SetConfig+0x948>)
 8005a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f04f 0400 	mov.w	r4, #0
 8005a30:	461a      	mov	r2, r3
 8005a32:	4623      	mov	r3, r4
 8005a34:	f7fa fca4 	bl	8000380 <__aeabi_uldivmod>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4622      	mov	r2, r4
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	f04f 0400 	mov.w	r4, #0
 8005a48:	0214      	lsls	r4, r2, #8
 8005a4a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005a4e:	020b      	lsls	r3, r1, #8
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6852      	ldr	r2, [r2, #4]
 8005a54:	0852      	lsrs	r2, r2, #1
 8005a56:	4611      	mov	r1, r2
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	eb13 0b01 	adds.w	fp, r3, r1
 8005a60:	eb44 0c02 	adc.w	ip, r4, r2
 8005a64:	4658      	mov	r0, fp
 8005a66:	4661      	mov	r1, ip
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f04f 0400 	mov.w	r4, #0
 8005a70:	461a      	mov	r2, r3
 8005a72:	4623      	mov	r3, r4
 8005a74:	f7fa fc84 	bl	8000380 <__aeabi_uldivmod>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a84:	d308      	bcc.n	8005a98 <UART_SetConfig+0x744>
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a8c:	d204      	bcs.n	8005a98 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a94:	60da      	str	r2, [r3, #12]
 8005a96:	e1f0      	b.n	8005e7a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a9e:	e1ec      	b.n	8005e7a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa8:	f040 8100 	bne.w	8005cac <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005aac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	f200 80b7 	bhi.w	8005c24 <UART_SetConfig+0x8d0>
 8005ab6:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <UART_SetConfig+0x768>)
 8005ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abc:	08005bc1 	.word	0x08005bc1
 8005ac0:	08005bc9 	.word	0x08005bc9
 8005ac4:	08005c25 	.word	0x08005c25
 8005ac8:	08005c25 	.word	0x08005c25
 8005acc:	08005bd1 	.word	0x08005bd1
 8005ad0:	08005c25 	.word	0x08005c25
 8005ad4:	08005c25 	.word	0x08005c25
 8005ad8:	08005c25 	.word	0x08005c25
 8005adc:	08005be1 	.word	0x08005be1
 8005ae0:	08005c25 	.word	0x08005c25
 8005ae4:	08005c25 	.word	0x08005c25
 8005ae8:	08005c25 	.word	0x08005c25
 8005aec:	08005c25 	.word	0x08005c25
 8005af0:	08005c25 	.word	0x08005c25
 8005af4:	08005c25 	.word	0x08005c25
 8005af8:	08005c25 	.word	0x08005c25
 8005afc:	08005bf1 	.word	0x08005bf1
 8005b00:	08005c25 	.word	0x08005c25
 8005b04:	08005c25 	.word	0x08005c25
 8005b08:	08005c25 	.word	0x08005c25
 8005b0c:	08005c25 	.word	0x08005c25
 8005b10:	08005c25 	.word	0x08005c25
 8005b14:	08005c25 	.word	0x08005c25
 8005b18:	08005c25 	.word	0x08005c25
 8005b1c:	08005c25 	.word	0x08005c25
 8005b20:	08005c25 	.word	0x08005c25
 8005b24:	08005c25 	.word	0x08005c25
 8005b28:	08005c25 	.word	0x08005c25
 8005b2c:	08005c25 	.word	0x08005c25
 8005b30:	08005c25 	.word	0x08005c25
 8005b34:	08005c25 	.word	0x08005c25
 8005b38:	08005c25 	.word	0x08005c25
 8005b3c:	08005c17 	.word	0x08005c17
 8005b40:	08005c25 	.word	0x08005c25
 8005b44:	08005c25 	.word	0x08005c25
 8005b48:	08005c25 	.word	0x08005c25
 8005b4c:	08005c25 	.word	0x08005c25
 8005b50:	08005c25 	.word	0x08005c25
 8005b54:	08005c25 	.word	0x08005c25
 8005b58:	08005c25 	.word	0x08005c25
 8005b5c:	08005c25 	.word	0x08005c25
 8005b60:	08005c25 	.word	0x08005c25
 8005b64:	08005c25 	.word	0x08005c25
 8005b68:	08005c25 	.word	0x08005c25
 8005b6c:	08005c25 	.word	0x08005c25
 8005b70:	08005c25 	.word	0x08005c25
 8005b74:	08005c25 	.word	0x08005c25
 8005b78:	08005c25 	.word	0x08005c25
 8005b7c:	08005c25 	.word	0x08005c25
 8005b80:	08005c25 	.word	0x08005c25
 8005b84:	08005c25 	.word	0x08005c25
 8005b88:	08005c25 	.word	0x08005c25
 8005b8c:	08005c25 	.word	0x08005c25
 8005b90:	08005c25 	.word	0x08005c25
 8005b94:	08005c25 	.word	0x08005c25
 8005b98:	08005c25 	.word	0x08005c25
 8005b9c:	08005c25 	.word	0x08005c25
 8005ba0:	08005c25 	.word	0x08005c25
 8005ba4:	08005c25 	.word	0x08005c25
 8005ba8:	08005c25 	.word	0x08005c25
 8005bac:	08005c25 	.word	0x08005c25
 8005bb0:	08005c25 	.word	0x08005c25
 8005bb4:	08005c25 	.word	0x08005c25
 8005bb8:	08005c25 	.word	0x08005c25
 8005bbc:	08005c1d 	.word	0x08005c1d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc0:	f7fd fe22 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8005bc4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005bc6:	e033      	b.n	8005c30 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bc8:	f7fd fe34 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8005bcc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005bce:	e02f      	b.n	8005c30 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bd0:	f107 0314 	add.w	r3, r7, #20
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe fd47 	bl	8004668 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bde:	e027      	b.n	8005c30 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005be0:	f107 0308 	add.w	r3, r7, #8
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fe fe8b 	bl	8004900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bee:	e01f      	b.n	8005c30 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bf0:	4b2b      	ldr	r3, [pc, #172]	; (8005ca0 <UART_SetConfig+0x94c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bfc:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <UART_SetConfig+0x94c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	08db      	lsrs	r3, r3, #3
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	4a27      	ldr	r2, [pc, #156]	; (8005ca4 <UART_SetConfig+0x950>)
 8005c08:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c0e:	e00f      	b.n	8005c30 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005c10:	4b24      	ldr	r3, [pc, #144]	; (8005ca4 <UART_SetConfig+0x950>)
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c14:	e00c      	b.n	8005c30 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c16:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <UART_SetConfig+0x954>)
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c1a:	e009      	b.n	8005c30 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c22:	e005      	b.n	8005c30 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005c2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 8121 	beq.w	8005e7a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <UART_SetConfig+0x948>)
 8005c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c42:	461a      	mov	r2, r3
 8005c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c4a:	005a      	lsls	r2, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	441a      	add	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	2b0f      	cmp	r3, #15
 8005c64:	d916      	bls.n	8005c94 <UART_SetConfig+0x940>
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6c:	d212      	bcs.n	8005c94 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f023 030f 	bic.w	r3, r3, #15
 8005c76:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c86:	4313      	orrs	r3, r2
 8005c88:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	e0f2      	b.n	8005e7a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005c9a:	e0ee      	b.n	8005e7a <UART_SetConfig+0xb26>
 8005c9c:	08007868 	.word	0x08007868
 8005ca0:	58024400 	.word	0x58024400
 8005ca4:	03d09000 	.word	0x03d09000
 8005ca8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005cb0:	2b40      	cmp	r3, #64	; 0x40
 8005cb2:	f200 80b7 	bhi.w	8005e24 <UART_SetConfig+0xad0>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <UART_SetConfig+0x968>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005dc1 	.word	0x08005dc1
 8005cc0:	08005dc9 	.word	0x08005dc9
 8005cc4:	08005e25 	.word	0x08005e25
 8005cc8:	08005e25 	.word	0x08005e25
 8005ccc:	08005dd1 	.word	0x08005dd1
 8005cd0:	08005e25 	.word	0x08005e25
 8005cd4:	08005e25 	.word	0x08005e25
 8005cd8:	08005e25 	.word	0x08005e25
 8005cdc:	08005de1 	.word	0x08005de1
 8005ce0:	08005e25 	.word	0x08005e25
 8005ce4:	08005e25 	.word	0x08005e25
 8005ce8:	08005e25 	.word	0x08005e25
 8005cec:	08005e25 	.word	0x08005e25
 8005cf0:	08005e25 	.word	0x08005e25
 8005cf4:	08005e25 	.word	0x08005e25
 8005cf8:	08005e25 	.word	0x08005e25
 8005cfc:	08005df1 	.word	0x08005df1
 8005d00:	08005e25 	.word	0x08005e25
 8005d04:	08005e25 	.word	0x08005e25
 8005d08:	08005e25 	.word	0x08005e25
 8005d0c:	08005e25 	.word	0x08005e25
 8005d10:	08005e25 	.word	0x08005e25
 8005d14:	08005e25 	.word	0x08005e25
 8005d18:	08005e25 	.word	0x08005e25
 8005d1c:	08005e25 	.word	0x08005e25
 8005d20:	08005e25 	.word	0x08005e25
 8005d24:	08005e25 	.word	0x08005e25
 8005d28:	08005e25 	.word	0x08005e25
 8005d2c:	08005e25 	.word	0x08005e25
 8005d30:	08005e25 	.word	0x08005e25
 8005d34:	08005e25 	.word	0x08005e25
 8005d38:	08005e25 	.word	0x08005e25
 8005d3c:	08005e17 	.word	0x08005e17
 8005d40:	08005e25 	.word	0x08005e25
 8005d44:	08005e25 	.word	0x08005e25
 8005d48:	08005e25 	.word	0x08005e25
 8005d4c:	08005e25 	.word	0x08005e25
 8005d50:	08005e25 	.word	0x08005e25
 8005d54:	08005e25 	.word	0x08005e25
 8005d58:	08005e25 	.word	0x08005e25
 8005d5c:	08005e25 	.word	0x08005e25
 8005d60:	08005e25 	.word	0x08005e25
 8005d64:	08005e25 	.word	0x08005e25
 8005d68:	08005e25 	.word	0x08005e25
 8005d6c:	08005e25 	.word	0x08005e25
 8005d70:	08005e25 	.word	0x08005e25
 8005d74:	08005e25 	.word	0x08005e25
 8005d78:	08005e25 	.word	0x08005e25
 8005d7c:	08005e25 	.word	0x08005e25
 8005d80:	08005e25 	.word	0x08005e25
 8005d84:	08005e25 	.word	0x08005e25
 8005d88:	08005e25 	.word	0x08005e25
 8005d8c:	08005e25 	.word	0x08005e25
 8005d90:	08005e25 	.word	0x08005e25
 8005d94:	08005e25 	.word	0x08005e25
 8005d98:	08005e25 	.word	0x08005e25
 8005d9c:	08005e25 	.word	0x08005e25
 8005da0:	08005e25 	.word	0x08005e25
 8005da4:	08005e25 	.word	0x08005e25
 8005da8:	08005e25 	.word	0x08005e25
 8005dac:	08005e25 	.word	0x08005e25
 8005db0:	08005e25 	.word	0x08005e25
 8005db4:	08005e25 	.word	0x08005e25
 8005db8:	08005e25 	.word	0x08005e25
 8005dbc:	08005e1d 	.word	0x08005e1d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dc0:	f7fd fd22 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8005dc4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005dc6:	e033      	b.n	8005e30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dc8:	f7fd fd34 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8005dcc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005dce:	e02f      	b.n	8005e30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dd0:	f107 0314 	add.w	r3, r7, #20
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe fc47 	bl	8004668 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dde:	e027      	b.n	8005e30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005de0:	f107 0308 	add.w	r3, r7, #8
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe fd8b 	bl	8004900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dee:	e01f      	b.n	8005e30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005df0:	4b2c      	ldr	r3, [pc, #176]	; (8005ea4 <UART_SetConfig+0xb50>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d009      	beq.n	8005e10 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dfc:	4b29      	ldr	r3, [pc, #164]	; (8005ea4 <UART_SetConfig+0xb50>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	08db      	lsrs	r3, r3, #3
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	4a28      	ldr	r2, [pc, #160]	; (8005ea8 <UART_SetConfig+0xb54>)
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e0e:	e00f      	b.n	8005e30 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005e10:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <UART_SetConfig+0xb54>)
 8005e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e14:	e00c      	b.n	8005e30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e16:	4b25      	ldr	r3, [pc, #148]	; (8005eac <UART_SetConfig+0xb58>)
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e1a:	e009      	b.n	8005e30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e22:	e005      	b.n	8005e30 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005e2e:	bf00      	nop
    }

    if (pclk != 0U)
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d021      	beq.n	8005e7a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <UART_SetConfig+0xb5c>)
 8005e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e40:	461a      	mov	r2, r3
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	441a      	add	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	2b0f      	cmp	r3, #15
 8005e60:	d908      	bls.n	8005e74 <UART_SetConfig+0xb20>
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e68:	d204      	bcs.n	8005e74 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e70:	60da      	str	r2, [r3, #12]
 8005e72:	e002      	b.n	8005e7a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005e96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3738      	adds	r7, #56	; 0x38
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005ea4:	58024400 	.word	0x58024400
 8005ea8:	03d09000 	.word	0x03d09000
 8005eac:	003d0900 	.word	0x003d0900
 8005eb0:	08007868 	.word	0x08007868

08005eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01a      	beq.n	8005fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fb2:	d10a      	bne.n	8005fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	605a      	str	r2, [r3, #4]
  }
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006008:	f7fb f982 	bl	8001310 <HAL_GetTick>
 800600c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b08      	cmp	r3, #8
 800601a:	d10e      	bne.n	800603a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800601c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f82c 	bl	8006088 <UART_WaitOnFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e022      	b.n	8006080 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b04      	cmp	r3, #4
 8006046:	d10e      	bne.n	8006066 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f816 	bl	8006088 <UART_WaitOnFlagUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e00c      	b.n	8006080 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006098:	e062      	b.n	8006160 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d05e      	beq.n	8006160 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a2:	f7fb f935 	bl	8001310 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d302      	bcc.n	80060b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d11d      	bne.n	80060f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0201 	bic.w	r2, r2, #1
 80060d6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2220      	movs	r2, #32
 80060dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e045      	b.n	8006180 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d02e      	beq.n	8006160 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800610c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006110:	d126      	bne.n	8006160 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800611a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800612a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e00f      	b.n	8006180 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69da      	ldr	r2, [r3, #28]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	4013      	ands	r3, r2
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	429a      	cmp	r2, r3
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	429a      	cmp	r2, r3
 800617c:	d08d      	beq.n	800609a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800619e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6899      	ldr	r1, [r3, #8]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b08      	ldr	r3, [pc, #32]	; (80061cc <UART_EndRxTransfer+0x44>)
 80061ac:	400b      	ands	r3, r1
 80061ae:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	effffffe 	.word	0xeffffffe

080061d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7ff f8a6 	bl	8005340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006212:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff f882 	bl	800532c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_UARTEx_DisableFifoMode+0x16>
 800627e:	2302      	movs	r3, #2
 8006280:	e027      	b.n	80062d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2224      	movs	r2, #36	; 0x24
 800628e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0201 	bic.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e02d      	b.n	8006352 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2224      	movs	r2, #36	; 0x24
 8006302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0201 	bic.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f850 	bl	80063d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800636a:	2b01      	cmp	r3, #1
 800636c:	d101      	bne.n	8006372 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800636e:	2302      	movs	r3, #2
 8006370:	e02d      	b.n	80063ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2224      	movs	r2, #36	; 0x24
 800637e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f812 	bl	80063d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063d8:	b480      	push	{r7}
 80063da:	b089      	sub	sp, #36	; 0x24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80063e0:	4a2f      	ldr	r2, [pc, #188]	; (80064a0 <UARTEx_SetNbDataToProcess+0xc8>)
 80063e2:	f107 0314 	add.w	r3, r7, #20
 80063e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063ea:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80063ee:	4a2d      	ldr	r2, [pc, #180]	; (80064a4 <UARTEx_SetNbDataToProcess+0xcc>)
 80063f0:	f107 030c 	add.w	r3, r7, #12
 80063f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063f8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006400:	2b00      	cmp	r3, #0
 8006402:	d108      	bne.n	8006416 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006414:	e03d      	b.n	8006492 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006416:	2310      	movs	r3, #16
 8006418:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800641a:	2310      	movs	r3, #16
 800641c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	0e5b      	lsrs	r3, r3, #25
 8006426:	b2db      	uxtb	r3, r3
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	0f5b      	lsrs	r3, r3, #29
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800643e:	7fbb      	ldrb	r3, [r7, #30]
 8006440:	7f3a      	ldrb	r2, [r7, #28]
 8006442:	f107 0120 	add.w	r1, r7, #32
 8006446:	440a      	add	r2, r1
 8006448:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800644c:	fb02 f303 	mul.w	r3, r2, r3
 8006450:	7f3a      	ldrb	r2, [r7, #28]
 8006452:	f107 0120 	add.w	r1, r7, #32
 8006456:	440a      	add	r2, r1
 8006458:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800645c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006460:	b29a      	uxth	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006468:	7ffb      	ldrb	r3, [r7, #31]
 800646a:	7f7a      	ldrb	r2, [r7, #29]
 800646c:	f107 0120 	add.w	r1, r7, #32
 8006470:	440a      	add	r2, r1
 8006472:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006476:	fb02 f303 	mul.w	r3, r2, r3
 800647a:	7f7a      	ldrb	r2, [r7, #29]
 800647c:	f107 0120 	add.w	r1, r7, #32
 8006480:	440a      	add	r2, r1
 8006482:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006486:	fb93 f3f2 	sdiv	r3, r3, r2
 800648a:	b29a      	uxth	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006492:	bf00      	nop
 8006494:	3724      	adds	r7, #36	; 0x24
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	08007848 	.word	0x08007848
 80064a4:	08007850 	.word	0x08007850

080064a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064a8:	b084      	sub	sp, #16
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	f107 001c 	add.w	r0, r7, #28
 80064b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d120      	bne.n	8006502 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	4b25      	ldr	r3, [pc, #148]	; (8006568 <USB_CoreInit+0xc0>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d105      	bne.n	80064f6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa4c 	bl	8006994 <USB_CoreReset>
 80064fc:	4603      	mov	r3, r0
 80064fe:	73fb      	strb	r3, [r7, #15]
 8006500:	e01a      	b.n	8006538 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa40 	bl	8006994 <USB_CoreReset>
 8006514:	4603      	mov	r3, r0
 8006516:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	639a      	str	r2, [r3, #56]	; 0x38
 800652a:	e005      	b.n	8006538 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	2b01      	cmp	r3, #1
 800653c:	d10b      	bne.n	8006556 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f043 0206 	orr.w	r2, r3, #6
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f043 0220 	orr.w	r2, r3, #32
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006556:	7bfb      	ldrb	r3, [r7, #15]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006562:	b004      	add	sp, #16
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	ffbdffbf 	.word	0xffbdffbf

0800656c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f023 0201 	bic.w	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	460b      	mov	r3, r1
 8006598:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d106      	bne.n	80065ba <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	60da      	str	r2, [r3, #12]
 80065b8:	e00b      	b.n	80065d2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d106      	bne.n	80065ce <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	60da      	str	r2, [r3, #12]
 80065cc:	e001      	b.n	80065d2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e003      	b.n	80065da <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80065d2:	2032      	movs	r0, #50	; 0x32
 80065d4:	f7fa fea8 	bl	8001328 <HAL_Delay>

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065e4:	b084      	sub	sp, #16
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b086      	sub	sp, #24
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065fe:	2300      	movs	r3, #0
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	e009      	b.n	8006618 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	3340      	adds	r3, #64	; 0x40
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	2200      	movs	r2, #0
 8006610:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3301      	adds	r3, #1
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b0e      	cmp	r3, #14
 800661c:	d9f2      	bls.n	8006604 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800661e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d11c      	bne.n	800665e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006632:	f043 0302 	orr.w	r3, r3, #2
 8006636:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e005      	b.n	800666a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006670:	461a      	mov	r2, r3
 8006672:	2300      	movs	r3, #0
 8006674:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667c:	4619      	mov	r1, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006684:	461a      	mov	r2, r3
 8006686:	680b      	ldr	r3, [r1, #0]
 8006688:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	2b01      	cmp	r3, #1
 800668e:	d10c      	bne.n	80066aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d104      	bne.n	80066a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006696:	2100      	movs	r1, #0
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f949 	bl	8006930 <USB_SetDevSpeed>
 800669e:	e008      	b.n	80066b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066a0:	2101      	movs	r1, #1
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f944 	bl	8006930 <USB_SetDevSpeed>
 80066a8:	e003      	b.n	80066b2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066aa:	2103      	movs	r1, #3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f93f 	bl	8006930 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066b2:	2110      	movs	r1, #16
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f8f3 	bl	80068a0 <USB_FlushTxFifo>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f911 	bl	80068ec <USB_FlushRxFifo>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	461a      	mov	r2, r3
 80066dc:	2300      	movs	r3, #0
 80066de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e6:	461a      	mov	r2, r3
 80066e8:	2300      	movs	r3, #0
 80066ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f2:	461a      	mov	r2, r3
 80066f4:	2300      	movs	r3, #0
 80066f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066f8:	2300      	movs	r3, #0
 80066fa:	613b      	str	r3, [r7, #16]
 80066fc:	e043      	b.n	8006786 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006710:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006714:	d118      	bne.n	8006748 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006728:	461a      	mov	r2, r3
 800672a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	e013      	b.n	800675a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673e:	461a      	mov	r2, r3
 8006740:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	e008      	b.n	800675a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006754:	461a      	mov	r2, r3
 8006756:	2300      	movs	r3, #0
 8006758:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006766:	461a      	mov	r2, r3
 8006768:	2300      	movs	r3, #0
 800676a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006778:	461a      	mov	r2, r3
 800677a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800677e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	3301      	adds	r3, #1
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	429a      	cmp	r2, r3
 800678c:	d3b7      	bcc.n	80066fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800678e:	2300      	movs	r3, #0
 8006790:	613b      	str	r3, [r7, #16]
 8006792:	e043      	b.n	800681c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067aa:	d118      	bne.n	80067de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	461a      	mov	r2, r3
 80067c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	e013      	b.n	80067f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	461a      	mov	r2, r3
 80067d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	e008      	b.n	80067f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ea:	461a      	mov	r2, r3
 80067ec:	2300      	movs	r3, #0
 80067ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fc:	461a      	mov	r2, r3
 80067fe:	2300      	movs	r3, #0
 8006800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4413      	add	r3, r2
 800680a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680e:	461a      	mov	r2, r3
 8006810:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006814:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	3301      	adds	r3, #1
 800681a:	613b      	str	r3, [r7, #16]
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	429a      	cmp	r2, r3
 8006822:	d3b7      	bcc.n	8006794 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006836:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006844:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	f043 0210 	orr.w	r2, r3, #16
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699a      	ldr	r2, [r3, #24]
 800685c:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <USB_DevInit+0x2b4>)
 800685e:	4313      	orrs	r3, r2
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	f043 0208 	orr.w	r2, r3, #8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006878:	2b01      	cmp	r3, #1
 800687a:	d105      	bne.n	8006888 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	4b06      	ldr	r3, [pc, #24]	; (800689c <USB_DevInit+0x2b8>)
 8006882:	4313      	orrs	r3, r2
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006888:	7dfb      	ldrb	r3, [r7, #23]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006894:	b004      	add	sp, #16
 8006896:	4770      	bx	lr
 8006898:	803c3800 	.word	0x803c3800
 800689c:	40000004 	.word	0x40000004

080068a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	019b      	lsls	r3, r3, #6
 80068b2:	f043 0220 	orr.w	r2, r3, #32
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3301      	adds	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4a09      	ldr	r2, [pc, #36]	; (80068e8 <USB_FlushTxFifo+0x48>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d901      	bls.n	80068cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e006      	b.n	80068da <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f003 0320 	and.w	r3, r3, #32
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d0f0      	beq.n	80068ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	00030d40 	.word	0x00030d40

080068ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2210      	movs	r2, #16
 80068fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4a09      	ldr	r2, [pc, #36]	; (800692c <USB_FlushRxFifo+0x40>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d901      	bls.n	8006910 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e006      	b.n	800691e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b10      	cmp	r3, #16
 800691a:	d0f0      	beq.n	80068fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	00030d40 	.word	0x00030d40

08006930 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	68f9      	ldr	r1, [r7, #12]
 800694c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006950:	4313      	orrs	r3, r2
 8006952:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800697c:	f043 0302 	orr.w	r3, r3, #2
 8006980:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006982:	2003      	movs	r0, #3
 8006984:	f7fa fcd0 	bl	8001328 <HAL_Delay>

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4a13      	ldr	r2, [pc, #76]	; (80069f8 <USB_CoreReset+0x64>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e01b      	b.n	80069ea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	daf2      	bge.n	80069a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f043 0201 	orr.w	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3301      	adds	r3, #1
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4a09      	ldr	r2, [pc, #36]	; (80069f8 <USB_CoreReset+0x64>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d901      	bls.n	80069dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e006      	b.n	80069ea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d0f0      	beq.n	80069ca <USB_CoreReset+0x36>

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	00030d40 	.word	0x00030d40

080069fc <__errno>:
 80069fc:	4b01      	ldr	r3, [pc, #4]	; (8006a04 <__errno+0x8>)
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	24000010 	.word	0x24000010

08006a08 <__libc_init_array>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	4e0d      	ldr	r6, [pc, #52]	; (8006a40 <__libc_init_array+0x38>)
 8006a0c:	4c0d      	ldr	r4, [pc, #52]	; (8006a44 <__libc_init_array+0x3c>)
 8006a0e:	1ba4      	subs	r4, r4, r6
 8006a10:	10a4      	asrs	r4, r4, #2
 8006a12:	2500      	movs	r5, #0
 8006a14:	42a5      	cmp	r5, r4
 8006a16:	d109      	bne.n	8006a2c <__libc_init_array+0x24>
 8006a18:	4e0b      	ldr	r6, [pc, #44]	; (8006a48 <__libc_init_array+0x40>)
 8006a1a:	4c0c      	ldr	r4, [pc, #48]	; (8006a4c <__libc_init_array+0x44>)
 8006a1c:	f000 ff04 	bl	8007828 <_init>
 8006a20:	1ba4      	subs	r4, r4, r6
 8006a22:	10a4      	asrs	r4, r4, #2
 8006a24:	2500      	movs	r5, #0
 8006a26:	42a5      	cmp	r5, r4
 8006a28:	d105      	bne.n	8006a36 <__libc_init_array+0x2e>
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a30:	4798      	blx	r3
 8006a32:	3501      	adds	r5, #1
 8006a34:	e7ee      	b.n	8006a14 <__libc_init_array+0xc>
 8006a36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a3a:	4798      	blx	r3
 8006a3c:	3501      	adds	r5, #1
 8006a3e:	e7f2      	b.n	8006a26 <__libc_init_array+0x1e>
 8006a40:	08007920 	.word	0x08007920
 8006a44:	08007920 	.word	0x08007920
 8006a48:	08007920 	.word	0x08007920
 8006a4c:	08007924 	.word	0x08007924

08006a50 <memset>:
 8006a50:	4402      	add	r2, r0
 8006a52:	4603      	mov	r3, r0
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d100      	bne.n	8006a5a <memset+0xa>
 8006a58:	4770      	bx	lr
 8006a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5e:	e7f9      	b.n	8006a54 <memset+0x4>

08006a60 <iprintf>:
 8006a60:	b40f      	push	{r0, r1, r2, r3}
 8006a62:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <iprintf+0x2c>)
 8006a64:	b513      	push	{r0, r1, r4, lr}
 8006a66:	681c      	ldr	r4, [r3, #0]
 8006a68:	b124      	cbz	r4, 8006a74 <iprintf+0x14>
 8006a6a:	69a3      	ldr	r3, [r4, #24]
 8006a6c:	b913      	cbnz	r3, 8006a74 <iprintf+0x14>
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 f84e 	bl	8006b10 <__sinit>
 8006a74:	ab05      	add	r3, sp, #20
 8006a76:	9a04      	ldr	r2, [sp, #16]
 8006a78:	68a1      	ldr	r1, [r4, #8]
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 f955 	bl	8006d2c <_vfiprintf_r>
 8006a82:	b002      	add	sp, #8
 8006a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a88:	b004      	add	sp, #16
 8006a8a:	4770      	bx	lr
 8006a8c:	24000010 	.word	0x24000010

08006a90 <std>:
 8006a90:	2300      	movs	r3, #0
 8006a92:	b510      	push	{r4, lr}
 8006a94:	4604      	mov	r4, r0
 8006a96:	e9c0 3300 	strd	r3, r3, [r0]
 8006a9a:	6083      	str	r3, [r0, #8]
 8006a9c:	8181      	strh	r1, [r0, #12]
 8006a9e:	6643      	str	r3, [r0, #100]	; 0x64
 8006aa0:	81c2      	strh	r2, [r0, #14]
 8006aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aa6:	6183      	str	r3, [r0, #24]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	2208      	movs	r2, #8
 8006aac:	305c      	adds	r0, #92	; 0x5c
 8006aae:	f7ff ffcf 	bl	8006a50 <memset>
 8006ab2:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <std+0x38>)
 8006ab4:	6263      	str	r3, [r4, #36]	; 0x24
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <std+0x3c>)
 8006ab8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <std+0x40>)
 8006abc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <std+0x44>)
 8006ac0:	6224      	str	r4, [r4, #32]
 8006ac2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ac4:	bd10      	pop	{r4, pc}
 8006ac6:	bf00      	nop
 8006ac8:	08007289 	.word	0x08007289
 8006acc:	080072ab 	.word	0x080072ab
 8006ad0:	080072e3 	.word	0x080072e3
 8006ad4:	08007307 	.word	0x08007307

08006ad8 <_cleanup_r>:
 8006ad8:	4901      	ldr	r1, [pc, #4]	; (8006ae0 <_cleanup_r+0x8>)
 8006ada:	f000 b885 	b.w	8006be8 <_fwalk_reent>
 8006ade:	bf00      	nop
 8006ae0:	080075e1 	.word	0x080075e1

08006ae4 <__sfmoreglue>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	1e4a      	subs	r2, r1, #1
 8006ae8:	2568      	movs	r5, #104	; 0x68
 8006aea:	4355      	muls	r5, r2
 8006aec:	460e      	mov	r6, r1
 8006aee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006af2:	f000 f897 	bl	8006c24 <_malloc_r>
 8006af6:	4604      	mov	r4, r0
 8006af8:	b140      	cbz	r0, 8006b0c <__sfmoreglue+0x28>
 8006afa:	2100      	movs	r1, #0
 8006afc:	e9c0 1600 	strd	r1, r6, [r0]
 8006b00:	300c      	adds	r0, #12
 8006b02:	60a0      	str	r0, [r4, #8]
 8006b04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b08:	f7ff ffa2 	bl	8006a50 <memset>
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}

08006b10 <__sinit>:
 8006b10:	6983      	ldr	r3, [r0, #24]
 8006b12:	b510      	push	{r4, lr}
 8006b14:	4604      	mov	r4, r0
 8006b16:	bb33      	cbnz	r3, 8006b66 <__sinit+0x56>
 8006b18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006b1c:	6503      	str	r3, [r0, #80]	; 0x50
 8006b1e:	4b12      	ldr	r3, [pc, #72]	; (8006b68 <__sinit+0x58>)
 8006b20:	4a12      	ldr	r2, [pc, #72]	; (8006b6c <__sinit+0x5c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6282      	str	r2, [r0, #40]	; 0x28
 8006b26:	4298      	cmp	r0, r3
 8006b28:	bf04      	itt	eq
 8006b2a:	2301      	moveq	r3, #1
 8006b2c:	6183      	streq	r3, [r0, #24]
 8006b2e:	f000 f81f 	bl	8006b70 <__sfp>
 8006b32:	6060      	str	r0, [r4, #4]
 8006b34:	4620      	mov	r0, r4
 8006b36:	f000 f81b 	bl	8006b70 <__sfp>
 8006b3a:	60a0      	str	r0, [r4, #8]
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 f817 	bl	8006b70 <__sfp>
 8006b42:	2200      	movs	r2, #0
 8006b44:	60e0      	str	r0, [r4, #12]
 8006b46:	2104      	movs	r1, #4
 8006b48:	6860      	ldr	r0, [r4, #4]
 8006b4a:	f7ff ffa1 	bl	8006a90 <std>
 8006b4e:	2201      	movs	r2, #1
 8006b50:	2109      	movs	r1, #9
 8006b52:	68a0      	ldr	r0, [r4, #8]
 8006b54:	f7ff ff9c 	bl	8006a90 <std>
 8006b58:	2202      	movs	r2, #2
 8006b5a:	2112      	movs	r1, #18
 8006b5c:	68e0      	ldr	r0, [r4, #12]
 8006b5e:	f7ff ff97 	bl	8006a90 <std>
 8006b62:	2301      	movs	r3, #1
 8006b64:	61a3      	str	r3, [r4, #24]
 8006b66:	bd10      	pop	{r4, pc}
 8006b68:	08007880 	.word	0x08007880
 8006b6c:	08006ad9 	.word	0x08006ad9

08006b70 <__sfp>:
 8006b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b72:	4b1b      	ldr	r3, [pc, #108]	; (8006be0 <__sfp+0x70>)
 8006b74:	681e      	ldr	r6, [r3, #0]
 8006b76:	69b3      	ldr	r3, [r6, #24]
 8006b78:	4607      	mov	r7, r0
 8006b7a:	b913      	cbnz	r3, 8006b82 <__sfp+0x12>
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f7ff ffc7 	bl	8006b10 <__sinit>
 8006b82:	3648      	adds	r6, #72	; 0x48
 8006b84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	d503      	bpl.n	8006b94 <__sfp+0x24>
 8006b8c:	6833      	ldr	r3, [r6, #0]
 8006b8e:	b133      	cbz	r3, 8006b9e <__sfp+0x2e>
 8006b90:	6836      	ldr	r6, [r6, #0]
 8006b92:	e7f7      	b.n	8006b84 <__sfp+0x14>
 8006b94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b98:	b16d      	cbz	r5, 8006bb6 <__sfp+0x46>
 8006b9a:	3468      	adds	r4, #104	; 0x68
 8006b9c:	e7f4      	b.n	8006b88 <__sfp+0x18>
 8006b9e:	2104      	movs	r1, #4
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	f7ff ff9f 	bl	8006ae4 <__sfmoreglue>
 8006ba6:	6030      	str	r0, [r6, #0]
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d1f1      	bne.n	8006b90 <__sfp+0x20>
 8006bac:	230c      	movs	r3, #12
 8006bae:	603b      	str	r3, [r7, #0]
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <__sfp+0x74>)
 8006bb8:	6665      	str	r5, [r4, #100]	; 0x64
 8006bba:	e9c4 5500 	strd	r5, r5, [r4]
 8006bbe:	60a5      	str	r5, [r4, #8]
 8006bc0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006bc4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	4629      	mov	r1, r5
 8006bcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bd0:	f7ff ff3e 	bl	8006a50 <memset>
 8006bd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bdc:	e7e9      	b.n	8006bb2 <__sfp+0x42>
 8006bde:	bf00      	nop
 8006be0:	08007880 	.word	0x08007880
 8006be4:	ffff0001 	.word	0xffff0001

08006be8 <_fwalk_reent>:
 8006be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bec:	4680      	mov	r8, r0
 8006bee:	4689      	mov	r9, r1
 8006bf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bf4:	2600      	movs	r6, #0
 8006bf6:	b914      	cbnz	r4, 8006bfe <_fwalk_reent+0x16>
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bfe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006c02:	3f01      	subs	r7, #1
 8006c04:	d501      	bpl.n	8006c0a <_fwalk_reent+0x22>
 8006c06:	6824      	ldr	r4, [r4, #0]
 8006c08:	e7f5      	b.n	8006bf6 <_fwalk_reent+0xe>
 8006c0a:	89ab      	ldrh	r3, [r5, #12]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d907      	bls.n	8006c20 <_fwalk_reent+0x38>
 8006c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c14:	3301      	adds	r3, #1
 8006c16:	d003      	beq.n	8006c20 <_fwalk_reent+0x38>
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	47c8      	blx	r9
 8006c1e:	4306      	orrs	r6, r0
 8006c20:	3568      	adds	r5, #104	; 0x68
 8006c22:	e7ee      	b.n	8006c02 <_fwalk_reent+0x1a>

08006c24 <_malloc_r>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	1ccd      	adds	r5, r1, #3
 8006c28:	f025 0503 	bic.w	r5, r5, #3
 8006c2c:	3508      	adds	r5, #8
 8006c2e:	2d0c      	cmp	r5, #12
 8006c30:	bf38      	it	cc
 8006c32:	250c      	movcc	r5, #12
 8006c34:	2d00      	cmp	r5, #0
 8006c36:	4606      	mov	r6, r0
 8006c38:	db01      	blt.n	8006c3e <_malloc_r+0x1a>
 8006c3a:	42a9      	cmp	r1, r5
 8006c3c:	d903      	bls.n	8006c46 <_malloc_r+0x22>
 8006c3e:	230c      	movs	r3, #12
 8006c40:	6033      	str	r3, [r6, #0]
 8006c42:	2000      	movs	r0, #0
 8006c44:	bd70      	pop	{r4, r5, r6, pc}
 8006c46:	f000 fd6b 	bl	8007720 <__malloc_lock>
 8006c4a:	4a21      	ldr	r2, [pc, #132]	; (8006cd0 <_malloc_r+0xac>)
 8006c4c:	6814      	ldr	r4, [r2, #0]
 8006c4e:	4621      	mov	r1, r4
 8006c50:	b991      	cbnz	r1, 8006c78 <_malloc_r+0x54>
 8006c52:	4c20      	ldr	r4, [pc, #128]	; (8006cd4 <_malloc_r+0xb0>)
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	b91b      	cbnz	r3, 8006c60 <_malloc_r+0x3c>
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f000 fb05 	bl	8007268 <_sbrk_r>
 8006c5e:	6020      	str	r0, [r4, #0]
 8006c60:	4629      	mov	r1, r5
 8006c62:	4630      	mov	r0, r6
 8006c64:	f000 fb00 	bl	8007268 <_sbrk_r>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	d124      	bne.n	8006cb6 <_malloc_r+0x92>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	6033      	str	r3, [r6, #0]
 8006c70:	4630      	mov	r0, r6
 8006c72:	f000 fd56 	bl	8007722 <__malloc_unlock>
 8006c76:	e7e4      	b.n	8006c42 <_malloc_r+0x1e>
 8006c78:	680b      	ldr	r3, [r1, #0]
 8006c7a:	1b5b      	subs	r3, r3, r5
 8006c7c:	d418      	bmi.n	8006cb0 <_malloc_r+0x8c>
 8006c7e:	2b0b      	cmp	r3, #11
 8006c80:	d90f      	bls.n	8006ca2 <_malloc_r+0x7e>
 8006c82:	600b      	str	r3, [r1, #0]
 8006c84:	50cd      	str	r5, [r1, r3]
 8006c86:	18cc      	adds	r4, r1, r3
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f000 fd4a 	bl	8007722 <__malloc_unlock>
 8006c8e:	f104 000b 	add.w	r0, r4, #11
 8006c92:	1d23      	adds	r3, r4, #4
 8006c94:	f020 0007 	bic.w	r0, r0, #7
 8006c98:	1ac3      	subs	r3, r0, r3
 8006c9a:	d0d3      	beq.n	8006c44 <_malloc_r+0x20>
 8006c9c:	425a      	negs	r2, r3
 8006c9e:	50e2      	str	r2, [r4, r3]
 8006ca0:	e7d0      	b.n	8006c44 <_malloc_r+0x20>
 8006ca2:	428c      	cmp	r4, r1
 8006ca4:	684b      	ldr	r3, [r1, #4]
 8006ca6:	bf16      	itet	ne
 8006ca8:	6063      	strne	r3, [r4, #4]
 8006caa:	6013      	streq	r3, [r2, #0]
 8006cac:	460c      	movne	r4, r1
 8006cae:	e7eb      	b.n	8006c88 <_malloc_r+0x64>
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	6849      	ldr	r1, [r1, #4]
 8006cb4:	e7cc      	b.n	8006c50 <_malloc_r+0x2c>
 8006cb6:	1cc4      	adds	r4, r0, #3
 8006cb8:	f024 0403 	bic.w	r4, r4, #3
 8006cbc:	42a0      	cmp	r0, r4
 8006cbe:	d005      	beq.n	8006ccc <_malloc_r+0xa8>
 8006cc0:	1a21      	subs	r1, r4, r0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f000 fad0 	bl	8007268 <_sbrk_r>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d0cf      	beq.n	8006c6c <_malloc_r+0x48>
 8006ccc:	6025      	str	r5, [r4, #0]
 8006cce:	e7db      	b.n	8006c88 <_malloc_r+0x64>
 8006cd0:	24000154 	.word	0x24000154
 8006cd4:	24000158 	.word	0x24000158

08006cd8 <__sfputc_r>:
 8006cd8:	6893      	ldr	r3, [r2, #8]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	b410      	push	{r4}
 8006ce0:	6093      	str	r3, [r2, #8]
 8006ce2:	da08      	bge.n	8006cf6 <__sfputc_r+0x1e>
 8006ce4:	6994      	ldr	r4, [r2, #24]
 8006ce6:	42a3      	cmp	r3, r4
 8006ce8:	db01      	blt.n	8006cee <__sfputc_r+0x16>
 8006cea:	290a      	cmp	r1, #10
 8006cec:	d103      	bne.n	8006cf6 <__sfputc_r+0x1e>
 8006cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cf2:	f000 bb0d 	b.w	8007310 <__swbuf_r>
 8006cf6:	6813      	ldr	r3, [r2, #0]
 8006cf8:	1c58      	adds	r0, r3, #1
 8006cfa:	6010      	str	r0, [r2, #0]
 8006cfc:	7019      	strb	r1, [r3, #0]
 8006cfe:	4608      	mov	r0, r1
 8006d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <__sfputs_r>:
 8006d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d08:	4606      	mov	r6, r0
 8006d0a:	460f      	mov	r7, r1
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	18d5      	adds	r5, r2, r3
 8006d10:	42ac      	cmp	r4, r5
 8006d12:	d101      	bne.n	8006d18 <__sfputs_r+0x12>
 8006d14:	2000      	movs	r0, #0
 8006d16:	e007      	b.n	8006d28 <__sfputs_r+0x22>
 8006d18:	463a      	mov	r2, r7
 8006d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f7ff ffda 	bl	8006cd8 <__sfputc_r>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d1f3      	bne.n	8006d10 <__sfputs_r+0xa>
 8006d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d2c <_vfiprintf_r>:
 8006d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	460c      	mov	r4, r1
 8006d32:	b09d      	sub	sp, #116	; 0x74
 8006d34:	4617      	mov	r7, r2
 8006d36:	461d      	mov	r5, r3
 8006d38:	4606      	mov	r6, r0
 8006d3a:	b118      	cbz	r0, 8006d44 <_vfiprintf_r+0x18>
 8006d3c:	6983      	ldr	r3, [r0, #24]
 8006d3e:	b90b      	cbnz	r3, 8006d44 <_vfiprintf_r+0x18>
 8006d40:	f7ff fee6 	bl	8006b10 <__sinit>
 8006d44:	4b7c      	ldr	r3, [pc, #496]	; (8006f38 <_vfiprintf_r+0x20c>)
 8006d46:	429c      	cmp	r4, r3
 8006d48:	d158      	bne.n	8006dfc <_vfiprintf_r+0xd0>
 8006d4a:	6874      	ldr	r4, [r6, #4]
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	0718      	lsls	r0, r3, #28
 8006d50:	d55e      	bpl.n	8006e10 <_vfiprintf_r+0xe4>
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d05b      	beq.n	8006e10 <_vfiprintf_r+0xe4>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d5c:	2320      	movs	r3, #32
 8006d5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d62:	2330      	movs	r3, #48	; 0x30
 8006d64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d68:	9503      	str	r5, [sp, #12]
 8006d6a:	f04f 0b01 	mov.w	fp, #1
 8006d6e:	46b8      	mov	r8, r7
 8006d70:	4645      	mov	r5, r8
 8006d72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d76:	b10b      	cbz	r3, 8006d7c <_vfiprintf_r+0x50>
 8006d78:	2b25      	cmp	r3, #37	; 0x25
 8006d7a:	d154      	bne.n	8006e26 <_vfiprintf_r+0xfa>
 8006d7c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006d80:	d00b      	beq.n	8006d9a <_vfiprintf_r+0x6e>
 8006d82:	4653      	mov	r3, sl
 8006d84:	463a      	mov	r2, r7
 8006d86:	4621      	mov	r1, r4
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f7ff ffbc 	bl	8006d06 <__sfputs_r>
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f000 80c2 	beq.w	8006f18 <_vfiprintf_r+0x1ec>
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	4453      	add	r3, sl
 8006d98:	9309      	str	r3, [sp, #36]	; 0x24
 8006d9a:	f898 3000 	ldrb.w	r3, [r8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 80ba 	beq.w	8006f18 <_vfiprintf_r+0x1ec>
 8006da4:	2300      	movs	r3, #0
 8006da6:	f04f 32ff 	mov.w	r2, #4294967295
 8006daa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	9307      	str	r3, [sp, #28]
 8006db2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006db6:	931a      	str	r3, [sp, #104]	; 0x68
 8006db8:	46a8      	mov	r8, r5
 8006dba:	2205      	movs	r2, #5
 8006dbc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006dc0:	485e      	ldr	r0, [pc, #376]	; (8006f3c <_vfiprintf_r+0x210>)
 8006dc2:	f7f9 fa8d 	bl	80002e0 <memchr>
 8006dc6:	9b04      	ldr	r3, [sp, #16]
 8006dc8:	bb78      	cbnz	r0, 8006e2a <_vfiprintf_r+0xfe>
 8006dca:	06d9      	lsls	r1, r3, #27
 8006dcc:	bf44      	itt	mi
 8006dce:	2220      	movmi	r2, #32
 8006dd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006dd4:	071a      	lsls	r2, r3, #28
 8006dd6:	bf44      	itt	mi
 8006dd8:	222b      	movmi	r2, #43	; 0x2b
 8006dda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006dde:	782a      	ldrb	r2, [r5, #0]
 8006de0:	2a2a      	cmp	r2, #42	; 0x2a
 8006de2:	d02a      	beq.n	8006e3a <_vfiprintf_r+0x10e>
 8006de4:	9a07      	ldr	r2, [sp, #28]
 8006de6:	46a8      	mov	r8, r5
 8006de8:	2000      	movs	r0, #0
 8006dea:	250a      	movs	r5, #10
 8006dec:	4641      	mov	r1, r8
 8006dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df2:	3b30      	subs	r3, #48	; 0x30
 8006df4:	2b09      	cmp	r3, #9
 8006df6:	d969      	bls.n	8006ecc <_vfiprintf_r+0x1a0>
 8006df8:	b360      	cbz	r0, 8006e54 <_vfiprintf_r+0x128>
 8006dfa:	e024      	b.n	8006e46 <_vfiprintf_r+0x11a>
 8006dfc:	4b50      	ldr	r3, [pc, #320]	; (8006f40 <_vfiprintf_r+0x214>)
 8006dfe:	429c      	cmp	r4, r3
 8006e00:	d101      	bne.n	8006e06 <_vfiprintf_r+0xda>
 8006e02:	68b4      	ldr	r4, [r6, #8]
 8006e04:	e7a2      	b.n	8006d4c <_vfiprintf_r+0x20>
 8006e06:	4b4f      	ldr	r3, [pc, #316]	; (8006f44 <_vfiprintf_r+0x218>)
 8006e08:	429c      	cmp	r4, r3
 8006e0a:	bf08      	it	eq
 8006e0c:	68f4      	ldreq	r4, [r6, #12]
 8006e0e:	e79d      	b.n	8006d4c <_vfiprintf_r+0x20>
 8006e10:	4621      	mov	r1, r4
 8006e12:	4630      	mov	r0, r6
 8006e14:	f000 fae0 	bl	80073d8 <__swsetup_r>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d09d      	beq.n	8006d58 <_vfiprintf_r+0x2c>
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e20:	b01d      	add	sp, #116	; 0x74
 8006e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e26:	46a8      	mov	r8, r5
 8006e28:	e7a2      	b.n	8006d70 <_vfiprintf_r+0x44>
 8006e2a:	4a44      	ldr	r2, [pc, #272]	; (8006f3c <_vfiprintf_r+0x210>)
 8006e2c:	1a80      	subs	r0, r0, r2
 8006e2e:	fa0b f000 	lsl.w	r0, fp, r0
 8006e32:	4318      	orrs	r0, r3
 8006e34:	9004      	str	r0, [sp, #16]
 8006e36:	4645      	mov	r5, r8
 8006e38:	e7be      	b.n	8006db8 <_vfiprintf_r+0x8c>
 8006e3a:	9a03      	ldr	r2, [sp, #12]
 8006e3c:	1d11      	adds	r1, r2, #4
 8006e3e:	6812      	ldr	r2, [r2, #0]
 8006e40:	9103      	str	r1, [sp, #12]
 8006e42:	2a00      	cmp	r2, #0
 8006e44:	db01      	blt.n	8006e4a <_vfiprintf_r+0x11e>
 8006e46:	9207      	str	r2, [sp, #28]
 8006e48:	e004      	b.n	8006e54 <_vfiprintf_r+0x128>
 8006e4a:	4252      	negs	r2, r2
 8006e4c:	f043 0302 	orr.w	r3, r3, #2
 8006e50:	9207      	str	r2, [sp, #28]
 8006e52:	9304      	str	r3, [sp, #16]
 8006e54:	f898 3000 	ldrb.w	r3, [r8]
 8006e58:	2b2e      	cmp	r3, #46	; 0x2e
 8006e5a:	d10e      	bne.n	8006e7a <_vfiprintf_r+0x14e>
 8006e5c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006e60:	2b2a      	cmp	r3, #42	; 0x2a
 8006e62:	d138      	bne.n	8006ed6 <_vfiprintf_r+0x1aa>
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	1d1a      	adds	r2, r3, #4
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	9203      	str	r2, [sp, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	bfb8      	it	lt
 8006e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e74:	f108 0802 	add.w	r8, r8, #2
 8006e78:	9305      	str	r3, [sp, #20]
 8006e7a:	4d33      	ldr	r5, [pc, #204]	; (8006f48 <_vfiprintf_r+0x21c>)
 8006e7c:	f898 1000 	ldrb.w	r1, [r8]
 8006e80:	2203      	movs	r2, #3
 8006e82:	4628      	mov	r0, r5
 8006e84:	f7f9 fa2c 	bl	80002e0 <memchr>
 8006e88:	b140      	cbz	r0, 8006e9c <_vfiprintf_r+0x170>
 8006e8a:	2340      	movs	r3, #64	; 0x40
 8006e8c:	1b40      	subs	r0, r0, r5
 8006e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8006e92:	9b04      	ldr	r3, [sp, #16]
 8006e94:	4303      	orrs	r3, r0
 8006e96:	f108 0801 	add.w	r8, r8, #1
 8006e9a:	9304      	str	r3, [sp, #16]
 8006e9c:	f898 1000 	ldrb.w	r1, [r8]
 8006ea0:	482a      	ldr	r0, [pc, #168]	; (8006f4c <_vfiprintf_r+0x220>)
 8006ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ea6:	2206      	movs	r2, #6
 8006ea8:	f108 0701 	add.w	r7, r8, #1
 8006eac:	f7f9 fa18 	bl	80002e0 <memchr>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d037      	beq.n	8006f24 <_vfiprintf_r+0x1f8>
 8006eb4:	4b26      	ldr	r3, [pc, #152]	; (8006f50 <_vfiprintf_r+0x224>)
 8006eb6:	bb1b      	cbnz	r3, 8006f00 <_vfiprintf_r+0x1d4>
 8006eb8:	9b03      	ldr	r3, [sp, #12]
 8006eba:	3307      	adds	r3, #7
 8006ebc:	f023 0307 	bic.w	r3, r3, #7
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	9303      	str	r3, [sp, #12]
 8006ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec6:	444b      	add	r3, r9
 8006ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eca:	e750      	b.n	8006d6e <_vfiprintf_r+0x42>
 8006ecc:	fb05 3202 	mla	r2, r5, r2, r3
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	4688      	mov	r8, r1
 8006ed4:	e78a      	b.n	8006dec <_vfiprintf_r+0xc0>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f108 0801 	add.w	r8, r8, #1
 8006edc:	9305      	str	r3, [sp, #20]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	250a      	movs	r5, #10
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ee8:	3a30      	subs	r2, #48	; 0x30
 8006eea:	2a09      	cmp	r2, #9
 8006eec:	d903      	bls.n	8006ef6 <_vfiprintf_r+0x1ca>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0c3      	beq.n	8006e7a <_vfiprintf_r+0x14e>
 8006ef2:	9105      	str	r1, [sp, #20]
 8006ef4:	e7c1      	b.n	8006e7a <_vfiprintf_r+0x14e>
 8006ef6:	fb05 2101 	mla	r1, r5, r1, r2
 8006efa:	2301      	movs	r3, #1
 8006efc:	4680      	mov	r8, r0
 8006efe:	e7f0      	b.n	8006ee2 <_vfiprintf_r+0x1b6>
 8006f00:	ab03      	add	r3, sp, #12
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	4622      	mov	r2, r4
 8006f06:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <_vfiprintf_r+0x228>)
 8006f08:	a904      	add	r1, sp, #16
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f3af 8000 	nop.w
 8006f10:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f14:	4681      	mov	r9, r0
 8006f16:	d1d5      	bne.n	8006ec4 <_vfiprintf_r+0x198>
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	065b      	lsls	r3, r3, #25
 8006f1c:	f53f af7e 	bmi.w	8006e1c <_vfiprintf_r+0xf0>
 8006f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f22:	e77d      	b.n	8006e20 <_vfiprintf_r+0xf4>
 8006f24:	ab03      	add	r3, sp, #12
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	4622      	mov	r2, r4
 8006f2a:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <_vfiprintf_r+0x228>)
 8006f2c:	a904      	add	r1, sp, #16
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f000 f888 	bl	8007044 <_printf_i>
 8006f34:	e7ec      	b.n	8006f10 <_vfiprintf_r+0x1e4>
 8006f36:	bf00      	nop
 8006f38:	080078a4 	.word	0x080078a4
 8006f3c:	080078e4 	.word	0x080078e4
 8006f40:	080078c4 	.word	0x080078c4
 8006f44:	08007884 	.word	0x08007884
 8006f48:	080078ea 	.word	0x080078ea
 8006f4c:	080078ee 	.word	0x080078ee
 8006f50:	00000000 	.word	0x00000000
 8006f54:	08006d07 	.word	0x08006d07

08006f58 <_printf_common>:
 8006f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5c:	4691      	mov	r9, r2
 8006f5e:	461f      	mov	r7, r3
 8006f60:	688a      	ldr	r2, [r1, #8]
 8006f62:	690b      	ldr	r3, [r1, #16]
 8006f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	bfb8      	it	lt
 8006f6c:	4613      	movlt	r3, r2
 8006f6e:	f8c9 3000 	str.w	r3, [r9]
 8006f72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f76:	4606      	mov	r6, r0
 8006f78:	460c      	mov	r4, r1
 8006f7a:	b112      	cbz	r2, 8006f82 <_printf_common+0x2a>
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	f8c9 3000 	str.w	r3, [r9]
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	0699      	lsls	r1, r3, #26
 8006f86:	bf42      	ittt	mi
 8006f88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f8c:	3302      	addmi	r3, #2
 8006f8e:	f8c9 3000 	strmi.w	r3, [r9]
 8006f92:	6825      	ldr	r5, [r4, #0]
 8006f94:	f015 0506 	ands.w	r5, r5, #6
 8006f98:	d107      	bne.n	8006faa <_printf_common+0x52>
 8006f9a:	f104 0a19 	add.w	sl, r4, #25
 8006f9e:	68e3      	ldr	r3, [r4, #12]
 8006fa0:	f8d9 2000 	ldr.w	r2, [r9]
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	42ab      	cmp	r3, r5
 8006fa8:	dc28      	bgt.n	8006ffc <_printf_common+0xa4>
 8006faa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	3300      	adds	r3, #0
 8006fb2:	bf18      	it	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	0692      	lsls	r2, r2, #26
 8006fb8:	d42d      	bmi.n	8007016 <_printf_common+0xbe>
 8006fba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fbe:	4639      	mov	r1, r7
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	47c0      	blx	r8
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d020      	beq.n	800700a <_printf_common+0xb2>
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	68e5      	ldr	r5, [r4, #12]
 8006fcc:	f8d9 2000 	ldr.w	r2, [r9]
 8006fd0:	f003 0306 	and.w	r3, r3, #6
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	bf08      	it	eq
 8006fd8:	1aad      	subeq	r5, r5, r2
 8006fda:	68a3      	ldr	r3, [r4, #8]
 8006fdc:	6922      	ldr	r2, [r4, #16]
 8006fde:	bf0c      	ite	eq
 8006fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fe4:	2500      	movne	r5, #0
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	bfc4      	itt	gt
 8006fea:	1a9b      	subgt	r3, r3, r2
 8006fec:	18ed      	addgt	r5, r5, r3
 8006fee:	f04f 0900 	mov.w	r9, #0
 8006ff2:	341a      	adds	r4, #26
 8006ff4:	454d      	cmp	r5, r9
 8006ff6:	d11a      	bne.n	800702e <_printf_common+0xd6>
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	e008      	b.n	800700e <_printf_common+0xb6>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	4652      	mov	r2, sl
 8007000:	4639      	mov	r1, r7
 8007002:	4630      	mov	r0, r6
 8007004:	47c0      	blx	r8
 8007006:	3001      	adds	r0, #1
 8007008:	d103      	bne.n	8007012 <_printf_common+0xba>
 800700a:	f04f 30ff 	mov.w	r0, #4294967295
 800700e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007012:	3501      	adds	r5, #1
 8007014:	e7c3      	b.n	8006f9e <_printf_common+0x46>
 8007016:	18e1      	adds	r1, r4, r3
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	2030      	movs	r0, #48	; 0x30
 800701c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007020:	4422      	add	r2, r4
 8007022:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007026:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800702a:	3302      	adds	r3, #2
 800702c:	e7c5      	b.n	8006fba <_printf_common+0x62>
 800702e:	2301      	movs	r3, #1
 8007030:	4622      	mov	r2, r4
 8007032:	4639      	mov	r1, r7
 8007034:	4630      	mov	r0, r6
 8007036:	47c0      	blx	r8
 8007038:	3001      	adds	r0, #1
 800703a:	d0e6      	beq.n	800700a <_printf_common+0xb2>
 800703c:	f109 0901 	add.w	r9, r9, #1
 8007040:	e7d8      	b.n	8006ff4 <_printf_common+0x9c>
	...

08007044 <_printf_i>:
 8007044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007048:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800704c:	460c      	mov	r4, r1
 800704e:	7e09      	ldrb	r1, [r1, #24]
 8007050:	b085      	sub	sp, #20
 8007052:	296e      	cmp	r1, #110	; 0x6e
 8007054:	4617      	mov	r7, r2
 8007056:	4606      	mov	r6, r0
 8007058:	4698      	mov	r8, r3
 800705a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800705c:	f000 80b3 	beq.w	80071c6 <_printf_i+0x182>
 8007060:	d822      	bhi.n	80070a8 <_printf_i+0x64>
 8007062:	2963      	cmp	r1, #99	; 0x63
 8007064:	d036      	beq.n	80070d4 <_printf_i+0x90>
 8007066:	d80a      	bhi.n	800707e <_printf_i+0x3a>
 8007068:	2900      	cmp	r1, #0
 800706a:	f000 80b9 	beq.w	80071e0 <_printf_i+0x19c>
 800706e:	2958      	cmp	r1, #88	; 0x58
 8007070:	f000 8083 	beq.w	800717a <_printf_i+0x136>
 8007074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007078:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800707c:	e032      	b.n	80070e4 <_printf_i+0xa0>
 800707e:	2964      	cmp	r1, #100	; 0x64
 8007080:	d001      	beq.n	8007086 <_printf_i+0x42>
 8007082:	2969      	cmp	r1, #105	; 0x69
 8007084:	d1f6      	bne.n	8007074 <_printf_i+0x30>
 8007086:	6820      	ldr	r0, [r4, #0]
 8007088:	6813      	ldr	r3, [r2, #0]
 800708a:	0605      	lsls	r5, r0, #24
 800708c:	f103 0104 	add.w	r1, r3, #4
 8007090:	d52a      	bpl.n	80070e8 <_printf_i+0xa4>
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6011      	str	r1, [r2, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	da03      	bge.n	80070a2 <_printf_i+0x5e>
 800709a:	222d      	movs	r2, #45	; 0x2d
 800709c:	425b      	negs	r3, r3
 800709e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80070a2:	486f      	ldr	r0, [pc, #444]	; (8007260 <_printf_i+0x21c>)
 80070a4:	220a      	movs	r2, #10
 80070a6:	e039      	b.n	800711c <_printf_i+0xd8>
 80070a8:	2973      	cmp	r1, #115	; 0x73
 80070aa:	f000 809d 	beq.w	80071e8 <_printf_i+0x1a4>
 80070ae:	d808      	bhi.n	80070c2 <_printf_i+0x7e>
 80070b0:	296f      	cmp	r1, #111	; 0x6f
 80070b2:	d020      	beq.n	80070f6 <_printf_i+0xb2>
 80070b4:	2970      	cmp	r1, #112	; 0x70
 80070b6:	d1dd      	bne.n	8007074 <_printf_i+0x30>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	f043 0320 	orr.w	r3, r3, #32
 80070be:	6023      	str	r3, [r4, #0]
 80070c0:	e003      	b.n	80070ca <_printf_i+0x86>
 80070c2:	2975      	cmp	r1, #117	; 0x75
 80070c4:	d017      	beq.n	80070f6 <_printf_i+0xb2>
 80070c6:	2978      	cmp	r1, #120	; 0x78
 80070c8:	d1d4      	bne.n	8007074 <_printf_i+0x30>
 80070ca:	2378      	movs	r3, #120	; 0x78
 80070cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070d0:	4864      	ldr	r0, [pc, #400]	; (8007264 <_printf_i+0x220>)
 80070d2:	e055      	b.n	8007180 <_printf_i+0x13c>
 80070d4:	6813      	ldr	r3, [r2, #0]
 80070d6:	1d19      	adds	r1, r3, #4
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6011      	str	r1, [r2, #0]
 80070dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070e4:	2301      	movs	r3, #1
 80070e6:	e08c      	b.n	8007202 <_printf_i+0x1be>
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6011      	str	r1, [r2, #0]
 80070ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070f0:	bf18      	it	ne
 80070f2:	b21b      	sxthne	r3, r3
 80070f4:	e7cf      	b.n	8007096 <_printf_i+0x52>
 80070f6:	6813      	ldr	r3, [r2, #0]
 80070f8:	6825      	ldr	r5, [r4, #0]
 80070fa:	1d18      	adds	r0, r3, #4
 80070fc:	6010      	str	r0, [r2, #0]
 80070fe:	0628      	lsls	r0, r5, #24
 8007100:	d501      	bpl.n	8007106 <_printf_i+0xc2>
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	e002      	b.n	800710c <_printf_i+0xc8>
 8007106:	0668      	lsls	r0, r5, #25
 8007108:	d5fb      	bpl.n	8007102 <_printf_i+0xbe>
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	4854      	ldr	r0, [pc, #336]	; (8007260 <_printf_i+0x21c>)
 800710e:	296f      	cmp	r1, #111	; 0x6f
 8007110:	bf14      	ite	ne
 8007112:	220a      	movne	r2, #10
 8007114:	2208      	moveq	r2, #8
 8007116:	2100      	movs	r1, #0
 8007118:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800711c:	6865      	ldr	r5, [r4, #4]
 800711e:	60a5      	str	r5, [r4, #8]
 8007120:	2d00      	cmp	r5, #0
 8007122:	f2c0 8095 	blt.w	8007250 <_printf_i+0x20c>
 8007126:	6821      	ldr	r1, [r4, #0]
 8007128:	f021 0104 	bic.w	r1, r1, #4
 800712c:	6021      	str	r1, [r4, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d13d      	bne.n	80071ae <_printf_i+0x16a>
 8007132:	2d00      	cmp	r5, #0
 8007134:	f040 808e 	bne.w	8007254 <_printf_i+0x210>
 8007138:	4665      	mov	r5, ip
 800713a:	2a08      	cmp	r2, #8
 800713c:	d10b      	bne.n	8007156 <_printf_i+0x112>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	07db      	lsls	r3, r3, #31
 8007142:	d508      	bpl.n	8007156 <_printf_i+0x112>
 8007144:	6923      	ldr	r3, [r4, #16]
 8007146:	6862      	ldr	r2, [r4, #4]
 8007148:	429a      	cmp	r2, r3
 800714a:	bfde      	ittt	le
 800714c:	2330      	movle	r3, #48	; 0x30
 800714e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007152:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007156:	ebac 0305 	sub.w	r3, ip, r5
 800715a:	6123      	str	r3, [r4, #16]
 800715c:	f8cd 8000 	str.w	r8, [sp]
 8007160:	463b      	mov	r3, r7
 8007162:	aa03      	add	r2, sp, #12
 8007164:	4621      	mov	r1, r4
 8007166:	4630      	mov	r0, r6
 8007168:	f7ff fef6 	bl	8006f58 <_printf_common>
 800716c:	3001      	adds	r0, #1
 800716e:	d14d      	bne.n	800720c <_printf_i+0x1c8>
 8007170:	f04f 30ff 	mov.w	r0, #4294967295
 8007174:	b005      	add	sp, #20
 8007176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800717a:	4839      	ldr	r0, [pc, #228]	; (8007260 <_printf_i+0x21c>)
 800717c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007180:	6813      	ldr	r3, [r2, #0]
 8007182:	6821      	ldr	r1, [r4, #0]
 8007184:	1d1d      	adds	r5, r3, #4
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6015      	str	r5, [r2, #0]
 800718a:	060a      	lsls	r2, r1, #24
 800718c:	d50b      	bpl.n	80071a6 <_printf_i+0x162>
 800718e:	07ca      	lsls	r2, r1, #31
 8007190:	bf44      	itt	mi
 8007192:	f041 0120 	orrmi.w	r1, r1, #32
 8007196:	6021      	strmi	r1, [r4, #0]
 8007198:	b91b      	cbnz	r3, 80071a2 <_printf_i+0x15e>
 800719a:	6822      	ldr	r2, [r4, #0]
 800719c:	f022 0220 	bic.w	r2, r2, #32
 80071a0:	6022      	str	r2, [r4, #0]
 80071a2:	2210      	movs	r2, #16
 80071a4:	e7b7      	b.n	8007116 <_printf_i+0xd2>
 80071a6:	064d      	lsls	r5, r1, #25
 80071a8:	bf48      	it	mi
 80071aa:	b29b      	uxthmi	r3, r3
 80071ac:	e7ef      	b.n	800718e <_printf_i+0x14a>
 80071ae:	4665      	mov	r5, ip
 80071b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80071b4:	fb02 3311 	mls	r3, r2, r1, r3
 80071b8:	5cc3      	ldrb	r3, [r0, r3]
 80071ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80071be:	460b      	mov	r3, r1
 80071c0:	2900      	cmp	r1, #0
 80071c2:	d1f5      	bne.n	80071b0 <_printf_i+0x16c>
 80071c4:	e7b9      	b.n	800713a <_printf_i+0xf6>
 80071c6:	6813      	ldr	r3, [r2, #0]
 80071c8:	6825      	ldr	r5, [r4, #0]
 80071ca:	6961      	ldr	r1, [r4, #20]
 80071cc:	1d18      	adds	r0, r3, #4
 80071ce:	6010      	str	r0, [r2, #0]
 80071d0:	0628      	lsls	r0, r5, #24
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	d501      	bpl.n	80071da <_printf_i+0x196>
 80071d6:	6019      	str	r1, [r3, #0]
 80071d8:	e002      	b.n	80071e0 <_printf_i+0x19c>
 80071da:	066a      	lsls	r2, r5, #25
 80071dc:	d5fb      	bpl.n	80071d6 <_printf_i+0x192>
 80071de:	8019      	strh	r1, [r3, #0]
 80071e0:	2300      	movs	r3, #0
 80071e2:	6123      	str	r3, [r4, #16]
 80071e4:	4665      	mov	r5, ip
 80071e6:	e7b9      	b.n	800715c <_printf_i+0x118>
 80071e8:	6813      	ldr	r3, [r2, #0]
 80071ea:	1d19      	adds	r1, r3, #4
 80071ec:	6011      	str	r1, [r2, #0]
 80071ee:	681d      	ldr	r5, [r3, #0]
 80071f0:	6862      	ldr	r2, [r4, #4]
 80071f2:	2100      	movs	r1, #0
 80071f4:	4628      	mov	r0, r5
 80071f6:	f7f9 f873 	bl	80002e0 <memchr>
 80071fa:	b108      	cbz	r0, 8007200 <_printf_i+0x1bc>
 80071fc:	1b40      	subs	r0, r0, r5
 80071fe:	6060      	str	r0, [r4, #4]
 8007200:	6863      	ldr	r3, [r4, #4]
 8007202:	6123      	str	r3, [r4, #16]
 8007204:	2300      	movs	r3, #0
 8007206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800720a:	e7a7      	b.n	800715c <_printf_i+0x118>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	462a      	mov	r2, r5
 8007210:	4639      	mov	r1, r7
 8007212:	4630      	mov	r0, r6
 8007214:	47c0      	blx	r8
 8007216:	3001      	adds	r0, #1
 8007218:	d0aa      	beq.n	8007170 <_printf_i+0x12c>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	079b      	lsls	r3, r3, #30
 800721e:	d413      	bmi.n	8007248 <_printf_i+0x204>
 8007220:	68e0      	ldr	r0, [r4, #12]
 8007222:	9b03      	ldr	r3, [sp, #12]
 8007224:	4298      	cmp	r0, r3
 8007226:	bfb8      	it	lt
 8007228:	4618      	movlt	r0, r3
 800722a:	e7a3      	b.n	8007174 <_printf_i+0x130>
 800722c:	2301      	movs	r3, #1
 800722e:	464a      	mov	r2, r9
 8007230:	4639      	mov	r1, r7
 8007232:	4630      	mov	r0, r6
 8007234:	47c0      	blx	r8
 8007236:	3001      	adds	r0, #1
 8007238:	d09a      	beq.n	8007170 <_printf_i+0x12c>
 800723a:	3501      	adds	r5, #1
 800723c:	68e3      	ldr	r3, [r4, #12]
 800723e:	9a03      	ldr	r2, [sp, #12]
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	42ab      	cmp	r3, r5
 8007244:	dcf2      	bgt.n	800722c <_printf_i+0x1e8>
 8007246:	e7eb      	b.n	8007220 <_printf_i+0x1dc>
 8007248:	2500      	movs	r5, #0
 800724a:	f104 0919 	add.w	r9, r4, #25
 800724e:	e7f5      	b.n	800723c <_printf_i+0x1f8>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1ac      	bne.n	80071ae <_printf_i+0x16a>
 8007254:	7803      	ldrb	r3, [r0, #0]
 8007256:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800725a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800725e:	e76c      	b.n	800713a <_printf_i+0xf6>
 8007260:	080078f5 	.word	0x080078f5
 8007264:	08007906 	.word	0x08007906

08007268 <_sbrk_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4c06      	ldr	r4, [pc, #24]	; (8007284 <_sbrk_r+0x1c>)
 800726c:	2300      	movs	r3, #0
 800726e:	4605      	mov	r5, r0
 8007270:	4608      	mov	r0, r1
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	f7f9 feda 	bl	800102c <_sbrk>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_sbrk_r+0x1a>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	b103      	cbz	r3, 8007282 <_sbrk_r+0x1a>
 8007280:	602b      	str	r3, [r5, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	24000698 	.word	0x24000698

08007288 <__sread>:
 8007288:	b510      	push	{r4, lr}
 800728a:	460c      	mov	r4, r1
 800728c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007290:	f000 fa96 	bl	80077c0 <_read_r>
 8007294:	2800      	cmp	r0, #0
 8007296:	bfab      	itete	ge
 8007298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800729a:	89a3      	ldrhlt	r3, [r4, #12]
 800729c:	181b      	addge	r3, r3, r0
 800729e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072a2:	bfac      	ite	ge
 80072a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80072a6:	81a3      	strhlt	r3, [r4, #12]
 80072a8:	bd10      	pop	{r4, pc}

080072aa <__swrite>:
 80072aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ae:	461f      	mov	r7, r3
 80072b0:	898b      	ldrh	r3, [r1, #12]
 80072b2:	05db      	lsls	r3, r3, #23
 80072b4:	4605      	mov	r5, r0
 80072b6:	460c      	mov	r4, r1
 80072b8:	4616      	mov	r6, r2
 80072ba:	d505      	bpl.n	80072c8 <__swrite+0x1e>
 80072bc:	2302      	movs	r3, #2
 80072be:	2200      	movs	r2, #0
 80072c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c4:	f000 f9b6 	bl	8007634 <_lseek_r>
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072d2:	81a3      	strh	r3, [r4, #12]
 80072d4:	4632      	mov	r2, r6
 80072d6:	463b      	mov	r3, r7
 80072d8:	4628      	mov	r0, r5
 80072da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072de:	f000 b869 	b.w	80073b4 <_write_r>

080072e2 <__sseek>:
 80072e2:	b510      	push	{r4, lr}
 80072e4:	460c      	mov	r4, r1
 80072e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ea:	f000 f9a3 	bl	8007634 <_lseek_r>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	bf15      	itete	ne
 80072f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80072f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072fe:	81a3      	strheq	r3, [r4, #12]
 8007300:	bf18      	it	ne
 8007302:	81a3      	strhne	r3, [r4, #12]
 8007304:	bd10      	pop	{r4, pc}

08007306 <__sclose>:
 8007306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800730a:	f000 b8d3 	b.w	80074b4 <_close_r>
	...

08007310 <__swbuf_r>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	460e      	mov	r6, r1
 8007314:	4614      	mov	r4, r2
 8007316:	4605      	mov	r5, r0
 8007318:	b118      	cbz	r0, 8007322 <__swbuf_r+0x12>
 800731a:	6983      	ldr	r3, [r0, #24]
 800731c:	b90b      	cbnz	r3, 8007322 <__swbuf_r+0x12>
 800731e:	f7ff fbf7 	bl	8006b10 <__sinit>
 8007322:	4b21      	ldr	r3, [pc, #132]	; (80073a8 <__swbuf_r+0x98>)
 8007324:	429c      	cmp	r4, r3
 8007326:	d12a      	bne.n	800737e <__swbuf_r+0x6e>
 8007328:	686c      	ldr	r4, [r5, #4]
 800732a:	69a3      	ldr	r3, [r4, #24]
 800732c:	60a3      	str	r3, [r4, #8]
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	071a      	lsls	r2, r3, #28
 8007332:	d52e      	bpl.n	8007392 <__swbuf_r+0x82>
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	b363      	cbz	r3, 8007392 <__swbuf_r+0x82>
 8007338:	6923      	ldr	r3, [r4, #16]
 800733a:	6820      	ldr	r0, [r4, #0]
 800733c:	1ac0      	subs	r0, r0, r3
 800733e:	6963      	ldr	r3, [r4, #20]
 8007340:	b2f6      	uxtb	r6, r6
 8007342:	4283      	cmp	r3, r0
 8007344:	4637      	mov	r7, r6
 8007346:	dc04      	bgt.n	8007352 <__swbuf_r+0x42>
 8007348:	4621      	mov	r1, r4
 800734a:	4628      	mov	r0, r5
 800734c:	f000 f948 	bl	80075e0 <_fflush_r>
 8007350:	bb28      	cbnz	r0, 800739e <__swbuf_r+0x8e>
 8007352:	68a3      	ldr	r3, [r4, #8]
 8007354:	3b01      	subs	r3, #1
 8007356:	60a3      	str	r3, [r4, #8]
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	6022      	str	r2, [r4, #0]
 800735e:	701e      	strb	r6, [r3, #0]
 8007360:	6963      	ldr	r3, [r4, #20]
 8007362:	3001      	adds	r0, #1
 8007364:	4283      	cmp	r3, r0
 8007366:	d004      	beq.n	8007372 <__swbuf_r+0x62>
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	07db      	lsls	r3, r3, #31
 800736c:	d519      	bpl.n	80073a2 <__swbuf_r+0x92>
 800736e:	2e0a      	cmp	r6, #10
 8007370:	d117      	bne.n	80073a2 <__swbuf_r+0x92>
 8007372:	4621      	mov	r1, r4
 8007374:	4628      	mov	r0, r5
 8007376:	f000 f933 	bl	80075e0 <_fflush_r>
 800737a:	b190      	cbz	r0, 80073a2 <__swbuf_r+0x92>
 800737c:	e00f      	b.n	800739e <__swbuf_r+0x8e>
 800737e:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <__swbuf_r+0x9c>)
 8007380:	429c      	cmp	r4, r3
 8007382:	d101      	bne.n	8007388 <__swbuf_r+0x78>
 8007384:	68ac      	ldr	r4, [r5, #8]
 8007386:	e7d0      	b.n	800732a <__swbuf_r+0x1a>
 8007388:	4b09      	ldr	r3, [pc, #36]	; (80073b0 <__swbuf_r+0xa0>)
 800738a:	429c      	cmp	r4, r3
 800738c:	bf08      	it	eq
 800738e:	68ec      	ldreq	r4, [r5, #12]
 8007390:	e7cb      	b.n	800732a <__swbuf_r+0x1a>
 8007392:	4621      	mov	r1, r4
 8007394:	4628      	mov	r0, r5
 8007396:	f000 f81f 	bl	80073d8 <__swsetup_r>
 800739a:	2800      	cmp	r0, #0
 800739c:	d0cc      	beq.n	8007338 <__swbuf_r+0x28>
 800739e:	f04f 37ff 	mov.w	r7, #4294967295
 80073a2:	4638      	mov	r0, r7
 80073a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a6:	bf00      	nop
 80073a8:	080078a4 	.word	0x080078a4
 80073ac:	080078c4 	.word	0x080078c4
 80073b0:	08007884 	.word	0x08007884

080073b4 <_write_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4c07      	ldr	r4, [pc, #28]	; (80073d4 <_write_r+0x20>)
 80073b8:	4605      	mov	r5, r0
 80073ba:	4608      	mov	r0, r1
 80073bc:	4611      	mov	r1, r2
 80073be:	2200      	movs	r2, #0
 80073c0:	6022      	str	r2, [r4, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	f7f9 fde1 	bl	8000f8a <_write>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_write_r+0x1e>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_write_r+0x1e>
 80073d0:	602b      	str	r3, [r5, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	24000698 	.word	0x24000698

080073d8 <__swsetup_r>:
 80073d8:	4b32      	ldr	r3, [pc, #200]	; (80074a4 <__swsetup_r+0xcc>)
 80073da:	b570      	push	{r4, r5, r6, lr}
 80073dc:	681d      	ldr	r5, [r3, #0]
 80073de:	4606      	mov	r6, r0
 80073e0:	460c      	mov	r4, r1
 80073e2:	b125      	cbz	r5, 80073ee <__swsetup_r+0x16>
 80073e4:	69ab      	ldr	r3, [r5, #24]
 80073e6:	b913      	cbnz	r3, 80073ee <__swsetup_r+0x16>
 80073e8:	4628      	mov	r0, r5
 80073ea:	f7ff fb91 	bl	8006b10 <__sinit>
 80073ee:	4b2e      	ldr	r3, [pc, #184]	; (80074a8 <__swsetup_r+0xd0>)
 80073f0:	429c      	cmp	r4, r3
 80073f2:	d10f      	bne.n	8007414 <__swsetup_r+0x3c>
 80073f4:	686c      	ldr	r4, [r5, #4]
 80073f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	0715      	lsls	r5, r2, #28
 80073fe:	d42c      	bmi.n	800745a <__swsetup_r+0x82>
 8007400:	06d0      	lsls	r0, r2, #27
 8007402:	d411      	bmi.n	8007428 <__swsetup_r+0x50>
 8007404:	2209      	movs	r2, #9
 8007406:	6032      	str	r2, [r6, #0]
 8007408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800740c:	81a3      	strh	r3, [r4, #12]
 800740e:	f04f 30ff 	mov.w	r0, #4294967295
 8007412:	e03e      	b.n	8007492 <__swsetup_r+0xba>
 8007414:	4b25      	ldr	r3, [pc, #148]	; (80074ac <__swsetup_r+0xd4>)
 8007416:	429c      	cmp	r4, r3
 8007418:	d101      	bne.n	800741e <__swsetup_r+0x46>
 800741a:	68ac      	ldr	r4, [r5, #8]
 800741c:	e7eb      	b.n	80073f6 <__swsetup_r+0x1e>
 800741e:	4b24      	ldr	r3, [pc, #144]	; (80074b0 <__swsetup_r+0xd8>)
 8007420:	429c      	cmp	r4, r3
 8007422:	bf08      	it	eq
 8007424:	68ec      	ldreq	r4, [r5, #12]
 8007426:	e7e6      	b.n	80073f6 <__swsetup_r+0x1e>
 8007428:	0751      	lsls	r1, r2, #29
 800742a:	d512      	bpl.n	8007452 <__swsetup_r+0x7a>
 800742c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800742e:	b141      	cbz	r1, 8007442 <__swsetup_r+0x6a>
 8007430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007434:	4299      	cmp	r1, r3
 8007436:	d002      	beq.n	800743e <__swsetup_r+0x66>
 8007438:	4630      	mov	r0, r6
 800743a:	f000 f973 	bl	8007724 <_free_r>
 800743e:	2300      	movs	r3, #0
 8007440:	6363      	str	r3, [r4, #52]	; 0x34
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007448:	81a3      	strh	r3, [r4, #12]
 800744a:	2300      	movs	r3, #0
 800744c:	6063      	str	r3, [r4, #4]
 800744e:	6923      	ldr	r3, [r4, #16]
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	f043 0308 	orr.w	r3, r3, #8
 8007458:	81a3      	strh	r3, [r4, #12]
 800745a:	6923      	ldr	r3, [r4, #16]
 800745c:	b94b      	cbnz	r3, 8007472 <__swsetup_r+0x9a>
 800745e:	89a3      	ldrh	r3, [r4, #12]
 8007460:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007468:	d003      	beq.n	8007472 <__swsetup_r+0x9a>
 800746a:	4621      	mov	r1, r4
 800746c:	4630      	mov	r0, r6
 800746e:	f000 f917 	bl	80076a0 <__smakebuf_r>
 8007472:	89a2      	ldrh	r2, [r4, #12]
 8007474:	f012 0301 	ands.w	r3, r2, #1
 8007478:	d00c      	beq.n	8007494 <__swsetup_r+0xbc>
 800747a:	2300      	movs	r3, #0
 800747c:	60a3      	str	r3, [r4, #8]
 800747e:	6963      	ldr	r3, [r4, #20]
 8007480:	425b      	negs	r3, r3
 8007482:	61a3      	str	r3, [r4, #24]
 8007484:	6923      	ldr	r3, [r4, #16]
 8007486:	b953      	cbnz	r3, 800749e <__swsetup_r+0xc6>
 8007488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800748c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007490:	d1ba      	bne.n	8007408 <__swsetup_r+0x30>
 8007492:	bd70      	pop	{r4, r5, r6, pc}
 8007494:	0792      	lsls	r2, r2, #30
 8007496:	bf58      	it	pl
 8007498:	6963      	ldrpl	r3, [r4, #20]
 800749a:	60a3      	str	r3, [r4, #8]
 800749c:	e7f2      	b.n	8007484 <__swsetup_r+0xac>
 800749e:	2000      	movs	r0, #0
 80074a0:	e7f7      	b.n	8007492 <__swsetup_r+0xba>
 80074a2:	bf00      	nop
 80074a4:	24000010 	.word	0x24000010
 80074a8:	080078a4 	.word	0x080078a4
 80074ac:	080078c4 	.word	0x080078c4
 80074b0:	08007884 	.word	0x08007884

080074b4 <_close_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4c06      	ldr	r4, [pc, #24]	; (80074d0 <_close_r+0x1c>)
 80074b8:	2300      	movs	r3, #0
 80074ba:	4605      	mov	r5, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	6023      	str	r3, [r4, #0]
 80074c0:	f7f9 fd7f 	bl	8000fc2 <_close>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_close_r+0x1a>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_close_r+0x1a>
 80074cc:	602b      	str	r3, [r5, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	24000698 	.word	0x24000698

080074d4 <__sflush_r>:
 80074d4:	898a      	ldrh	r2, [r1, #12]
 80074d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074da:	4605      	mov	r5, r0
 80074dc:	0710      	lsls	r0, r2, #28
 80074de:	460c      	mov	r4, r1
 80074e0:	d458      	bmi.n	8007594 <__sflush_r+0xc0>
 80074e2:	684b      	ldr	r3, [r1, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dc05      	bgt.n	80074f4 <__sflush_r+0x20>
 80074e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	dc02      	bgt.n	80074f4 <__sflush_r+0x20>
 80074ee:	2000      	movs	r0, #0
 80074f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074f6:	2e00      	cmp	r6, #0
 80074f8:	d0f9      	beq.n	80074ee <__sflush_r+0x1a>
 80074fa:	2300      	movs	r3, #0
 80074fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007500:	682f      	ldr	r7, [r5, #0]
 8007502:	6a21      	ldr	r1, [r4, #32]
 8007504:	602b      	str	r3, [r5, #0]
 8007506:	d032      	beq.n	800756e <__sflush_r+0x9a>
 8007508:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	075a      	lsls	r2, r3, #29
 800750e:	d505      	bpl.n	800751c <__sflush_r+0x48>
 8007510:	6863      	ldr	r3, [r4, #4]
 8007512:	1ac0      	subs	r0, r0, r3
 8007514:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007516:	b10b      	cbz	r3, 800751c <__sflush_r+0x48>
 8007518:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800751a:	1ac0      	subs	r0, r0, r3
 800751c:	2300      	movs	r3, #0
 800751e:	4602      	mov	r2, r0
 8007520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007522:	6a21      	ldr	r1, [r4, #32]
 8007524:	4628      	mov	r0, r5
 8007526:	47b0      	blx	r6
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	d106      	bne.n	800753c <__sflush_r+0x68>
 800752e:	6829      	ldr	r1, [r5, #0]
 8007530:	291d      	cmp	r1, #29
 8007532:	d848      	bhi.n	80075c6 <__sflush_r+0xf2>
 8007534:	4a29      	ldr	r2, [pc, #164]	; (80075dc <__sflush_r+0x108>)
 8007536:	40ca      	lsrs	r2, r1
 8007538:	07d6      	lsls	r6, r2, #31
 800753a:	d544      	bpl.n	80075c6 <__sflush_r+0xf2>
 800753c:	2200      	movs	r2, #0
 800753e:	6062      	str	r2, [r4, #4]
 8007540:	04d9      	lsls	r1, r3, #19
 8007542:	6922      	ldr	r2, [r4, #16]
 8007544:	6022      	str	r2, [r4, #0]
 8007546:	d504      	bpl.n	8007552 <__sflush_r+0x7e>
 8007548:	1c42      	adds	r2, r0, #1
 800754a:	d101      	bne.n	8007550 <__sflush_r+0x7c>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b903      	cbnz	r3, 8007552 <__sflush_r+0x7e>
 8007550:	6560      	str	r0, [r4, #84]	; 0x54
 8007552:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007554:	602f      	str	r7, [r5, #0]
 8007556:	2900      	cmp	r1, #0
 8007558:	d0c9      	beq.n	80074ee <__sflush_r+0x1a>
 800755a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800755e:	4299      	cmp	r1, r3
 8007560:	d002      	beq.n	8007568 <__sflush_r+0x94>
 8007562:	4628      	mov	r0, r5
 8007564:	f000 f8de 	bl	8007724 <_free_r>
 8007568:	2000      	movs	r0, #0
 800756a:	6360      	str	r0, [r4, #52]	; 0x34
 800756c:	e7c0      	b.n	80074f0 <__sflush_r+0x1c>
 800756e:	2301      	movs	r3, #1
 8007570:	4628      	mov	r0, r5
 8007572:	47b0      	blx	r6
 8007574:	1c41      	adds	r1, r0, #1
 8007576:	d1c8      	bne.n	800750a <__sflush_r+0x36>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0c5      	beq.n	800750a <__sflush_r+0x36>
 800757e:	2b1d      	cmp	r3, #29
 8007580:	d001      	beq.n	8007586 <__sflush_r+0xb2>
 8007582:	2b16      	cmp	r3, #22
 8007584:	d101      	bne.n	800758a <__sflush_r+0xb6>
 8007586:	602f      	str	r7, [r5, #0]
 8007588:	e7b1      	b.n	80074ee <__sflush_r+0x1a>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	e7ad      	b.n	80074f0 <__sflush_r+0x1c>
 8007594:	690f      	ldr	r7, [r1, #16]
 8007596:	2f00      	cmp	r7, #0
 8007598:	d0a9      	beq.n	80074ee <__sflush_r+0x1a>
 800759a:	0793      	lsls	r3, r2, #30
 800759c:	680e      	ldr	r6, [r1, #0]
 800759e:	bf08      	it	eq
 80075a0:	694b      	ldreq	r3, [r1, #20]
 80075a2:	600f      	str	r7, [r1, #0]
 80075a4:	bf18      	it	ne
 80075a6:	2300      	movne	r3, #0
 80075a8:	eba6 0807 	sub.w	r8, r6, r7
 80075ac:	608b      	str	r3, [r1, #8]
 80075ae:	f1b8 0f00 	cmp.w	r8, #0
 80075b2:	dd9c      	ble.n	80074ee <__sflush_r+0x1a>
 80075b4:	4643      	mov	r3, r8
 80075b6:	463a      	mov	r2, r7
 80075b8:	6a21      	ldr	r1, [r4, #32]
 80075ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075bc:	4628      	mov	r0, r5
 80075be:	47b0      	blx	r6
 80075c0:	2800      	cmp	r0, #0
 80075c2:	dc06      	bgt.n	80075d2 <__sflush_r+0xfe>
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ca:	81a3      	strh	r3, [r4, #12]
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	e78e      	b.n	80074f0 <__sflush_r+0x1c>
 80075d2:	4407      	add	r7, r0
 80075d4:	eba8 0800 	sub.w	r8, r8, r0
 80075d8:	e7e9      	b.n	80075ae <__sflush_r+0xda>
 80075da:	bf00      	nop
 80075dc:	20400001 	.word	0x20400001

080075e0 <_fflush_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	690b      	ldr	r3, [r1, #16]
 80075e4:	4605      	mov	r5, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	b1db      	cbz	r3, 8007622 <_fflush_r+0x42>
 80075ea:	b118      	cbz	r0, 80075f4 <_fflush_r+0x14>
 80075ec:	6983      	ldr	r3, [r0, #24]
 80075ee:	b90b      	cbnz	r3, 80075f4 <_fflush_r+0x14>
 80075f0:	f7ff fa8e 	bl	8006b10 <__sinit>
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <_fflush_r+0x48>)
 80075f6:	429c      	cmp	r4, r3
 80075f8:	d109      	bne.n	800760e <_fflush_r+0x2e>
 80075fa:	686c      	ldr	r4, [r5, #4]
 80075fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007600:	b17b      	cbz	r3, 8007622 <_fflush_r+0x42>
 8007602:	4621      	mov	r1, r4
 8007604:	4628      	mov	r0, r5
 8007606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800760a:	f7ff bf63 	b.w	80074d4 <__sflush_r>
 800760e:	4b07      	ldr	r3, [pc, #28]	; (800762c <_fflush_r+0x4c>)
 8007610:	429c      	cmp	r4, r3
 8007612:	d101      	bne.n	8007618 <_fflush_r+0x38>
 8007614:	68ac      	ldr	r4, [r5, #8]
 8007616:	e7f1      	b.n	80075fc <_fflush_r+0x1c>
 8007618:	4b05      	ldr	r3, [pc, #20]	; (8007630 <_fflush_r+0x50>)
 800761a:	429c      	cmp	r4, r3
 800761c:	bf08      	it	eq
 800761e:	68ec      	ldreq	r4, [r5, #12]
 8007620:	e7ec      	b.n	80075fc <_fflush_r+0x1c>
 8007622:	2000      	movs	r0, #0
 8007624:	bd38      	pop	{r3, r4, r5, pc}
 8007626:	bf00      	nop
 8007628:	080078a4 	.word	0x080078a4
 800762c:	080078c4 	.word	0x080078c4
 8007630:	08007884 	.word	0x08007884

08007634 <_lseek_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4c07      	ldr	r4, [pc, #28]	; (8007654 <_lseek_r+0x20>)
 8007638:	4605      	mov	r5, r0
 800763a:	4608      	mov	r0, r1
 800763c:	4611      	mov	r1, r2
 800763e:	2200      	movs	r2, #0
 8007640:	6022      	str	r2, [r4, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	f7f9 fce4 	bl	8001010 <_lseek>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d102      	bne.n	8007652 <_lseek_r+0x1e>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	b103      	cbz	r3, 8007652 <_lseek_r+0x1e>
 8007650:	602b      	str	r3, [r5, #0]
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	24000698 	.word	0x24000698

08007658 <__swhatbuf_r>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	460e      	mov	r6, r1
 800765c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007660:	2900      	cmp	r1, #0
 8007662:	b096      	sub	sp, #88	; 0x58
 8007664:	4614      	mov	r4, r2
 8007666:	461d      	mov	r5, r3
 8007668:	da07      	bge.n	800767a <__swhatbuf_r+0x22>
 800766a:	2300      	movs	r3, #0
 800766c:	602b      	str	r3, [r5, #0]
 800766e:	89b3      	ldrh	r3, [r6, #12]
 8007670:	061a      	lsls	r2, r3, #24
 8007672:	d410      	bmi.n	8007696 <__swhatbuf_r+0x3e>
 8007674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007678:	e00e      	b.n	8007698 <__swhatbuf_r+0x40>
 800767a:	466a      	mov	r2, sp
 800767c:	f000 f8b2 	bl	80077e4 <_fstat_r>
 8007680:	2800      	cmp	r0, #0
 8007682:	dbf2      	blt.n	800766a <__swhatbuf_r+0x12>
 8007684:	9a01      	ldr	r2, [sp, #4]
 8007686:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800768a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800768e:	425a      	negs	r2, r3
 8007690:	415a      	adcs	r2, r3
 8007692:	602a      	str	r2, [r5, #0]
 8007694:	e7ee      	b.n	8007674 <__swhatbuf_r+0x1c>
 8007696:	2340      	movs	r3, #64	; 0x40
 8007698:	2000      	movs	r0, #0
 800769a:	6023      	str	r3, [r4, #0]
 800769c:	b016      	add	sp, #88	; 0x58
 800769e:	bd70      	pop	{r4, r5, r6, pc}

080076a0 <__smakebuf_r>:
 80076a0:	898b      	ldrh	r3, [r1, #12]
 80076a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076a4:	079d      	lsls	r5, r3, #30
 80076a6:	4606      	mov	r6, r0
 80076a8:	460c      	mov	r4, r1
 80076aa:	d507      	bpl.n	80076bc <__smakebuf_r+0x1c>
 80076ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	6123      	str	r3, [r4, #16]
 80076b4:	2301      	movs	r3, #1
 80076b6:	6163      	str	r3, [r4, #20]
 80076b8:	b002      	add	sp, #8
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	ab01      	add	r3, sp, #4
 80076be:	466a      	mov	r2, sp
 80076c0:	f7ff ffca 	bl	8007658 <__swhatbuf_r>
 80076c4:	9900      	ldr	r1, [sp, #0]
 80076c6:	4605      	mov	r5, r0
 80076c8:	4630      	mov	r0, r6
 80076ca:	f7ff faab 	bl	8006c24 <_malloc_r>
 80076ce:	b948      	cbnz	r0, 80076e4 <__smakebuf_r+0x44>
 80076d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d4:	059a      	lsls	r2, r3, #22
 80076d6:	d4ef      	bmi.n	80076b8 <__smakebuf_r+0x18>
 80076d8:	f023 0303 	bic.w	r3, r3, #3
 80076dc:	f043 0302 	orr.w	r3, r3, #2
 80076e0:	81a3      	strh	r3, [r4, #12]
 80076e2:	e7e3      	b.n	80076ac <__smakebuf_r+0xc>
 80076e4:	4b0d      	ldr	r3, [pc, #52]	; (800771c <__smakebuf_r+0x7c>)
 80076e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	6020      	str	r0, [r4, #0]
 80076ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	9b00      	ldr	r3, [sp, #0]
 80076f4:	6163      	str	r3, [r4, #20]
 80076f6:	9b01      	ldr	r3, [sp, #4]
 80076f8:	6120      	str	r0, [r4, #16]
 80076fa:	b15b      	cbz	r3, 8007714 <__smakebuf_r+0x74>
 80076fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007700:	4630      	mov	r0, r6
 8007702:	f000 f881 	bl	8007808 <_isatty_r>
 8007706:	b128      	cbz	r0, 8007714 <__smakebuf_r+0x74>
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	81a3      	strh	r3, [r4, #12]
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	431d      	orrs	r5, r3
 8007718:	81a5      	strh	r5, [r4, #12]
 800771a:	e7cd      	b.n	80076b8 <__smakebuf_r+0x18>
 800771c:	08006ad9 	.word	0x08006ad9

08007720 <__malloc_lock>:
 8007720:	4770      	bx	lr

08007722 <__malloc_unlock>:
 8007722:	4770      	bx	lr

08007724 <_free_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4605      	mov	r5, r0
 8007728:	2900      	cmp	r1, #0
 800772a:	d045      	beq.n	80077b8 <_free_r+0x94>
 800772c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007730:	1f0c      	subs	r4, r1, #4
 8007732:	2b00      	cmp	r3, #0
 8007734:	bfb8      	it	lt
 8007736:	18e4      	addlt	r4, r4, r3
 8007738:	f7ff fff2 	bl	8007720 <__malloc_lock>
 800773c:	4a1f      	ldr	r2, [pc, #124]	; (80077bc <_free_r+0x98>)
 800773e:	6813      	ldr	r3, [r2, #0]
 8007740:	4610      	mov	r0, r2
 8007742:	b933      	cbnz	r3, 8007752 <_free_r+0x2e>
 8007744:	6063      	str	r3, [r4, #4]
 8007746:	6014      	str	r4, [r2, #0]
 8007748:	4628      	mov	r0, r5
 800774a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800774e:	f7ff bfe8 	b.w	8007722 <__malloc_unlock>
 8007752:	42a3      	cmp	r3, r4
 8007754:	d90c      	bls.n	8007770 <_free_r+0x4c>
 8007756:	6821      	ldr	r1, [r4, #0]
 8007758:	1862      	adds	r2, r4, r1
 800775a:	4293      	cmp	r3, r2
 800775c:	bf04      	itt	eq
 800775e:	681a      	ldreq	r2, [r3, #0]
 8007760:	685b      	ldreq	r3, [r3, #4]
 8007762:	6063      	str	r3, [r4, #4]
 8007764:	bf04      	itt	eq
 8007766:	1852      	addeq	r2, r2, r1
 8007768:	6022      	streq	r2, [r4, #0]
 800776a:	6004      	str	r4, [r0, #0]
 800776c:	e7ec      	b.n	8007748 <_free_r+0x24>
 800776e:	4613      	mov	r3, r2
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	b10a      	cbz	r2, 8007778 <_free_r+0x54>
 8007774:	42a2      	cmp	r2, r4
 8007776:	d9fa      	bls.n	800776e <_free_r+0x4a>
 8007778:	6819      	ldr	r1, [r3, #0]
 800777a:	1858      	adds	r0, r3, r1
 800777c:	42a0      	cmp	r0, r4
 800777e:	d10b      	bne.n	8007798 <_free_r+0x74>
 8007780:	6820      	ldr	r0, [r4, #0]
 8007782:	4401      	add	r1, r0
 8007784:	1858      	adds	r0, r3, r1
 8007786:	4282      	cmp	r2, r0
 8007788:	6019      	str	r1, [r3, #0]
 800778a:	d1dd      	bne.n	8007748 <_free_r+0x24>
 800778c:	6810      	ldr	r0, [r2, #0]
 800778e:	6852      	ldr	r2, [r2, #4]
 8007790:	605a      	str	r2, [r3, #4]
 8007792:	4401      	add	r1, r0
 8007794:	6019      	str	r1, [r3, #0]
 8007796:	e7d7      	b.n	8007748 <_free_r+0x24>
 8007798:	d902      	bls.n	80077a0 <_free_r+0x7c>
 800779a:	230c      	movs	r3, #12
 800779c:	602b      	str	r3, [r5, #0]
 800779e:	e7d3      	b.n	8007748 <_free_r+0x24>
 80077a0:	6820      	ldr	r0, [r4, #0]
 80077a2:	1821      	adds	r1, r4, r0
 80077a4:	428a      	cmp	r2, r1
 80077a6:	bf04      	itt	eq
 80077a8:	6811      	ldreq	r1, [r2, #0]
 80077aa:	6852      	ldreq	r2, [r2, #4]
 80077ac:	6062      	str	r2, [r4, #4]
 80077ae:	bf04      	itt	eq
 80077b0:	1809      	addeq	r1, r1, r0
 80077b2:	6021      	streq	r1, [r4, #0]
 80077b4:	605c      	str	r4, [r3, #4]
 80077b6:	e7c7      	b.n	8007748 <_free_r+0x24>
 80077b8:	bd38      	pop	{r3, r4, r5, pc}
 80077ba:	bf00      	nop
 80077bc:	24000154 	.word	0x24000154

080077c0 <_read_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	4c07      	ldr	r4, [pc, #28]	; (80077e0 <_read_r+0x20>)
 80077c4:	4605      	mov	r5, r0
 80077c6:	4608      	mov	r0, r1
 80077c8:	4611      	mov	r1, r2
 80077ca:	2200      	movs	r2, #0
 80077cc:	6022      	str	r2, [r4, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	f7f9 fbbe 	bl	8000f50 <_read>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_read_r+0x1e>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	b103      	cbz	r3, 80077de <_read_r+0x1e>
 80077dc:	602b      	str	r3, [r5, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	24000698 	.word	0x24000698

080077e4 <_fstat_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4c07      	ldr	r4, [pc, #28]	; (8007804 <_fstat_r+0x20>)
 80077e8:	2300      	movs	r3, #0
 80077ea:	4605      	mov	r5, r0
 80077ec:	4608      	mov	r0, r1
 80077ee:	4611      	mov	r1, r2
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	f7f9 fbf2 	bl	8000fda <_fstat>
 80077f6:	1c43      	adds	r3, r0, #1
 80077f8:	d102      	bne.n	8007800 <_fstat_r+0x1c>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	b103      	cbz	r3, 8007800 <_fstat_r+0x1c>
 80077fe:	602b      	str	r3, [r5, #0]
 8007800:	bd38      	pop	{r3, r4, r5, pc}
 8007802:	bf00      	nop
 8007804:	24000698 	.word	0x24000698

08007808 <_isatty_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4c06      	ldr	r4, [pc, #24]	; (8007824 <_isatty_r+0x1c>)
 800780c:	2300      	movs	r3, #0
 800780e:	4605      	mov	r5, r0
 8007810:	4608      	mov	r0, r1
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	f7f9 fbf1 	bl	8000ffa <_isatty>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_isatty_r+0x1a>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	b103      	cbz	r3, 8007822 <_isatty_r+0x1a>
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	24000698 	.word	0x24000698

08007828 <_init>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	bf00      	nop
 800782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782e:	bc08      	pop	{r3}
 8007830:	469e      	mov	lr, r3
 8007832:	4770      	bx	lr

08007834 <_fini>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	bf00      	nop
 8007838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783a:	bc08      	pop	{r3}
 800783c:	469e      	mov	lr, r3
 800783e:	4770      	bx	lr
